"""
Trulioo Python SDK

Package version: 1.0.4
Trulioo OpenAPI version: v1
Generated by OpenAPI Generator version: 5.0.1
"""

import re  # noqa: F401
import sys  # noqa: F401

from trulioo_sdk.api_client import ApiClient, Endpoint as _Endpoint
from trulioo_sdk.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from trulioo_sdk.model.transaction_status import TransactionStatus


class ConnectionApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        def __connection_async_callback_url(
            self,
            transaction_status,
            mode="trial",
            **kwargs
        ):
            """Connection Async Callback Url  # noqa: E501

            If set, the transaction will run asynchronously and Trulioo will try to update the client with transaction state updates until completed. If callback is not desired but the client wants to initiate an asynchronous transaction, provide https://api.globaldatacompany.com/connection/v1/async-callback as the Callback URL.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.connection_async_callback_url(transaction_status, mode="trial", async_req=True)
            >>> result = thread.get()

            Args:
                transaction_status (TransactionStatus): transactionStatus
                mode (str): trial or live. defaults to "trial", must be one of ["trial"]

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                {str: (bool, date, datetime, dict, float, int, list, str, none_type)}
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['mode'] = \
                mode
            kwargs['transaction_status'] = \
                transaction_status
            return self.call_with_http_info(**kwargs)

        self.connection_async_callback_url = _Endpoint(
            settings={
                'response_type': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),
                'auth': [],
                'endpoint_path': '/{mode}/connection/v1/async-callback',
                'operation_id': 'connection_async_callback_url',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'mode',
                    'transaction_status',
                ],
                'required': [
                    'mode',
                    'transaction_status',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'mode':
                        (str,),
                    'transaction_status':
                        (TransactionStatus,),
                },
                'attribute_map': {
                    'mode': 'mode',
                },
                'location_map': {
                    'mode': 'path',
                    'transaction_status': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'text/json'
                ],
                'content_type': [
                    'application/json',
                    'text/json'
                ]
            },
            api_client=api_client,
            callable=__connection_async_callback_url
        )

        def __say_hello(
            self,
            name,
            mode="trial",
            **kwargs
        ):
            """Say Hello  # noqa: E501

            This method enables you to check if your system can connect to our system. You can even use a web browser to verify a connection to our system.  Applied a maximum length for the name parameter of 100 via a route constraint  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.say_hello(name, mode="trial", async_req=True)
            >>> result = thread.get()

            Args:
                name (str): Name to be returned in the response
                mode (str): trial or live. defaults to "trial", must be one of ["trial"]

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                str
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['mode'] = \
                mode
            kwargs['name'] = \
                name
            return self.call_with_http_info(**kwargs)

        self.say_hello = _Endpoint(
            settings={
                'response_type': (str,),
                'auth': [],
                'endpoint_path': '/{mode}/connection/v1/sayhello/{name}',
                'operation_id': 'say_hello',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'mode',
                    'name',
                ],
                'required': [
                    'mode',
                    'name',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'mode':
                        (str,),
                    'name':
                        (str,),
                },
                'attribute_map': {
                    'mode': 'mode',
                    'name': 'name',
                },
                'location_map': {
                    'mode': 'path',
                    'name': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'text/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__say_hello
        )

        def __test_authentication(
            self,
            mode="trial",
            **kwargs
        ):
            """Test Authentication  # noqa: E501

            This method enables you to check if your credentials are valid. You will need to use basic authentication to ensure a successful response.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.test_authentication(mode="trial", async_req=True)
            >>> result = thread.get()

            Args:
                mode (str): trial or live. defaults to "trial", must be one of ["trial"]

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                str
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['mode'] = \
                mode
            return self.call_with_http_info(**kwargs)

        self.test_authentication = _Endpoint(
            settings={
                'response_type': (str,),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/{mode}/connection/v1/testauthentication',
                'operation_id': 'test_authentication',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'mode',
                ],
                'required': [
                    'mode',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'mode':
                        (str,),
                },
                'attribute_map': {
                    'mode': 'mode',
                },
                'location_map': {
                    'mode': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'text/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__test_authentication
        )
