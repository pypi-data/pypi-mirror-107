"""
Trulioo Python SDK

Package version: 1.0.4
Trulioo OpenAPI version: v1
Generated by OpenAPI Generator version: 5.0.1
"""

import re  # noqa: F401
import sys  # noqa: F401

from trulioo_sdk.api_client import ApiClient, Endpoint as _Endpoint
from trulioo_sdk.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from trulioo_sdk.model.business_registration_number import BusinessRegistrationNumber
from trulioo_sdk.model.consent import Consent
from trulioo_sdk.model.country_subdivision import CountrySubdivision
from trulioo_sdk.model.normalized_datasource_group_country import NormalizedDatasourceGroupCountry
from trulioo_sdk.model.test_entity_data_fields import TestEntityDataFields


class ConfigurationApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        def __get_business_registration_numbers(
            self,
            country_code,
            jurisdiction_code,
            mode="trial",
            **kwargs
        ):
            """Get Business Registration Numbers  # noqa: E501

            Gets the currently configured business registration numbers, for country and an optionally supplied jurisdiction  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_business_registration_numbers(country_code, jurisdiction_code, mode="trial", async_req=True)
            >>> result = thread.get()

            Args:
                country_code (str): Country alpha2 code, get via the call to https://developer.trulioo.com/reference#getcountrycodes
                jurisdiction_code (str): Optional jurisdiction code, get via the call to https://developer.trulioo.com/reference#getcountrysubdivisions
                mode (str): trial or live. defaults to "trial", must be one of ["trial"]

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [BusinessRegistrationNumber]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['mode'] = \
                mode
            kwargs['country_code'] = \
                country_code
            kwargs['jurisdiction_code'] = \
                jurisdiction_code
            return self.call_with_http_info(**kwargs)

        self.get_business_registration_numbers = _Endpoint(
            settings={
                'response_type': ([BusinessRegistrationNumber],),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/{mode}/configuration/v1/businessregistrationnumbers/{countryCode}/{jurisdictionCode}',
                'operation_id': 'get_business_registration_numbers',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'mode',
                    'country_code',
                    'jurisdiction_code',
                ],
                'required': [
                    'mode',
                    'country_code',
                    'jurisdiction_code',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'mode':
                        (str,),
                    'country_code':
                        (str,),
                    'jurisdiction_code':
                        (str,),
                },
                'attribute_map': {
                    'mode': 'mode',
                    'country_code': 'countryCode',
                    'jurisdiction_code': 'jurisdictionCode',
                },
                'location_map': {
                    'mode': 'path',
                    'country_code': 'path',
                    'jurisdiction_code': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'text/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_business_registration_numbers
        )

        def __get_consents(
            self,
            country_code,
            mode="trial",
            configuration_name="Identity Verification",
            **kwargs
        ):
            """Get Consents  # noqa: E501

            This method retrieves the consents required for data sources currently configured in your account configuration.   The response for this method contains a collection of strings that Verify method's ConsentForDataSources field expects to perform a verification using those data sources.   A failure to provide an element from the string collection will lead to a <a class=\"link-to-api\" href=\"#errors\">1005</a> service error.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_consents(country_code, mode="trial", configuration_name="Identity Verification", async_req=True)
            >>> result = thread.get()

            Args:
                country_code (str): Call CountryCodes to get the countries available to you.
                mode (str): trial or live. defaults to "trial", must be one of ["trial"]
                configuration_name (str): The product configuration. Currently \"Identity Verification\" for all products.. defaults to "Identity Verification", must be one of ["Identity Verification"]

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [str]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['mode'] = \
                mode
            kwargs['configuration_name'] = \
                configuration_name
            kwargs['country_code'] = \
                country_code
            return self.call_with_http_info(**kwargs)

        self.get_consents = _Endpoint(
            settings={
                'response_type': ([str],),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/{mode}/configuration/v1/consents/{configurationName}/{countryCode}',
                'operation_id': 'get_consents',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'mode',
                    'configuration_name',
                    'country_code',
                ],
                'required': [
                    'mode',
                    'configuration_name',
                    'country_code',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'mode':
                        (str,),
                    'configuration_name':
                        (str,),
                    'country_code':
                        (str,),
                },
                'attribute_map': {
                    'mode': 'mode',
                    'configuration_name': 'configurationName',
                    'country_code': 'countryCode',
                },
                'location_map': {
                    'mode': 'path',
                    'configuration_name': 'path',
                    'country_code': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'text/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_consents
        )

        def __get_country_codes(
            self,
            mode="trial",
            configuration_name="Identity Verification",
            **kwargs
        ):
            """Get Country Codes  # noqa: E501

            This method retrieves all the countries that are available to perform a verification.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_country_codes(mode="trial", configuration_name="Identity Verification", async_req=True)
            >>> result = thread.get()

            Args:
                mode (str): trial or live. defaults to "trial", must be one of ["trial"]
                configuration_name (str): The product configuration. Currently \"Identity Verification\" for all products.. defaults to "Identity Verification", must be one of ["Identity Verification"]

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [str]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['mode'] = \
                mode
            kwargs['configuration_name'] = \
                configuration_name
            return self.call_with_http_info(**kwargs)

        self.get_country_codes = _Endpoint(
            settings={
                'response_type': ([str],),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/{mode}/configuration/v1/countrycodes/{configurationName}',
                'operation_id': 'get_country_codes',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'mode',
                    'configuration_name',
                ],
                'required': [
                    'mode',
                    'configuration_name',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'mode':
                        (str,),
                    'configuration_name':
                        (str,),
                },
                'attribute_map': {
                    'mode': 'mode',
                    'configuration_name': 'configurationName',
                },
                'location_map': {
                    'mode': 'path',
                    'configuration_name': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'text/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_country_codes
        )

        def __get_country_subdivisions(
            self,
            country_code,
            mode="trial",
            **kwargs
        ):
            """Get Country Subdivisions  # noqa: E501

            Gets the provinces states or other subdivisions for a country, mostly matches ISO 3166-2  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_country_subdivisions(country_code, mode="trial", async_req=True)
            >>> result = thread.get()

            Args:
                country_code (str): Country alpha2 code, get the the call to countrycodes
                mode (str): trial or live. defaults to "trial", must be one of ["trial"]

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [CountrySubdivision]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['mode'] = \
                mode
            kwargs['country_code'] = \
                country_code
            return self.call_with_http_info(**kwargs)

        self.get_country_subdivisions = _Endpoint(
            settings={
                'response_type': ([CountrySubdivision],),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/{mode}/configuration/v1/countrysubdivisions/{countryCode}',
                'operation_id': 'get_country_subdivisions',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'mode',
                    'country_code',
                ],
                'required': [
                    'mode',
                    'country_code',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'mode':
                        (str,),
                    'country_code':
                        (str,),
                },
                'attribute_map': {
                    'mode': 'mode',
                    'country_code': 'countryCode',
                },
                'location_map': {
                    'mode': 'path',
                    'country_code': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'text/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_country_subdivisions
        )

        def __get_datasources(
            self,
            country_code,
            mode="trial",
            configuration_name="Identity Verification",
            **kwargs
        ):
            """Get Datasources  # noqa: E501

            Gets datasource groups configured for your product and country.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_datasources(country_code, mode="trial", configuration_name="Identity Verification", async_req=True)
            >>> result = thread.get()

            Args:
                country_code (str): Call CountryCodes to get the countries available to you.
                mode (str): trial or live. defaults to "trial", must be one of ["trial"]
                configuration_name (str): The product configuration. Currently \"Identity Verification\" for all products.. defaults to "Identity Verification", must be one of ["Identity Verification"]

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [NormalizedDatasourceGroupCountry]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['mode'] = \
                mode
            kwargs['configuration_name'] = \
                configuration_name
            kwargs['country_code'] = \
                country_code
            return self.call_with_http_info(**kwargs)

        self.get_datasources = _Endpoint(
            settings={
                'response_type': ([NormalizedDatasourceGroupCountry],),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/{mode}/configuration/v1/datasources/{configurationName}/{countryCode}',
                'operation_id': 'get_datasources',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'mode',
                    'configuration_name',
                    'country_code',
                ],
                'required': [
                    'mode',
                    'configuration_name',
                    'country_code',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'mode':
                        (str,),
                    'configuration_name':
                        (str,),
                    'country_code':
                        (str,),
                },
                'attribute_map': {
                    'mode': 'mode',
                    'configuration_name': 'configurationName',
                    'country_code': 'countryCode',
                },
                'location_map': {
                    'mode': 'path',
                    'configuration_name': 'path',
                    'country_code': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'text/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_datasources
        )

        def __get_detailed_consents(
            self,
            country_code,
            mode="trial",
            configuration_name="Identity Verification",
            **kwargs
        ):
            """Get Detailed Consents  # noqa: E501

            This method retrieves details about consents required for data sources currently configured in your account configuration.   The response for this method contains a collection of objects.  Each object contains the Name of the data source, Text outlining what the user is consenting to, and optionally a Url where the user can find more information about how their data will be used.    Failure to provide a Name from the object collection will lead to a <a class=\"link-to-api\" href=\"#errors\">1005</a> service error.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_detailed_consents(country_code, mode="trial", configuration_name="Identity Verification", async_req=True)
            >>> result = thread.get()

            Args:
                country_code (str): Call CountryCodes to get the countries available to you.
                mode (str): trial or live. defaults to "trial", must be one of ["trial"]
                configuration_name (str): The product configuration. Currently \"Identity Verification\" for all products.. defaults to "Identity Verification", must be one of ["Identity Verification"]

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [Consent]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['mode'] = \
                mode
            kwargs['configuration_name'] = \
                configuration_name
            kwargs['country_code'] = \
                country_code
            return self.call_with_http_info(**kwargs)

        self.get_detailed_consents = _Endpoint(
            settings={
                'response_type': ([Consent],),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/{mode}/configuration/v1/detailedConsents/{configurationName}/{countryCode}',
                'operation_id': 'get_detailed_consents',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'mode',
                    'configuration_name',
                    'country_code',
                ],
                'required': [
                    'mode',
                    'configuration_name',
                    'country_code',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'mode':
                        (str,),
                    'configuration_name':
                        (str,),
                    'country_code':
                        (str,),
                },
                'attribute_map': {
                    'mode': 'mode',
                    'configuration_name': 'configurationName',
                    'country_code': 'countryCode',
                },
                'location_map': {
                    'mode': 'path',
                    'configuration_name': 'path',
                    'country_code': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'text/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_detailed_consents
        )

        def __get_document_types(
            self,
            country_code,
            mode="trial",
            **kwargs
        ):
            """Get Document Types  # noqa: E501

            Gets the document types available for a country.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_document_types(country_code, mode="trial", async_req=True)
            >>> result = thread.get()

            Args:
                country_code (str): Call CountryCodes to get the countries available to you.
                mode (str): trial or live. defaults to "trial", must be one of ["trial"]

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                {str: ([str],)}
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['mode'] = \
                mode
            kwargs['country_code'] = \
                country_code
            return self.call_with_http_info(**kwargs)

        self.get_document_types = _Endpoint(
            settings={
                'response_type': ({str: ([str],)},),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/{mode}/configuration/v1/documentTypes/{countryCode}',
                'operation_id': 'get_document_types',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'mode',
                    'country_code',
                ],
                'required': [
                    'mode',
                    'country_code',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'mode':
                        (str,),
                    'country_code':
                        (str,),
                },
                'attribute_map': {
                    'mode': 'mode',
                    'country_code': 'countryCode',
                },
                'location_map': {
                    'mode': 'path',
                    'country_code': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'text/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_document_types
        )

        def __get_fields(
            self,
            country_code,
            mode="trial",
            configuration_name="Identity Verification",
            **kwargs
        ):
            """Get Fields  # noqa: E501

            Generates json schema for the API, the schema is dynamic based on the country and configuration you are using.  http://json-schema.org/documentation.html  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_fields(country_code, mode="trial", configuration_name="Identity Verification", async_req=True)
            >>> result = thread.get()

            Args:
                country_code (str): Call CountryCodes to get the countries available to you.
                mode (str): trial or live. defaults to "trial", must be one of ["trial"]
                configuration_name (str): The product configuration. Currently \"Identity Verification\" for all products.. defaults to "Identity Verification", must be one of ["Identity Verification"]

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                {str: (bool, date, datetime, dict, float, int, list, str, none_type)}
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['mode'] = \
                mode
            kwargs['configuration_name'] = \
                configuration_name
            kwargs['country_code'] = \
                country_code
            return self.call_with_http_info(**kwargs)

        self.get_fields = _Endpoint(
            settings={
                'response_type': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/{mode}/configuration/v1/fields/{configurationName}/{countryCode}',
                'operation_id': 'get_fields',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'mode',
                    'configuration_name',
                    'country_code',
                ],
                'required': [
                    'mode',
                    'configuration_name',
                    'country_code',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'mode':
                        (str,),
                    'configuration_name':
                        (str,),
                    'country_code':
                        (str,),
                },
                'attribute_map': {
                    'mode': 'mode',
                    'configuration_name': 'configurationName',
                    'country_code': 'countryCode',
                },
                'location_map': {
                    'mode': 'path',
                    'configuration_name': 'path',
                    'country_code': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'text/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_fields
        )

        def __get_recommended_fields(
            self,
            country_code,
            mode="trial",
            configuration_name="Identity Verification",
            **kwargs
        ):
            """Get Recommended Fields  # noqa: E501

            Generates json schema for the API, the schema is dynamic based on the recommendedFields country and account you are using.  http://json-schema.org/documentation.html  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_recommended_fields(country_code, mode="trial", configuration_name="Identity Verification", async_req=True)
            >>> result = thread.get()

            Args:
                country_code (str): Call CountryCodes to get the countries available to you.
                mode (str): trial or live. defaults to "trial", must be one of ["trial"]
                configuration_name (str): The product configuration. Currently \"Identity Verification\" for all products.. defaults to "Identity Verification", must be one of ["Identity Verification"]

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                {str: (bool, date, datetime, dict, float, int, list, str, none_type)}
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['mode'] = \
                mode
            kwargs['configuration_name'] = \
                configuration_name
            kwargs['country_code'] = \
                country_code
            return self.call_with_http_info(**kwargs)

        self.get_recommended_fields = _Endpoint(
            settings={
                'response_type': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/{mode}/configuration/v1/recommendedfields/{configurationName}/{countryCode}',
                'operation_id': 'get_recommended_fields',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'mode',
                    'configuration_name',
                    'country_code',
                ],
                'required': [
                    'mode',
                    'configuration_name',
                    'country_code',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'mode':
                        (str,),
                    'configuration_name':
                        (str,),
                    'country_code':
                        (str,),
                },
                'attribute_map': {
                    'mode': 'mode',
                    'configuration_name': 'configurationName',
                    'country_code': 'countryCode',
                },
                'location_map': {
                    'mode': 'path',
                    'configuration_name': 'path',
                    'country_code': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'text/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_recommended_fields
        )

        def __get_test_entities(
            self,
            country_code,
            mode="trial",
            configuration_name="Identity Verification",
            **kwargs
        ):
            """Get Test Entities  # noqa: E501

            Gets the test entities configured for your product and country.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_test_entities(country_code, mode="trial", configuration_name="Identity Verification", async_req=True)
            >>> result = thread.get()

            Args:
                country_code (str): Call CountryCodes to get the countries available to you.
                mode (str): trial or live. defaults to "trial", must be one of ["trial"]
                configuration_name (str): The product configuration. Currently \"Identity Verification\" for all products.. defaults to "Identity Verification", must be one of ["Identity Verification"]

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [TestEntityDataFields]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['mode'] = \
                mode
            kwargs['configuration_name'] = \
                configuration_name
            kwargs['country_code'] = \
                country_code
            return self.call_with_http_info(**kwargs)

        self.get_test_entities = _Endpoint(
            settings={
                'response_type': ([TestEntityDataFields],),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/{mode}/configuration/v1/testentities/{configurationName}/{countryCode}',
                'operation_id': 'get_test_entities',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'mode',
                    'configuration_name',
                    'country_code',
                ],
                'required': [
                    'mode',
                    'configuration_name',
                    'country_code',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'mode':
                        (str,),
                    'configuration_name':
                        (str,),
                    'country_code':
                        (str,),
                },
                'attribute_map': {
                    'mode': 'mode',
                    'configuration_name': 'configurationName',
                    'country_code': 'countryCode',
                },
                'location_map': {
                    'mode': 'path',
                    'configuration_name': 'path',
                    'country_code': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'text/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_test_entities
        )
