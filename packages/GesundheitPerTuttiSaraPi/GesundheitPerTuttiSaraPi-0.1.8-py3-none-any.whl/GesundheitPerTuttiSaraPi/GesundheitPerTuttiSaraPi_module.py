# -*- coding: utf-8 -*-
"""Gesundheit për tutti (pack).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dQE-BSxc4RZNOytmnjNrDQ9w5xS75xjI

# Gesundheit për tutti

#Project description


This project consists in a chatbot that aims to help people that may have some limits to access information about services related to health in South Tyrol, such as medical services, available doctors and open pharmacies.
The program accepts text, audio and image input in different languages. 
The user will get the results as on-screen text or audio according to his/her input and language choice.


Users can be immmigrants, teenagers, elderly people, phisically challenged people.


API and libraries used:



- Translator (from googletrans)
- gTTS (from gtts)
- SpeechToTextV1 (from ibm_watson)
- easyocr (from easyocr)
- w2n (from word2number)
- Health services http://dati.retecivica.bz.it/it/dataset southtyrolean-health-activities-list
- Available doctors http://dati.retecivica.bz.it/it/dataset/southtyrolean-doctors-on-duty
- Open pharmacies http://dati.retecivica.bz.it/it/dataset/farmacie-di-turno-dell-alto-adige1

# Getting ready: package and libraries installation
"""

#pip install googletrans==3.1.0a0

#pip install ibm_watson

#pip install easyocr

#pip install gTTS

#pip install word2number

import re
import json, requests 
from pprint import pprint
from googletrans import Translator
from ibm_watson import SpeechToTextV1
from ibm_cloud_sdk_core.authenticators import IAMAuthenticator
from google.colab import drive
from gtts import gTTS
import IPython.display as ipd
import easyocr
import cv2
from matplotlib import pyplot as plt
import numpy as np
import time 
from word2number import w2n

# Commented out IPython magic to ensure Python compatibility.
from google.colab import drive
from google.colab import files
drive.mount('/content/drive')

# %cd /content/drive/MyDrive/ ##### Insert directory of the folder in which you saved the audio files




"""# Functions"""

# JSON DATA 


def data_serv():
  url_services = 'http://daten.buergernetz.bz.it/services/WaitLists_Activities/json'
  response = requests.get(url_services)  
  dataServices = json.loads(response.text)
  return dataServices

def data_doc():
  url_doc_avail = '	http://daten.buergernetz.bz.it/services/DoctorsOnDuty/json'
  response = requests.get(url_doc_avail)  
  dataDocAvail = json.loads(response.text)
  return dataDocAvail

def data_pharm():
  url_phar_avail = 'http://daten.buergernetz.bz.it/services/pharmacy/v1/json'
  response = requests.get(url_phar_avail)  
  dataPharmAvail = json.loads(response.text)
  return dataPharmAvail

# DATA FOR PROCESSING 

def API():
  APIkey_IBM = input('Write here your APIkey for IBM watson')
  return APIkey_IBM

#def directory():
#  direct = input('Write here the directory of the folder in which your audio files are stored')
#  file_directory = %cd direct
#  return file_directory 

################# CHECK AVAILABILITY 


def check_availability(service_type = 'health', user_request = "", language = 'it', translate = False, audio_enable = False): 

  '''Checks if the user requested service is available. 
        Inputs:
              service_type: type of service - health, doctor, pharmacy
              user_request: if 'health' is selected, is the service name in italian or german (visita oculistica, spirometria, etc). If 'doctor' or 'pharmacy' are selected, is the location to search for.
              language: language in which the user prefers to give/get the information
              translate: defines if translation is required
              audio_enable: defines if input and output are in audio format 
              
        Outputs:
              available: returns information if service is available.'''


  translator = Translator()

  # Empty variables

  service_availability = False
  activity_description = ''
  place_description_1 = ''
  place_description_2 = ''

  # Messages 
  
  yes_message = 'Servizio disponibile'
  no_message =  'Servizio non disponibile'
  question_input = 'Che prestazione medica cerca?'


  # Update variables based on service type

  if service_type == 'health':
    activity_description = 'activityDescriptionIt'
    if language == 'de':
      activity_description = 'activityDescriptionDe'
  if service_type == 'doctor':
    place_description_1 = 'muniDescIt'
    place_description_2 = 'muniDescDe'
    yes_message = "Nel luogo selezionato c'è il dottor" 
    no_message =  'Nessun dottore disponibile nella città selezionata'
  if service_type == 'pharmacy':
    place_description_1 = 'GEME_DESC_I'
    place_description_2 = 'GEME_DESC_D'
    yes_message = 'Nel luogo selezionato è aperta questa farmacia: '
    no_message =  'Nessuna farmacia aperta nella città selezionata'

  # Translate if enable

  if translate:
    yes_message = translator.translate(yes_message, dest=language).text
    no_message = translator.translate(no_message, dest=language).text
    question_input = translator.translate(question_input, dest=language).text

  # Clean user request remove spaces and make lower case

  user_request = user_request.replace(' ', '')  

  # If not request provided then ask for one

  if user_request== "":
    user_request = input(question_input)
    user_request_translated = (translator.translate(user_request, dest='it'))
    user_request = (user_request_translated.text).lower().replace(' ', '')
  
  # health services data
  data = None
  if service_type == 'health':
   data = data_serv()

   for el in data:
    service_l = (el[activity_description]).lower().replace(' ', '')
    if service_l != user_request:
      pass 
    elif service_l == user_request:
      service_availability = True

  # doctor data

  if service_type == 'doctor':
    data = data_doc()

    for el in data:
      place_it = (el[place_description_1]).lower()
      place_de = (el[place_description_2]).lower()
      if place_de != user_request and place_it != user_request:
        pass 
      elif place_de == user_request or place_it == user_request:
        service_availability = True
        phone = translator.translate("numero di telefono", dest=language).text
        yes_message = yes_message, el['docName'], phone, el['docTel']
        yes_message = ' '.join(yes_message)
      
  # pharmacy data
    
  if service_type == 'pharmacy':
    data = data_pharm()

    for el in data:
      place_it = (el[place_description_1]).lower()
      place_de = (el[place_description_2]).lower()
      if place_de != user_request and place_it != user_request:
        pass 
      elif place_de == user_request or place_it == user_request:
        service_availability = True
        address = translator.translate("at the address", dest=language).text
        yes_message = yes_message, el['PHAR_DESC_I'], address, el['PHAR_ADRESS_I'], "(",el['PHAR_DESC_D'], ",", el['PHAR_ADRESS_D'],")"
        yes_message = (' '.join(yes_message))
  
  # if avaliable display/reproduce the results

  if service_availability:
    if audio_enable:
      tts1=gTTS(text=yes_message,  lang = language)
      tts1.save('yes_message.mp3')
      ipd.display(ipd.Audio('yes_message.mp3'))
    else:
      print(yes_message)
  else:
    if audio_enable:
      tts1=gTTS(text=no_message,  lang = language)
      tts1.save('no_message.mp3')
      ipd.display(ipd.Audio('no_message.mp3'))
    else:
      print(no_message)

  return service_availability



###########################################


def image_input():

  #x = directory()  INSERT HERE YOUR DRIVE DIRECTORY
  from google.colab import files
  uploaded = files.upload()
  filename = next(iter(uploaded))
  #!mv 'filename' x  
  img_path = filename
  reader = easyocr.Reader(['it'], gpu = False)
  result = reader.readtext(uploaded[img_path])
  lista = [el[-2] for el in result]
  #print(lista)
  text = (' '.join(lista)).lower()
  return text


def audio_input(audio, Model):

    '''Recognize speech through IMB watson. 
        Inputs:
              audio: name of audio file that should be stored in the given directory
              Model: speech recognition Model according to the language of the audio file (from https://cloud.ibm.com/docs/speech-to-text?topic=speech-to-text-models)
              
        Outputs:
              recognized text: returns the recognized text in string or int format according to the audio'''
    
    APIkey = API()
    url = 'https://api.eu-gb.speech-to-text.watson.cloud.ibm.com/instances/43db89f2-881d-470b-b72c-c6405a20df8c' ########### INSERT URL HERE
    authenticator = IAMAuthenticator(APIkey)
    stt = SpeechToTextV1(authenticator = authenticator)
    stt.set_service_url(url)
    with open(audio, 'rb') as f:
      res = stt.recognize(audio = f, content_type = 'audio/wav', model = Model, continuous = True).get_result()
    recognized_text = res['results'][0]['alternatives'][0]['transcript']
    recognized_text = recognized_text.strip(' ')
    numbers = ['one', 'two', 'three', 'four', 'five', 'six', 'seven']
    if recognized_text in numbers:
      chosen_num = w2n.word_to_num(recognized_text)
      return chosen_num
    else:
      return recognized_text
  
def audio_display(element, language):

  '''Displays the given audio

        Inputs:
              element: text or name of the variable containing text
              language: text language
              
        Outputs:
              audio play: if autoplay = True it displays the audio automatically'''

  tts_element=gTTS(text= element, lang= language)
  tts_element.save('audio_display.mp3')
  ipd.display(ipd.Audio('audio_display.mp3', autoplay = False )) 


def first_input():
  user_input1 = 'Confermare il metodo di input: 1 per testo, 2 per  audio' 
  user_input2 = 'Bestätigen Sie die inputmethode: 1 für Text, 2 für Audio'
  user_input3 = 'Ju lutemi konfirmoni metodën e hyrjes: 1 për Tekst, 2 për Audio' 
  user_input4 = 'براہ کرم ان پٹ طریقہ کی تصدیق کریں: 1 متن کے لئے ، 2 آڈیو کے لئے' 
  user_input5 = 'يرجى تأكيد طريقة الإدخال: 1 للنص ، و 2 للصوت' 
  user_input6 = 'Vă rugăm să confirmați metoda de introducere: 1 pentru text, 2 pentru audio'  
  user_input7 = 'Please confirm the input method: 1 for Text, 2 for Audio' 


  print(user_input1, user_input2, user_input3, user_input4, user_input5, user_input6, user_input7, sep='\n')
  audio_display(user_input1, 'it')
  #time.sleep(8)
  audio_display(user_input2, 'de')
  #time.sleep(10)
  audio_display(user_input3, 'sq')
  #time.sleep(9)
  audio_display(user_input4, 'ur')
  #time.sleep(8)
  audio_display(user_input5, 'ar')
  #time.sleep(10)
  audio_display(user_input6, 'ro')
  #time.sleep(10)
  audio_display(user_input7, 'en')
  

def language_choice(user_input):
  lang_pref1 = 'Seleziona 1 per italiano'
  lang_pref2 = 'Wählen Sie 2 für Deutsch'
  lang_pref3 = 'zgjidh 3 për shqipen'
  lang_pref4 = 'حدد 4 للأوردو'
  lang_pref5 = 'اختر 5 للغة العربية'
  lang_pref6 = 'selectați 6 pentru română'
  lang_pref7 = 'select 7 fot other'
  if user_input == 1:
    print(lang_pref1, lang_pref2, lang_pref3, lang_pref4, lang_pref5, lang_pref6, lang_pref7, sep = '\n') 
  elif user_input == 2:
    audio_display(lang_pref1, 'it')
    time.sleep(3)
    audio_display(lang_pref2, 'de')
    time.sleep(3)
    audio_display(lang_pref3, 'sq')
    time.sleep(3)
    audio_display(lang_pref4, 'ur')
    time.sleep(3)
    audio_display(lang_pref5, 'ar')
    time.sleep(3)
    audio_display(lang_pref6, 'ro')
    time.sleep(3)
    audio_display(lang_pref7, 'en')

"""# Gesundheit për tutti (chatbot)"""

def gesundheit():
  # AUDIO FILES VARIABLES - used to match input choice, language choice and service choice

  audio1 = "Files/1_en.wav" #OK ITA
  audio2 = "Files/2_en.wav"  #OK  DE
  audio3 = "Files/3_en.wav"  #AUDIO NON SUPPORTATO  ALB  ##MA SERVI COME OPZIONE 3
  audio4 = "Files/4_en.wav"   #AUDIO NON SUPPORTATO  URDU
  audio5 = "Files/5_en.wav"  #OK  ARABOI
  audio6 = "Files/6_en.wav"  #AUDIO NON SUPPORTATO  RUM
  audio7 = "Files/7_en.wav"  #OTHER LANGUAGE

  # MODEL VARIABLES - speech recognition models to use in the function audio_input(audio, Model)

  Model_en = 'en-US_NarrowbandModel'
  Model_it = 'it-IT_NarrowbandModel'
  Model_de = 'de-DE_NarrowbandModel'

  # QUESTIONS TO THE USER VARIABLES 

  service_choice1 = 'Di che servizio ha bisogno? 1: Prestazioni sanitarie, 2: Medici di turno o 3: Farmacie di turno '
  service_choice2 = 'Che prestazione medica cerca? '
  location = 'Dove sei? '
  no_answ = 'Risposta non valida, riprovare.'
  input_quest = ("Vuoi caricare un'immagine? SI / NO ").lower()

  # TRANSLATION FUNCTION VARIABLE

  translator = Translator()

  # User is asket to choose in input type

  first_input() 

  user_input_choice = int(input(' '))                         #UNCOMMENT TO  CHOOSE TEXT INPUT
  #user_input_choice = (audio_input(audio2, Model_en))          #UNCOMMENT TO  CHOOSE AUDIO INPUT

            
  # If user selects TEXT as an input:

  if user_input_choice == 1:
    language_choice(user_input_choice)     
    user_lang_choice = int(input(' ')) 

    if user_lang_choice == 1:                             # User chooses italian (IT) as preferred language
      print(service_choice1)                              # User is asked about which service he/she needs information
      user_service_choice = int(input(' '))
      if user_service_choice == 1:                        # 1: 'health' is selected
        print(input_quest)
        quest = (input(' ')).lower()                      # user can submit request through an image
        if quest == ('SI').lower():
          img = image_input()
          user = img 
        elif quest == ('NO').lower():
          print(service_choice2)
          user = input(' ')  
        check_availability('health', user)
      elif user_service_choice == 2:                      # 2: 'doctor' is selected
        print(location)
        user = (input(' ')).lower()
        check_availability('doctor', user)
      elif user_service_choice == 3:                      # 3: 'pharmacy' is selected
        data_pharm
        print(location)
        user = (input(' ')).lower()
        check_availability('pharmacy', user)
      else:
        print('Risposta non valida, riprovare.')          # other: invalid answer if input is not 1, 2 or 3
    
    elif user_lang_choice == 2:                           # User chooses german (DE) as preferred language
      transl_service_choice = (translator.translate(service_choice1, dest= 'de')).text
      print(transl_service_choice)
      user_service_choice = int(input(' '))
      if user_service_choice == 1:                                                    
        quest_transl = (translator.translate(input_quest, dest= 'de')).text
        print(quest_transl)
        quest = input(' ')
        if quest == ('JA').lower():
          img = image_input()
          user = img
        elif quest == ('NEIN').lower():
          transl_user = (translator.translate(service_choice2, dest= 'de')).text
          print(transl_user)
          user = input(' ') 
        check_availability('health', user, 'de', True)
      elif user_service_choice == 2:                                                   
        transl_loc = (translator.translate(location, dest= 'de')).text
        print(transl_loc)
        user = (input(' ')).lower()
        check_availability('doctor', user, 'de', True)
      elif user_service_choice == 3:                                                   
        transl_loc = (translator.translate(location, dest= 'de')).text
        print(transl_loc)
        user = (input(' ')).lower()
        check_availability('pharmacy', user, 'de', True)
      else:
        transl_no_answ = (translator.translate(no_answ, dest= 'de')).text
        print(transl_no_answ)

    elif user_lang_choice == 3:                           # User chooses albanian (SQ) as preferred language
      transl_service_choice = (translator.translate(service_choice1, dest= 'sq')).text
      print(transl_service_choice)
      user_service_choice = int(input(' '))
    
      if user_service_choice == 1:                                                     
        quest_transl = (translator.translate(input_quest, dest= 'sq')).text
        print(quest_transl)
        quest = input(' ')
        if quest == ('PO').lower():
          img = image_input()
          user = img  
        elif quest == ('JO').lower():
          transl_user = (translator.translate(service_choice2, dest= 'sq')).text
          print(transl_user)
          user = input(' ') 
        check_availability('health', user, 'sq', True)
      elif user_service_choice == 2:                                                    
        transl_loc = (translator.translate(location, dest= 'sq')).text
        print(transl_loc)
        user = (input(' ')).lower()
        check_availability('doctor', user, 'sq', True)
      elif user_service_choice == 3:                                                    
        transl_loc = (translator.translate(location, dest= 'sq')).text
        print(transl_loc)
        user = (input(' ')).lower()
        check_availability('pharmacy', user, 'sq', True)
      else:
        transl_no_answ = (translator.translate(no_answ, dest= 'sq')).text
        print(transl_no_answ)

    elif user_lang_choice == 4:                           # User chooses urdu (UR) as preferred language
      transl_service_choice = (translator.translate(service_choice1, dest= 'ur')).text
      print(transl_service_choice)
      user_service_choice = int(input(' '))
    
      if user_service_choice == 1:                                                        
        quest_transl = (translator.translate(input_quest, dest= 'ur')).text
        print(quest_transl)
        quest = input(' ')
        if quest == ('جی ہاں').lower():
          img = image_input()
          user = img
        elif quest == ('نہیں').lower():
          transl_user = (translator.translate(service_choice2, dest= 'ur')).text
          print(transl_user)
          user = input(' ') 
        check_availability('health', user, 'ur', True)
      elif user_service_choice == 2:                                                        
        transl_loc = (translator.translate(location, dest= 'ur')).text
        print(transl_loc)
        user = (input(' ')).lower()
        check_availability('doctor', user, 'ur', True)
      elif user_service_choice == 3:                                                        
        transl_loc = (translator.translate(location, dest= 'ur')).text
        print(transl_loc)
        user = (input(' ')).lower()
        check_availability('pharmacy', user, 'ur', True)
      else:
        transl_no_answ = (translator.translate(no_answ, dest= 'ur')).text
        print(transl_no_answ)

    elif user_lang_choice == 5:                           # User chooses arabic (AR) as preferred language
      transl_service_choice = (translator.translate(service_choice1, dest= 'ar')).text
      print(transl_service_choice)
      user_service_choice = int(input(' '))
    
      if user_service_choice == 1:                                                            
        quest_transl = (translator.translate(input_quest, dest= 'ar')).text
        print(quest_transl)
        quest = input(' ')
        if quest == ('نعم').lower():
          img = image_input()
          user = img
        elif quest == ('لا').lower():
          transl_user = (translator.translate(service_choice2, dest= 'ar')).text
          print(transl_user)
          user = input(' ') 
        check_availability('health', user, 'ar', True)
      elif user_service_choice == 2:                                                        
        transl_loc = (translator.translate(location, dest= 'ar')).text
        print(transl_loc)
        user = (input(' ')).lower()
        check_availability('doctor', user, 'ar', True)
      elif user_service_choice == 3:                                                        
        transl_loc = (translator.translate(location, dest= 'ar')).text
        print(transl_loc)
        user = (input(' ')).lower()
        check_availability('pharmacy', user, 'ar', True)
      else:
        transl_no_answ = (translator.translate(no_answ, dest= 'ar')).text
        print(transl_no_answ)


    elif user_lang_choice == 6:                           # User chooses romanian (RO) as preferred language
      transl_service_choice = (translator.translate(service_choice1, dest= 'ro')).text
      print(transl_service_choice)
      user_service_choice = int(input(' '))
      if user_service_choice == 1:                                                        
        quest_transl = (translator.translate(input_quest, dest= 'ro')).text
        print(quest_transl)
        quest = input('  ')
        if quest == ('da').lower():
          img = image_input()
          user = img
        elif quest == ('NU').lower():
          transl_user = (translator.translate(service_choice2, dest= 'ar')).text
          print(transl_user)
          user = input(' ') 
        check_availability('health', user, 'ro', True)
      elif user_service_choice == 2:                                                        
        transl_loc = (translator.translate(location, dest= 'ro')).text
        print(transl_loc)
        user = (input(' ')).lower()
        check_availability('doctor', user, 'ro', True)
      elif user_service_choice == 3:                                                         
        transl_loc = (translator.translate(location, dest= 'ro')).text
        print(transl_loc)
        user = (input(' ')).lower()
        check_availability('pharmacy', user, 'ro', True)
      else:
        transl_no_answ = (translator.translate(no_answ, dest= 'ro')).text
        print(transl_no_answ)

    else:                                                 # User chooses 'other language' and is asked to insert the preferred language code accoridng to the list provided in the link 
      print('List of language code: https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes')
      user_lang_choice = input('Please select your language by its code: ')
      transl_service_choice = (translator.translate(service_choice1, dest= user_lang_choice)).text
      print(transl_service_choice)
      user_service_choice = int(input(' '))
      if user_service_choice == 1:
        quest_transl = (translator.translate(input_quest, dest= user_lang_choice)).text
        positive_ans = ((translator.translate('yes', dest= user_lang_choice)).text).lower()
        negative_ans = ((translator.translate('no', dest= user_lang_choice)).text).lower()
        print(quest_transl)
        quest = input(' ')
        if quest == (positive_ans).lower():
          img = image_input()
          user = img
        elif quest == (negative_ans).lower():
          transl_user = (translator.translate(service_choice2, dest= user_lang_choice)).text
          print(transl_user)
          user = input(' ') 
        check_availability('health', user, user_lang_choice, True) 

      elif user_service_choice == 2:
        transl_loc = (translator.translate(location, dest= user_lang_choice)).text
        print(transl_loc)
        user = (input(' ')).lower()
        check_availability('doctor', user, user_lang_choice, True) 
      elif user_service_choice == 3:
        transl_loc = (translator.translate(location, dest= user_lang_choice)).text
        print(transl_loc)
        user = (input(' ')).lower()
        check_availability('pharmacy', user, user_lang_choice, True) 
      else:
        transl_no_answ = (translator.translate(no_answ, dest= user_lang_choice)).text
        print(transl_no_answ)
        

  # If user selects AUDIO as an input:


  elif user_input_choice == 2:
    language_choice(user_input_choice) 

    chosen_num = audio_input(audio7, Model_en)   # already selected for demo
    
    if chosen_num == 1:                          # User chooses italian (IT) as preferred language
      audio_display(service_choice1, 'it')       # User is asked about which service he/she needs information
      time.sleep(11)

      x = audio2                                 #already selected for demo

      chosen_num = audio_input(x, Model_en)      # audio is recognized through audio_input(audio, Model) function
      
      if chosen_num == 1:                        # 1: 'health' is selected
        audio_display(service_choice2, 'it')     # user is asked to give the name of the desired health service via audio
        serv = 'ocu.wav'                         # audio file containing health service name in italian ('visita oculistica)
        user = audio_input(serv, Model_it)       # text is recognized according to italian Model
        check_availability('health', user, 'it', False, True)  #displays the result via audio
      elif chosen_num == 2:                      # 2: 'doctor' is selected
        audio_display(location, 'it')            # user is asked to give the location via audio
        time.sleep(2)                                                
        loc = 'mon_it.wav'
        user = audio_input(loc, Model_it)
        check_availability('doctor', user, 'it', False, True)
      elif chosen_num == 3:                     # 2: 'pharmacy' is selected
        audio_display(location, 'it')           # user is asked to give the location via audio
        time.sleep(2)                                                    
        loc = 'mon_it.wav'
        user = audio_input(loc, Model_it)
        check_availability('pharmacy', user, 'it', False, True)
      else:                                     # other: invalid answer if input is not 1, 2 or 3
        audio_display(no_answ, 'it') 

    elif chosen_num == 2:                       # User chooses german (DE) as preferred language
      service_choice_de = (translator.translate(service_choice1, dest= 'de')).text
      audio_display(service_choice_de, 'de')
      #time.sleep(10)
      
      x = audio2
      
      chosen_num = audio_input(x, Model_en)
      
      if chosen_num == 1:                      # 1: 'health' is selected
        serv_choice_ling = (translator.translate(service_choice2, dest= 'de')).text                              
        print(serv_choice_ling)
        audio_display(serv_choice_ling, 'de')
        serv = 'spi_de.wav'
        user = audio_input(serv, Model_de)
        check_availability('health', user, 'de', True, True) 
      elif chosen_num == 2:                   # 2: 'doctor' is selected
        loc_choice_ling = (translator.translate(location, dest= 'de')).text
        audio_display(loc_choice_ling, 'de')                                                   
        loc = 'mon_it.wav'
        user = audio_input(loc, Model_it)
        print(user)
        check_availability('doctor', user, 'de', True, True)
      elif chosen_num == 3:                   # 3: 'pharmacy' is selected
        loc_choice_ling = (translator.translate(location, dest= 'de')).text
        audio_display(loc_choice_ling, 'de')                                                   
        loc = 'mon_de.wav'
        user = audio_input(loc, Model_it)
        check_availability('pharmacy', user, 'de', True, True)
      else:
        transl_no_answ = (translator.translate(no_answ, dest= 'de')).text
        audio_display(transl_no_answ, 'de')

    elif chosen_num == 3:                       # User chooses albanian (SQ) as preferred language
      service_choice_sq = (translator.translate(service_choice1, dest= 'sq')).text
      audio_display(service_choice_sq, 'sq')
      #time.sleep(10)
      
      x = audio4
      
      chosen_num = audio_input(x, Model_en)
      
      if chosen_num == 1:                      # 1: 'health' is selected
        serv_choice_ling = (translator.translate(service_choice2, dest= 'sq')).text                              
        print(serv_choice_ling)
        audio_display(serv_choice_ling, 'sq')
        serv = 'spi_de.wav'
        user = audio_input(serv, Model_de)
        check_availability('health', user, 'sq', True, True) 
      elif chosen_num == 2:                   # 2: 'doctor' is selected
        loc_choice_ling = (translator.translate(location, dest= 'sq')).text
        audio_display(loc_choice_ling, 'sq')                                                   
        loc = 'bress_it.wav'
        user = audio_input(loc, Model_it)
        print(user)
        check_availability('doctor', user, 'sq', True, True)
      elif chosen_num == 3:                   # 3: 'pharmacy' is selected
        loc_choice_ling = (translator.translate(location, dest= 'sq')).text
        audio_display(loc_choice_ling, 'sq')                                                   
        loc = 'mon_de.wav'
        user = audio_input(loc, Model_it)
        check_availability('pharmacy', user, 'sq', True, True)
      else:
        transl_no_answ = (translator.translate(no_answ, dest= 'sq')).text
        audio_display(transl_no_answ, 'sq') 

    elif chosen_num == 4:                       # User chooses urdu (UR) as preferred language
      service_choice_sq = (translator.translate(service_choice1, dest= 'ur')).text
      audio_display(service_choice_sq, 'ur')
      #time.sleep(10)
      
      x = audio4
      
      chosen_num = audio_input(x, Model_en)
      
      if chosen_num == 1:                      # 1: 'health' is selected
        serv_choice_ling = (translator.translate(service_choice2, dest= 'ur')).text                              
        print(serv_choice_ling)
        audio_display(serv_choice_ling, 'ur')
        serv = 'ocu.wav'
        user = audio_input(serv, Model_it)
        check_availability('health', user, 'ur', True, True) 
      elif chosen_num == 2:                   # 2: 'doctor' is selected
        loc_choice_ling = (translator.translate(location, dest= 'ur')).text
        audio_display(loc_choice_ling, 'ur')                                                   
        loc = 'bress_it.wav'
        user = audio_input(loc, Model_it)
        print(user)
        check_availability('doctor', user, 'ur', True, True)
      elif chosen_num == 3:                   # 3: 'pharmacy' is selected
        loc_choice_ling = (translator.translate(location, dest= 'ur')).text
        audio_display(loc_choice_ling, 'ur')                                                   
        loc = 'mon_de.wav'
        user = audio_input(loc, Model_it)
        check_availability('pharmacy', user, 'ur', True, True)
      else:
        transl_no_answ = (translator.translate(no_answ, dest= 'ur')).text
        audio_display(transl_no_answ, 'ur') 

    elif chosen_num == 5:                       # User chooses arabic (AR) as preferred language
      service_choice_sq = (translator.translate(service_choice1, dest= 'ar')).text
      audio_display(service_choice_sq, 'ar')
      #time.sleep(10)
      
      x = audio4
      
      chosen_num = audio_input(x, Model_en)
      
      if chosen_num == 1:                      # 1: 'health' is selected
        serv_choice_ling = (translator.translate(service_choice2, dest= 'ar')).text                              
        print(serv_choice_ling)
        audio_display(serv_choice_ling, 'ar')
        serv = 'ocu.wav'
        user = audio_input(serv, Model_it)
        check_availability('health', user, 'ar', True, True) 
      elif chosen_num == 2:                   # 2: 'doctor' is selected
        loc_choice_ling = (translator.translate(location, dest= 'ar')).text
        audio_display(loc_choice_ling, 'ar')                                                   
        loc = 'mon_it.wav'
        user = audio_input(loc, Model_it)
        print(user)
        check_availability('doctor', user, 'ar', True, True)
      elif chosen_num == 3:                   # 3: 'pharmacy' is selected
        loc_choice_ling = (translator.translate(location, dest= 'ar')).text
        audio_display(loc_choice_ling, 'ar')                                                   
        loc = 'mon_it.wav'
        user = audio_input(loc, Model_it)
        check_availability('pharmacy', user, 'ar', True, True)
      else:
        transl_no_answ = (translator.translate(no_answ, dest= 'ar')).text
        audio_display(transl_no_answ, 'ar')  

    elif chosen_num == 6:                             # User chooses romanian (RO) as preferred language
      service_choice_ro = (translator.translate(service_choice1, dest= 'ro')).text
      audio_display(service_choice_ro, 'ro')
      #time.sleep(10)
      
      x = audio1
      
      chosen_num = audio_input(x, Model_en)
      
      if chosen_num == 1:                      # 1: 'health' is selected
        serv_choice_ling = (translator.translate(service_choice2, dest= 'ro')).text                        
        audio_display(serv_choice_ling, 'ro')
        serv = 'ocu.wav'
        user = audio_input(serv, Model_it)
        check_availability('health', user, 'ro', True, True) 
      elif chosen_num == 2:                   # 2: 'doctor' is selected
        loc_choice_ling = (translator.translate(location, dest= 'ro')).text
        audio_display(loc_choice_ling, 'ro')                                                   
        loc = 'mon_it.wav'
        user = audio_input(loc, Model_it)
        print(user)
        check_availability('doctor', user, 'ro', True, True)
      elif chosen_num == 3:                   # 3: 'pharmacy' is selected
        loc_choice_ling = (translator.translate(location, dest= 'ro')).text
        audio_display(loc_choice_ling, 'ro')                                                   
        loc = 'mon_de.wav'
        user = audio_input(loc, Model_de)
        check_availability('pharmacy', user, 'ro', True, True)
      else:
        transl_no_answ = (translator.translate(no_answ, dest= 'ro')).text
        audio_display(transl_no_answ, 'ro')

    elif chosen_num == 7:                                         # user chooses 'other language'
      lingua = input('Language code: ')                           # Limit: user has to insert language code in text, because is not recognized in audio format
      service_choice_ling = (translator.translate(service_choice1, dest= lingua)).text
      audio_display(service_choice_ling, lingua) 
      #time.sleep(7)
      
      x = audio2
      
      chosen_num = audio_input(x, Model_en)
      
      if chosen_num == 1: 
        serv_choice_ling = translator.translate(service_choice2, dest= lingua).text
        audio_display(serv_choice_ling, lingua)
        serv = 'ocu.wav'
        user = audio_input(serv, Model_it)
        check_availability('health', user, lingua, True, True) 
      elif chosen_num == 2:
        loc_choice_ling = (translator.translate(location, dest= lingua)).text
        audio_display(loc_choice_ling, lingua) 
        loc = 'bress_it.wav'
        user = audio_input(loc, Model_it)
        print(user)
        check_availability('doctor', user, lingua, True, True)
      elif chosen_num == 3:
        loc_choice_ling = (translator.translate(location, dest= lingua)).text
        audio_display(loc_choice_ling, lingua)
        loc = 'mon_it.wav'
        user = audio_input(loc, Model_it)
        check_availability('pharmacy', user, lingua, True, True)
      else:
        transl_no_answ = (translator.translate(no_answ, dest= lingua)).text
        audio_display(transl_no_answ, lingua)

def main():
  gesundheit()

if __name__ == "__main__":
  main()

