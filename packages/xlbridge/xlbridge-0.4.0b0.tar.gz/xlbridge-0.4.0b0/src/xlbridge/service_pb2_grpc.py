# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import service_pb2 as service__pb2


class BridgeServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Call = channel.unary_unary(
                '/BridgeService/Call',
                request_serializer=service__pb2.MethodCall.SerializeToString,
                response_deserializer=service__pb2.Variant.FromString,
                )
        self.Subscribe = channel.unary_stream(
                '/BridgeService/Subscribe',
                request_serializer=service__pb2.MethodCall.SerializeToString,
                response_deserializer=service__pb2.Variant.FromString,
                )
        self.GetFunctionList = channel.unary_unary(
                '/BridgeService/GetFunctionList',
                request_serializer=service__pb2.FunctionListRequest.SerializeToString,
                response_deserializer=service__pb2.FunctionList.FromString,
                )
        self.SubscribeToStatus = channel.unary_stream(
                '/BridgeService/SubscribeToStatus',
                request_serializer=service__pb2.StatusRequest.SerializeToString,
                response_deserializer=service__pb2.StatusResponse.FromString,
                )
        self.DisposeReference = channel.unary_unary(
                '/BridgeService/DisposeReference',
                request_serializer=service__pb2.DisposeReferenceRequest.SerializeToString,
                response_deserializer=service__pb2.DisposeReferenceResult.FromString,
                )


class BridgeServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Call(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Subscribe(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetFunctionList(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubscribeToStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DisposeReference(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_BridgeServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Call': grpc.unary_unary_rpc_method_handler(
                    servicer.Call,
                    request_deserializer=service__pb2.MethodCall.FromString,
                    response_serializer=service__pb2.Variant.SerializeToString,
            ),
            'Subscribe': grpc.unary_stream_rpc_method_handler(
                    servicer.Subscribe,
                    request_deserializer=service__pb2.MethodCall.FromString,
                    response_serializer=service__pb2.Variant.SerializeToString,
            ),
            'GetFunctionList': grpc.unary_unary_rpc_method_handler(
                    servicer.GetFunctionList,
                    request_deserializer=service__pb2.FunctionListRequest.FromString,
                    response_serializer=service__pb2.FunctionList.SerializeToString,
            ),
            'SubscribeToStatus': grpc.unary_stream_rpc_method_handler(
                    servicer.SubscribeToStatus,
                    request_deserializer=service__pb2.StatusRequest.FromString,
                    response_serializer=service__pb2.StatusResponse.SerializeToString,
            ),
            'DisposeReference': grpc.unary_unary_rpc_method_handler(
                    servicer.DisposeReference,
                    request_deserializer=service__pb2.DisposeReferenceRequest.FromString,
                    response_serializer=service__pb2.DisposeReferenceResult.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'BridgeService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class BridgeService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Call(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/BridgeService/Call',
            service__pb2.MethodCall.SerializeToString,
            service__pb2.Variant.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Subscribe(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/BridgeService/Subscribe',
            service__pb2.MethodCall.SerializeToString,
            service__pb2.Variant.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetFunctionList(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/BridgeService/GetFunctionList',
            service__pb2.FunctionListRequest.SerializeToString,
            service__pb2.FunctionList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SubscribeToStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/BridgeService/SubscribeToStatus',
            service__pb2.StatusRequest.SerializeToString,
            service__pb2.StatusResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DisposeReference(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/BridgeService/DisposeReference',
            service__pb2.DisposeReferenceRequest.SerializeToString,
            service__pb2.DisposeReferenceResult.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
