# coding: utf-8

"""
    Agilicus API

    Agilicus is API-first. Modern software is controlled by other software, is open, is available for you to use the way you want, securely, simply.  A rendered, online viewable and usable version of this specification is available at [api](https://www.agilicus.com/api). You may try the API inline directly in the web page. To do so, first obtain an Authentication Token (the simplest way is to install the Python SDK, and then run `agilicus-cli --issuer https://MYISSUER get-token`). You will need an org-id for most calls (and can obtain from `agilicus-cli --issuer https://MYISSUER list-orgs`). The `MYISSUER` will typically be `auth.MYDOMAIN`, and you will see it as you sign-in to the administrative UI.  This API releases on Bearer-Token authentication. To obtain a valid bearer token you will need to Authenticate to an Issuer with OpenID Connect (a superset of OAUTH2).  Your \"issuer\" will look like https://auth.MYDOMAIN. For example, when you signed-up, if you said \"use my own domain name\" and assigned a CNAME of cloud.example.com, then your issuer would be https://auth.cloud.example.com.  If you selected \"use an Agilicus supplied domain name\", your issuer would look like https://auth.myorg.agilicus.cloud.  For test purposes you can use our [Python SDK](https://pypi.org/project/agilicus/) and run `agilicus-cli --issuer https://auth.MYDOMAIN get-token`.  This API may be used in any language runtime that supports OpenAPI 3.0, or, you may use our [Python SDK](https://pypi.org/project/agilicus/), our [Typescript SDK](https://www.npmjs.com/package/@agilicus/angular), or our [Golang SDK](https://git.agilicus.com/pub/sdk-go).  100% of the activities in our system our API-driven, from our web-admin, through our progressive web applications, to all internals: there is nothing that is not accessible.  For more information, see [developer resources](https://www.agilicus.com/developer).   # noqa: E501

    The version of the OpenAPI document: 2021.05.26
    Contact: dev@agilicus.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from agilicus_api.configuration import Configuration


class AgentConnectorStatus(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'application_services': 'list[ApplicationService]',
        'service_account_id': 'str',
        'info': 'AgentConnectorInfo',
        'stats': 'AgentConnectorStats',
        'local_authentication': 'AgentLocalAuthInfo'
    }

    attribute_map = {
        'application_services': 'application_services',
        'service_account_id': 'service_account_id',
        'info': 'info',
        'stats': 'stats',
        'local_authentication': 'local_authentication'
    }

    def __init__(self, application_services=None, service_account_id=None, info=None, stats=None, local_authentication=None, local_vars_configuration=None):  # noqa: E501
        """AgentConnectorStatus - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._application_services = None
        self._service_account_id = None
        self._info = None
        self._stats = None
        self._local_authentication = None
        self.discriminator = None

        if application_services is not None:
            self.application_services = application_services
        if service_account_id is not None:
            self.service_account_id = service_account_id
        if info is not None:
            self.info = info
        if stats is not None:
            self.stats = stats
        if local_authentication is not None:
            self.local_authentication = local_authentication

    @property
    def application_services(self):
        """Gets the application_services of this AgentConnectorStatus.  # noqa: E501

        The list of application services associated with this agent  # noqa: E501

        :return: The application_services of this AgentConnectorStatus.  # noqa: E501
        :rtype: list[ApplicationService]
        """
        return self._application_services

    @application_services.setter
    def application_services(self, application_services):
        """Sets the application_services of this AgentConnectorStatus.

        The list of application services associated with this agent  # noqa: E501

        :param application_services: The application_services of this AgentConnectorStatus.  # noqa: E501
        :type: list[ApplicationService]
        """

        self._application_services = application_services

    @property
    def service_account_id(self):
        """Gets the service_account_id of this AgentConnectorStatus.  # noqa: E501

        Service account user GUID used to deploy the connector  # noqa: E501

        :return: The service_account_id of this AgentConnectorStatus.  # noqa: E501
        :rtype: str
        """
        return self._service_account_id

    @service_account_id.setter
    def service_account_id(self, service_account_id):
        """Sets the service_account_id of this AgentConnectorStatus.

        Service account user GUID used to deploy the connector  # noqa: E501

        :param service_account_id: The service_account_id of this AgentConnectorStatus.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                service_account_id is not None and len(service_account_id) > 40):
            raise ValueError("Invalid value for `service_account_id`, length must be less than or equal to `40`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                service_account_id is not None and len(service_account_id) < 1):
            raise ValueError("Invalid value for `service_account_id`, length must be greater than or equal to `1`")  # noqa: E501

        self._service_account_id = service_account_id

    @property
    def info(self):
        """Gets the info of this AgentConnectorStatus.  # noqa: E501


        :return: The info of this AgentConnectorStatus.  # noqa: E501
        :rtype: AgentConnectorInfo
        """
        return self._info

    @info.setter
    def info(self, info):
        """Sets the info of this AgentConnectorStatus.


        :param info: The info of this AgentConnectorStatus.  # noqa: E501
        :type: AgentConnectorInfo
        """

        self._info = info

    @property
    def stats(self):
        """Gets the stats of this AgentConnectorStatus.  # noqa: E501


        :return: The stats of this AgentConnectorStatus.  # noqa: E501
        :rtype: AgentConnectorStats
        """
        return self._stats

    @stats.setter
    def stats(self, stats):
        """Sets the stats of this AgentConnectorStatus.


        :param stats: The stats of this AgentConnectorStatus.  # noqa: E501
        :type: AgentConnectorStats
        """

        self._stats = stats

    @property
    def local_authentication(self):
        """Gets the local_authentication of this AgentConnectorStatus.  # noqa: E501


        :return: The local_authentication of this AgentConnectorStatus.  # noqa: E501
        :rtype: AgentLocalAuthInfo
        """
        return self._local_authentication

    @local_authentication.setter
    def local_authentication(self, local_authentication):
        """Sets the local_authentication of this AgentConnectorStatus.


        :param local_authentication: The local_authentication of this AgentConnectorStatus.  # noqa: E501
        :type: AgentLocalAuthInfo
        """

        self._local_authentication = local_authentication

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AgentConnectorStatus):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AgentConnectorStatus):
            return True

        return self.to_dict() != other.to_dict()
