# coding: utf-8

"""
    Agilicus API

    Agilicus is API-first. Modern software is controlled by other software, is open, is available for you to use the way you want, securely, simply.  A rendered, online viewable and usable version of this specification is available at [api](https://www.agilicus.com/api). You may try the API inline directly in the web page. To do so, first obtain an Authentication Token (the simplest way is to install the Python SDK, and then run `agilicus-cli --issuer https://MYISSUER get-token`). You will need an org-id for most calls (and can obtain from `agilicus-cli --issuer https://MYISSUER list-orgs`). The `MYISSUER` will typically be `auth.MYDOMAIN`, and you will see it as you sign-in to the administrative UI.  This API releases on Bearer-Token authentication. To obtain a valid bearer token you will need to Authenticate to an Issuer with OpenID Connect (a superset of OAUTH2).  Your \"issuer\" will look like https://auth.MYDOMAIN. For example, when you signed-up, if you said \"use my own domain name\" and assigned a CNAME of cloud.example.com, then your issuer would be https://auth.cloud.example.com.  If you selected \"use an Agilicus supplied domain name\", your issuer would look like https://auth.myorg.agilicus.cloud.  For test purposes you can use our [Python SDK](https://pypi.org/project/agilicus/) and run `agilicus-cli --issuer https://auth.MYDOMAIN get-token`.  This API may be used in any language runtime that supports OpenAPI 3.0, or, you may use our [Python SDK](https://pypi.org/project/agilicus/), our [Typescript SDK](https://www.npmjs.com/package/@agilicus/angular), or our [Golang SDK](https://git.agilicus.com/pub/sdk-go).  100% of the activities in our system our API-driven, from our web-admin, through our progressive web applications, to all internals: there is nothing that is not accessible.  For more information, see [developer resources](https://www.agilicus.com/developer).   # noqa: E501

    The version of the OpenAPI document: 2021.05.26
    Contact: dev@agilicus.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from agilicus_api.configuration import Configuration


class ResourceSpec(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'resource_type': 'str',
        'org_id': 'str',
        'name_slug': 'str',
        'not_assignable_perm': 'bool'
    }

    attribute_map = {
        'name': 'name',
        'resource_type': 'resource_type',
        'org_id': 'org_id',
        'name_slug': 'name_slug',
        'not_assignable_perm': 'not_assignable_perm'
    }

    def __init__(self, name=None, resource_type=None, org_id=None, name_slug=None, not_assignable_perm=None, local_vars_configuration=None):  # noqa: E501
        """ResourceSpec - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._resource_type = None
        self._org_id = None
        self._name_slug = None
        self._not_assignable_perm = None
        self.discriminator = None

        self.name = name
        self.resource_type = resource_type
        self.org_id = org_id
        if name_slug is not None:
            self.name_slug = name_slug
        if not_assignable_perm is not None:
            self.not_assignable_perm = not_assignable_perm

    @property
    def name(self):
        """Gets the name of this ResourceSpec.  # noqa: E501

        The human readable name of the resource. Names are unique for a given resource type within an organisation.   # noqa: E501

        :return: The name of this ResourceSpec.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ResourceSpec.

        The human readable name of the resource. Names are unique for a given resource type within an organisation.   # noqa: E501

        :param name: The name of this ResourceSpec.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                name is not None and len(name) > 100):
            raise ValueError("Invalid value for `name`, length must be less than or equal to `100`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                name is not None and len(name) < 1):
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                name is not None and not re.search(r'^[a-zA-Z0-9-_.:]+$', name)):  # noqa: E501
            raise ValueError(r"Invalid value for `name`, must be a follow pattern or equal to `/^[a-zA-Z0-9-_.:]+$/`")  # noqa: E501

        self._name = name

    @property
    def resource_type(self):
        """Gets the resource_type of this ResourceSpec.  # noqa: E501

        The type of the resource. Resources of different types service different purposes, and have different behaviour. - An `application` provides high level functionality such as a website. Its fine-grained   permissions are configured on a per-application basis. It corresponds to an `Application`   resource. - A `fileshare` exposes a directory to the internet for file sharing purposes. Its permission model is fixed. It corresponds to a FileShareService resource. - An `application_service` exposes an IP based service to the internet. Its permission model is fixed. It corresponds to an ApplicationService resource.   # noqa: E501

        :return: The resource_type of this ResourceSpec.  # noqa: E501
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this ResourceSpec.

        The type of the resource. Resources of different types service different purposes, and have different behaviour. - An `application` provides high level functionality such as a website. Its fine-grained   permissions are configured on a per-application basis. It corresponds to an `Application`   resource. - A `fileshare` exposes a directory to the internet for file sharing purposes. Its permission model is fixed. It corresponds to a FileShareService resource. - An `application_service` exposes an IP based service to the internet. Its permission model is fixed. It corresponds to an ApplicationService resource.   # noqa: E501

        :param resource_type: The resource_type of this ResourceSpec.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and resource_type is None:  # noqa: E501
            raise ValueError("Invalid value for `resource_type`, must not be `None`")  # noqa: E501
        allowed_values = ["application", "fileshare", "application_service", "service_forwarder"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and resource_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `resource_type` ({0}), must be one of {1}"  # noqa: E501
                .format(resource_type, allowed_values)
            )

        self._resource_type = resource_type

    @property
    def org_id(self):
        """Gets the org_id of this ResourceSpec.  # noqa: E501

        The unique ID of the organisation which owns this Resource.  # noqa: E501

        :return: The org_id of this ResourceSpec.  # noqa: E501
        :rtype: str
        """
        return self._org_id

    @org_id.setter
    def org_id(self, org_id):
        """Sets the org_id of this ResourceSpec.

        The unique ID of the organisation which owns this Resource.  # noqa: E501

        :param org_id: The org_id of this ResourceSpec.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and org_id is None:  # noqa: E501
            raise ValueError("Invalid value for `org_id`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                org_id is not None and len(org_id) > 40):
            raise ValueError("Invalid value for `org_id`, length must be less than or equal to `40`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                org_id is not None and len(org_id) < 1):
            raise ValueError("Invalid value for `org_id`, length must be greater than or equal to `1`")  # noqa: E501

        self._org_id = org_id

    @property
    def name_slug(self):
        """Gets the name_slug of this ResourceSpec.  # noqa: E501

        A human readable slug to identify a resource and that is rfc1035 label compliant. The length has been restricted to 20 characters such that this name can be concatenated with other names or slugs. A slug is readOnly as it is generated by the backend resource.   # noqa: E501

        :return: The name_slug of this ResourceSpec.  # noqa: E501
        :rtype: str
        """
        return self._name_slug

    @name_slug.setter
    def name_slug(self, name_slug):
        """Sets the name_slug of this ResourceSpec.

        A human readable slug to identify a resource and that is rfc1035 label compliant. The length has been restricted to 20 characters such that this name can be concatenated with other names or slugs. A slug is readOnly as it is generated by the backend resource.   # noqa: E501

        :param name_slug: The name_slug of this ResourceSpec.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                name_slug is not None and len(name_slug) > 20):
            raise ValueError("Invalid value for `name_slug`, length must be less than or equal to `20`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                name_slug is not None and not re.search(r'^[a-z]|[a-z0-9][a-z0-9\-]*[a-z0-9]$', name_slug)):  # noqa: E501
            raise ValueError(r"Invalid value for `name_slug`, must be a follow pattern or equal to `/^[a-z]|[a-z0-9][a-z0-9\-]*[a-z0-9]$/`")  # noqa: E501

        self._name_slug = name_slug

    @property
    def not_assignable_perm(self):
        """Gets the not_assignable_perm of this ResourceSpec.  # noqa: E501

        Most resources can be assigned permission. However when a resource cannot be assigned a permission, this field is used (set to true), which notifies consumers of this API that the resource cannot be assigned a permission. This field defaults to false.   # noqa: E501

        :return: The not_assignable_perm of this ResourceSpec.  # noqa: E501
        :rtype: bool
        """
        return self._not_assignable_perm

    @not_assignable_perm.setter
    def not_assignable_perm(self, not_assignable_perm):
        """Sets the not_assignable_perm of this ResourceSpec.

        Most resources can be assigned permission. However when a resource cannot be assigned a permission, this field is used (set to true), which notifies consumers of this API that the resource cannot be assigned a permission. This field defaults to false.   # noqa: E501

        :param not_assignable_perm: The not_assignable_perm of this ResourceSpec.  # noqa: E501
        :type: bool
        """

        self._not_assignable_perm = not_assignable_perm

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResourceSpec):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ResourceSpec):
            return True

        return self.to_dict() != other.to_dict()
