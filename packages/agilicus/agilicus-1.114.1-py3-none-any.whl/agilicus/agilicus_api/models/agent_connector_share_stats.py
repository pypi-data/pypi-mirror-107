# coding: utf-8

"""
    Agilicus API

    Agilicus is API-first. Modern software is controlled by other software, is open, is available for you to use the way you want, securely, simply.  A rendered, online viewable and usable version of this specification is available at [api](https://www.agilicus.com/api). You may try the API inline directly in the web page. To do so, first obtain an Authentication Token (the simplest way is to install the Python SDK, and then run `agilicus-cli --issuer https://MYISSUER get-token`). You will need an org-id for most calls (and can obtain from `agilicus-cli --issuer https://MYISSUER list-orgs`). The `MYISSUER` will typically be `auth.MYDOMAIN`, and you will see it as you sign-in to the administrative UI.  This API releases on Bearer-Token authentication. To obtain a valid bearer token you will need to Authenticate to an Issuer with OpenID Connect (a superset of OAUTH2).  Your \"issuer\" will look like https://auth.MYDOMAIN. For example, when you signed-up, if you said \"use my own domain name\" and assigned a CNAME of cloud.example.com, then your issuer would be https://auth.cloud.example.com.  If you selected \"use an Agilicus supplied domain name\", your issuer would look like https://auth.myorg.agilicus.cloud.  For test purposes you can use our [Python SDK](https://pypi.org/project/agilicus/) and run `agilicus-cli --issuer https://auth.MYDOMAIN get-token`.  This API may be used in any language runtime that supports OpenAPI 3.0, or, you may use our [Python SDK](https://pypi.org/project/agilicus/), our [Typescript SDK](https://www.npmjs.com/package/@agilicus/angular), or our [Golang SDK](https://git.agilicus.com/pub/sdk-go).  100% of the activities in our system our API-driven, from our web-admin, through our progressive web applications, to all internals: there is nothing that is not accessible.  For more information, see [developer resources](https://www.agilicus.com/developer).   # noqa: E501

    The version of the OpenAPI document: 2021.05.26
    Contact: dev@agilicus.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from agilicus_api.configuration import Configuration


class AgentConnectorShareStats(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'exposed_shares_count': 'int',
        'server_running': 'bool',
        'server_start_time': 'datetime',
        'server_stop_time': 'datetime',
        'server_start_count': 'int',
        'server_stop_count': 'int',
        'per_share_info': 'list[AgentConnectorPerShareStats]'
    }

    attribute_map = {
        'exposed_shares_count': 'exposed_shares_count',
        'server_running': 'server_running',
        'server_start_time': 'server_start_time',
        'server_stop_time': 'server_stop_time',
        'server_start_count': 'server_start_count',
        'server_stop_count': 'server_stop_count',
        'per_share_info': 'per_share_info'
    }

    def __init__(self, exposed_shares_count=None, server_running=None, server_start_time=None, server_stop_time=None, server_start_count=None, server_stop_count=None, per_share_info=None, local_vars_configuration=None):  # noqa: E501
        """AgentConnectorShareStats - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._exposed_shares_count = None
        self._server_running = None
        self._server_start_time = None
        self._server_stop_time = None
        self._server_start_count = None
        self._server_stop_count = None
        self._per_share_info = None
        self.discriminator = None

        self.exposed_shares_count = exposed_shares_count
        self.server_running = server_running
        if server_start_time is not None:
            self.server_start_time = server_start_time
        if server_stop_time is not None:
            self.server_stop_time = server_stop_time
        self.server_start_count = server_start_count
        self.server_stop_count = server_stop_count
        self.per_share_info = per_share_info

    @property
    def exposed_shares_count(self):
        """Gets the exposed_shares_count of this AgentConnectorShareStats.  # noqa: E501

        The total number of shares currently exposed.  # noqa: E501

        :return: The exposed_shares_count of this AgentConnectorShareStats.  # noqa: E501
        :rtype: int
        """
        return self._exposed_shares_count

    @exposed_shares_count.setter
    def exposed_shares_count(self, exposed_shares_count):
        """Sets the exposed_shares_count of this AgentConnectorShareStats.

        The total number of shares currently exposed.  # noqa: E501

        :param exposed_shares_count: The exposed_shares_count of this AgentConnectorShareStats.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and exposed_shares_count is None:  # noqa: E501
            raise ValueError("Invalid value for `exposed_shares_count`, must not be `None`")  # noqa: E501

        self._exposed_shares_count = exposed_shares_count

    @property
    def server_running(self):
        """Gets the server_running of this AgentConnectorShareStats.  # noqa: E501

        Whether the server exposing shares is running.  # noqa: E501

        :return: The server_running of this AgentConnectorShareStats.  # noqa: E501
        :rtype: bool
        """
        return self._server_running

    @server_running.setter
    def server_running(self, server_running):
        """Sets the server_running of this AgentConnectorShareStats.

        Whether the server exposing shares is running.  # noqa: E501

        :param server_running: The server_running of this AgentConnectorShareStats.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and server_running is None:  # noqa: E501
            raise ValueError("Invalid value for `server_running`, must not be `None`")  # noqa: E501

        self._server_running = server_running

    @property
    def server_start_time(self):
        """Gets the server_start_time of this AgentConnectorShareStats.  # noqa: E501

        When the server was started. If the server has never started, this value will be ommitted.   # noqa: E501

        :return: The server_start_time of this AgentConnectorShareStats.  # noqa: E501
        :rtype: datetime
        """
        return self._server_start_time

    @server_start_time.setter
    def server_start_time(self, server_start_time):
        """Sets the server_start_time of this AgentConnectorShareStats.

        When the server was started. If the server has never started, this value will be ommitted.   # noqa: E501

        :param server_start_time: The server_start_time of this AgentConnectorShareStats.  # noqa: E501
        :type: datetime
        """

        self._server_start_time = server_start_time

    @property
    def server_stop_time(self):
        """Gets the server_stop_time of this AgentConnectorShareStats.  # noqa: E501

        When the server was stopped. If the server has never stopped, this value will be ommitted.   # noqa: E501

        :return: The server_stop_time of this AgentConnectorShareStats.  # noqa: E501
        :rtype: datetime
        """
        return self._server_stop_time

    @server_stop_time.setter
    def server_stop_time(self, server_stop_time):
        """Sets the server_stop_time of this AgentConnectorShareStats.

        When the server was stopped. If the server has never stopped, this value will be ommitted.   # noqa: E501

        :param server_stop_time: The server_stop_time of this AgentConnectorShareStats.  # noqa: E501
        :type: datetime
        """

        self._server_stop_time = server_stop_time

    @property
    def server_start_count(self):
        """Gets the server_start_count of this AgentConnectorShareStats.  # noqa: E501

        The total number of times the share server has started  # noqa: E501

        :return: The server_start_count of this AgentConnectorShareStats.  # noqa: E501
        :rtype: int
        """
        return self._server_start_count

    @server_start_count.setter
    def server_start_count(self, server_start_count):
        """Sets the server_start_count of this AgentConnectorShareStats.

        The total number of times the share server has started  # noqa: E501

        :param server_start_count: The server_start_count of this AgentConnectorShareStats.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and server_start_count is None:  # noqa: E501
            raise ValueError("Invalid value for `server_start_count`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                server_start_count is not None and server_start_count < 0):  # noqa: E501
            raise ValueError("Invalid value for `server_start_count`, must be a value greater than or equal to `0`")  # noqa: E501

        self._server_start_count = server_start_count

    @property
    def server_stop_count(self):
        """Gets the server_stop_count of this AgentConnectorShareStats.  # noqa: E501

        The total number of times the share server has stopped  # noqa: E501

        :return: The server_stop_count of this AgentConnectorShareStats.  # noqa: E501
        :rtype: int
        """
        return self._server_stop_count

    @server_stop_count.setter
    def server_stop_count(self, server_stop_count):
        """Sets the server_stop_count of this AgentConnectorShareStats.

        The total number of times the share server has stopped  # noqa: E501

        :param server_stop_count: The server_stop_count of this AgentConnectorShareStats.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and server_stop_count is None:  # noqa: E501
            raise ValueError("Invalid value for `server_stop_count`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                server_stop_count is not None and server_stop_count < 0):  # noqa: E501
            raise ValueError("Invalid value for `server_stop_count`, must be a value greater than or equal to `0`")  # noqa: E501

        self._server_stop_count = server_stop_count

    @property
    def per_share_info(self):
        """Gets the per_share_info of this AgentConnectorShareStats.  # noqa: E501

        Information collected from the shares. Each share currently exposed will have a single record in this list. Shares which were once exposed, but no longer are, do not have records. If a share is later exposed, its statistics will be reset.   # noqa: E501

        :return: The per_share_info of this AgentConnectorShareStats.  # noqa: E501
        :rtype: list[AgentConnectorPerShareStats]
        """
        return self._per_share_info

    @per_share_info.setter
    def per_share_info(self, per_share_info):
        """Sets the per_share_info of this AgentConnectorShareStats.

        Information collected from the shares. Each share currently exposed will have a single record in this list. Shares which were once exposed, but no longer are, do not have records. If a share is later exposed, its statistics will be reset.   # noqa: E501

        :param per_share_info: The per_share_info of this AgentConnectorShareStats.  # noqa: E501
        :type: list[AgentConnectorPerShareStats]
        """
        if self.local_vars_configuration.client_side_validation and per_share_info is None:  # noqa: E501
            raise ValueError("Invalid value for `per_share_info`, must not be `None`")  # noqa: E501

        self._per_share_info = per_share_info

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AgentConnectorShareStats):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AgentConnectorShareStats):
            return True

        return self.to_dict() != other.to_dict()
