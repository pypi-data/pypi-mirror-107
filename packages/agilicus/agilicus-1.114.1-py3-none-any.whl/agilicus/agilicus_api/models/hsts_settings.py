# coding: utf-8

"""
    Agilicus API

    Agilicus is API-first. Modern software is controlled by other software, is open, is available for you to use the way you want, securely, simply.  A rendered, online viewable and usable version of this specification is available at [api](https://www.agilicus.com/api). You may try the API inline directly in the web page. To do so, first obtain an Authentication Token (the simplest way is to install the Python SDK, and then run `agilicus-cli --issuer https://MYISSUER get-token`). You will need an org-id for most calls (and can obtain from `agilicus-cli --issuer https://MYISSUER list-orgs`). The `MYISSUER` will typically be `auth.MYDOMAIN`, and you will see it as you sign-in to the administrative UI.  This API releases on Bearer-Token authentication. To obtain a valid bearer token you will need to Authenticate to an Issuer with OpenID Connect (a superset of OAUTH2).  Your \"issuer\" will look like https://auth.MYDOMAIN. For example, when you signed-up, if you said \"use my own domain name\" and assigned a CNAME of cloud.example.com, then your issuer would be https://auth.cloud.example.com.  If you selected \"use an Agilicus supplied domain name\", your issuer would look like https://auth.myorg.agilicus.cloud.  For test purposes you can use our [Python SDK](https://pypi.org/project/agilicus/) and run `agilicus-cli --issuer https://auth.MYDOMAIN get-token`.  This API may be used in any language runtime that supports OpenAPI 3.0, or, you may use our [Python SDK](https://pypi.org/project/agilicus/), our [Typescript SDK](https://www.npmjs.com/package/@agilicus/angular), or our [Golang SDK](https://git.agilicus.com/pub/sdk-go).  100% of the activities in our system our API-driven, from our web-admin, through our progressive web applications, to all internals: there is nothing that is not accessible.  For more information, see [developer resources](https://www.agilicus.com/developer).   # noqa: E501

    The version of the OpenAPI document: 2021.05.26
    Contact: dev@agilicus.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from agilicus_api.configuration import Configuration


class HSTSSettings(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'enabled': 'bool',
        'max_age_seconds': 'int',
        'include_sub_domains': 'bool',
        'preload': 'bool'
    }

    attribute_map = {
        'enabled': 'enabled',
        'max_age_seconds': 'max_age_seconds',
        'include_sub_domains': 'include_sub_domains',
        'preload': 'preload'
    }

    def __init__(self, enabled=None, max_age_seconds=None, include_sub_domains=None, preload=None, local_vars_configuration=None):  # noqa: E501
        """HSTSSettings - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._enabled = None
        self._max_age_seconds = None
        self._include_sub_domains = None
        self._preload = None
        self.discriminator = None

        self.enabled = enabled
        self.max_age_seconds = max_age_seconds
        self.include_sub_domains = include_sub_domains
        self.preload = preload

    @property
    def enabled(self):
        """Gets the enabled of this HSTSSettings.  # noqa: E501

        Whether or not to send the HSTS header. If disabled, any HSTS headers set by the application will be passed through unchanged.   # noqa: E501

        :return: The enabled of this HSTSSettings.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this HSTSSettings.

        Whether or not to send the HSTS header. If disabled, any HSTS headers set by the application will be passed through unchanged.   # noqa: E501

        :param enabled: The enabled of this HSTSSettings.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and enabled is None:  # noqa: E501
            raise ValueError("Invalid value for `enabled`, must not be `None`")  # noqa: E501

        self._enabled = enabled

    @property
    def max_age_seconds(self):
        """Gets the max_age_seconds of this HSTSSettings.  # noqa: E501

        The number of seconds for which to remember that accesses need to be over HTTPS. A value of 0 means that the browser should forget.   # noqa: E501

        :return: The max_age_seconds of this HSTSSettings.  # noqa: E501
        :rtype: int
        """
        return self._max_age_seconds

    @max_age_seconds.setter
    def max_age_seconds(self, max_age_seconds):
        """Sets the max_age_seconds of this HSTSSettings.

        The number of seconds for which to remember that accesses need to be over HTTPS. A value of 0 means that the browser should forget.   # noqa: E501

        :param max_age_seconds: The max_age_seconds of this HSTSSettings.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and max_age_seconds is None:  # noqa: E501
            raise ValueError("Invalid value for `max_age_seconds`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                max_age_seconds is not None and max_age_seconds < 0):  # noqa: E501
            raise ValueError("Invalid value for `max_age_seconds`, must be a value greater than or equal to `0`")  # noqa: E501

        self._max_age_seconds = max_age_seconds

    @property
    def include_sub_domains(self):
        """Gets the include_sub_domains of this HSTSSettings.  # noqa: E501

        Whether subdomains of the Application should be included in the HSTS restriction.   # noqa: E501

        :return: The include_sub_domains of this HSTSSettings.  # noqa: E501
        :rtype: bool
        """
        return self._include_sub_domains

    @include_sub_domains.setter
    def include_sub_domains(self, include_sub_domains):
        """Sets the include_sub_domains of this HSTSSettings.

        Whether subdomains of the Application should be included in the HSTS restriction.   # noqa: E501

        :param include_sub_domains: The include_sub_domains of this HSTSSettings.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and include_sub_domains is None:  # noqa: E501
            raise ValueError("Invalid value for `include_sub_domains`, must not be `None`")  # noqa: E501

        self._include_sub_domains = include_sub_domains

    @property
    def preload(self):
        """Gets the preload of this HSTSSettings.  # noqa: E501

        Indicate to HSTS preload services that this application should be preloaded.   # noqa: E501

        :return: The preload of this HSTSSettings.  # noqa: E501
        :rtype: bool
        """
        return self._preload

    @preload.setter
    def preload(self, preload):
        """Sets the preload of this HSTSSettings.

        Indicate to HSTS preload services that this application should be preloaded.   # noqa: E501

        :param preload: The preload of this HSTSSettings.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and preload is None:  # noqa: E501
            raise ValueError("Invalid value for `preload`, must not be `None`")  # noqa: E501

        self._preload = preload

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HSTSSettings):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, HSTSSettings):
            return True

        return self.to_dict() != other.to_dict()
