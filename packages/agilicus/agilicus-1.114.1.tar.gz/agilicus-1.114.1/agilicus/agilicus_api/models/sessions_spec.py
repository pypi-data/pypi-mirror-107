# coding: utf-8

"""
    Agilicus API

    Agilicus is API-first. Modern software is controlled by other software, is open, is available for you to use the way you want, securely, simply.  A rendered, online viewable and usable version of this specification is available at [api](https://www.agilicus.com/api). You may try the API inline directly in the web page. To do so, first obtain an Authentication Token (the simplest way is to install the Python SDK, and then run `agilicus-cli --issuer https://MYISSUER get-token`). You will need an org-id for most calls (and can obtain from `agilicus-cli --issuer https://MYISSUER list-orgs`). The `MYISSUER` will typically be `auth.MYDOMAIN`, and you will see it as you sign-in to the administrative UI.  This API releases on Bearer-Token authentication. To obtain a valid bearer token you will need to Authenticate to an Issuer with OpenID Connect (a superset of OAUTH2).  Your \"issuer\" will look like https://auth.MYDOMAIN. For example, when you signed-up, if you said \"use my own domain name\" and assigned a CNAME of cloud.example.com, then your issuer would be https://auth.cloud.example.com.  If you selected \"use an Agilicus supplied domain name\", your issuer would look like https://auth.myorg.agilicus.cloud.  For test purposes you can use our [Python SDK](https://pypi.org/project/agilicus/) and run `agilicus-cli --issuer https://auth.MYDOMAIN get-token`.  This API may be used in any language runtime that supports OpenAPI 3.0, or, you may use our [Python SDK](https://pypi.org/project/agilicus/), our [Typescript SDK](https://www.npmjs.com/package/@agilicus/angular), or our [Golang SDK](https://git.agilicus.com/pub/sdk-go).  100% of the activities in our system our API-driven, from our web-admin, through our progressive web applications, to all internals: there is nothing that is not accessible.  For more information, see [developer resources](https://www.agilicus.com/developer).   # noqa: E501

    The version of the OpenAPI document: 2021.05.26
    Contact: dev@agilicus.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from agilicus_api.configuration import Configuration


class SessionsSpec(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'user_id': 'str',
        'org_id': 'str',
        'revoked': 'bool',
        'number_of_logins': 'int',
        'number_of_failed_multi_factor_challenges': 'int'
    }

    attribute_map = {
        'user_id': 'user_id',
        'org_id': 'org_id',
        'revoked': 'revoked',
        'number_of_logins': 'number_of_logins',
        'number_of_failed_multi_factor_challenges': 'number_of_failed_multi_factor_challenges'
    }

    def __init__(self, user_id=None, org_id=None, revoked=None, number_of_logins=None, number_of_failed_multi_factor_challenges=None, local_vars_configuration=None):  # noqa: E501
        """SessionsSpec - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._user_id = None
        self._org_id = None
        self._revoked = None
        self._number_of_logins = None
        self._number_of_failed_multi_factor_challenges = None
        self.discriminator = None

        self.user_id = user_id
        self.org_id = org_id
        if revoked is not None:
            self.revoked = revoked
        if number_of_logins is not None:
            self.number_of_logins = number_of_logins
        if number_of_failed_multi_factor_challenges is not None:
            self.number_of_failed_multi_factor_challenges = number_of_failed_multi_factor_challenges

    @property
    def user_id(self):
        """Gets the user_id of this SessionsSpec.  # noqa: E501

        The user id associated with the session  # noqa: E501

        :return: The user_id of this SessionsSpec.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this SessionsSpec.

        The user id associated with the session  # noqa: E501

        :param user_id: The user_id of this SessionsSpec.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and user_id is None:  # noqa: E501
            raise ValueError("Invalid value for `user_id`, must not be `None`")  # noqa: E501

        self._user_id = user_id

    @property
    def org_id(self):
        """Gets the org_id of this SessionsSpec.  # noqa: E501

        The org id associated with the issuer the user is logging into  # noqa: E501

        :return: The org_id of this SessionsSpec.  # noqa: E501
        :rtype: str
        """
        return self._org_id

    @org_id.setter
    def org_id(self, org_id):
        """Sets the org_id of this SessionsSpec.

        The org id associated with the issuer the user is logging into  # noqa: E501

        :param org_id: The org_id of this SessionsSpec.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and org_id is None:  # noqa: E501
            raise ValueError("Invalid value for `org_id`, must not be `None`")  # noqa: E501

        self._org_id = org_id

    @property
    def revoked(self):
        """Gets the revoked of this SessionsSpec.  # noqa: E501

        The status of a the session. A session is no longer valid if it has been revoked.  # noqa: E501

        :return: The revoked of this SessionsSpec.  # noqa: E501
        :rtype: bool
        """
        return self._revoked

    @revoked.setter
    def revoked(self, revoked):
        """Sets the revoked of this SessionsSpec.

        The status of a the session. A session is no longer valid if it has been revoked.  # noqa: E501

        :param revoked: The revoked of this SessionsSpec.  # noqa: E501
        :type: bool
        """

        self._revoked = revoked

    @property
    def number_of_logins(self):
        """Gets the number_of_logins of this SessionsSpec.  # noqa: E501

        The number of times a user has logged in during this session  # noqa: E501

        :return: The number_of_logins of this SessionsSpec.  # noqa: E501
        :rtype: int
        """
        return self._number_of_logins

    @number_of_logins.setter
    def number_of_logins(self, number_of_logins):
        """Sets the number_of_logins of this SessionsSpec.

        The number of times a user has logged in during this session  # noqa: E501

        :param number_of_logins: The number_of_logins of this SessionsSpec.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                number_of_logins is not None and number_of_logins < 0):  # noqa: E501
            raise ValueError("Invalid value for `number_of_logins`, must be a value greater than or equal to `0`")  # noqa: E501

        self._number_of_logins = number_of_logins

    @property
    def number_of_failed_multi_factor_challenges(self):
        """Gets the number_of_failed_multi_factor_challenges of this SessionsSpec.  # noqa: E501

        The number of times a user has failed a multi-factor authentication challenge associated with this session  # noqa: E501

        :return: The number_of_failed_multi_factor_challenges of this SessionsSpec.  # noqa: E501
        :rtype: int
        """
        return self._number_of_failed_multi_factor_challenges

    @number_of_failed_multi_factor_challenges.setter
    def number_of_failed_multi_factor_challenges(self, number_of_failed_multi_factor_challenges):
        """Sets the number_of_failed_multi_factor_challenges of this SessionsSpec.

        The number of times a user has failed a multi-factor authentication challenge associated with this session  # noqa: E501

        :param number_of_failed_multi_factor_challenges: The number_of_failed_multi_factor_challenges of this SessionsSpec.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                number_of_failed_multi_factor_challenges is not None and number_of_failed_multi_factor_challenges < 0):  # noqa: E501
            raise ValueError("Invalid value for `number_of_failed_multi_factor_challenges`, must be a value greater than or equal to `0`")  # noqa: E501

        self._number_of_failed_multi_factor_challenges = number_of_failed_multi_factor_challenges

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SessionsSpec):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SessionsSpec):
            return True

        return self.to_dict() != other.to_dict()
