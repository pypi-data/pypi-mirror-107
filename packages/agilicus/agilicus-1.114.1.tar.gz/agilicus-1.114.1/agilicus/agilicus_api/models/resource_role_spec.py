# coding: utf-8

"""
    Agilicus API

    Agilicus is API-first. Modern software is controlled by other software, is open, is available for you to use the way you want, securely, simply.  A rendered, online viewable and usable version of this specification is available at [api](https://www.agilicus.com/api). You may try the API inline directly in the web page. To do so, first obtain an Authentication Token (the simplest way is to install the Python SDK, and then run `agilicus-cli --issuer https://MYISSUER get-token`). You will need an org-id for most calls (and can obtain from `agilicus-cli --issuer https://MYISSUER list-orgs`). The `MYISSUER` will typically be `auth.MYDOMAIN`, and you will see it as you sign-in to the administrative UI.  This API releases on Bearer-Token authentication. To obtain a valid bearer token you will need to Authenticate to an Issuer with OpenID Connect (a superset of OAUTH2).  Your \"issuer\" will look like https://auth.MYDOMAIN. For example, when you signed-up, if you said \"use my own domain name\" and assigned a CNAME of cloud.example.com, then your issuer would be https://auth.cloud.example.com.  If you selected \"use an Agilicus supplied domain name\", your issuer would look like https://auth.myorg.agilicus.cloud.  For test purposes you can use our [Python SDK](https://pypi.org/project/agilicus/) and run `agilicus-cli --issuer https://auth.MYDOMAIN get-token`.  This API may be used in any language runtime that supports OpenAPI 3.0, or, you may use our [Python SDK](https://pypi.org/project/agilicus/), our [Typescript SDK](https://www.npmjs.com/package/@agilicus/angular), or our [Golang SDK](https://git.agilicus.com/pub/sdk-go).  100% of the activities in our system our API-driven, from our web-admin, through our progressive web applications, to all internals: there is nothing that is not accessible.  For more information, see [developer resources](https://www.agilicus.com/developer).   # noqa: E501

    The version of the OpenAPI document: 2021.05.26
    Contact: dev@agilicus.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from agilicus_api.configuration import Configuration


class ResourceRoleSpec(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'resource_type': 'str',
        'role_name': 'str',
        'description': 'str'
    }

    attribute_map = {
        'resource_type': 'resource_type',
        'role_name': 'role_name',
        'description': 'description'
    }

    def __init__(self, resource_type=None, role_name=None, description=None, local_vars_configuration=None):  # noqa: E501
        """ResourceRoleSpec - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._resource_type = None
        self._role_name = None
        self._description = None
        self.discriminator = None

        self.resource_type = resource_type
        self.role_name = role_name
        if description is not None:
            self.description = description

    @property
    def resource_type(self):
        """Gets the resource_type of this ResourceRoleSpec.  # noqa: E501

        The type of the resource referred to by `resource_id`.  # noqa: E501

        :return: The resource_type of this ResourceRoleSpec.  # noqa: E501
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this ResourceRoleSpec.

        The type of the resource referred to by `resource_id`.  # noqa: E501

        :param resource_type: The resource_type of this ResourceRoleSpec.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and resource_type is None:  # noqa: E501
            raise ValueError("Invalid value for `resource_type`, must not be `None`")  # noqa: E501
        allowed_values = ["fileshare", "application_service"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and resource_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `resource_type` ({0}), must be one of {1}"  # noqa: E501
                .format(resource_type, allowed_values)
            )

        self._resource_type = resource_type

    @property
    def role_name(self):
        """Gets the role_name of this ResourceRoleSpec.  # noqa: E501

        A short descriptive name used to identify the role. Unique per resource_type.   # noqa: E501

        :return: The role_name of this ResourceRoleSpec.  # noqa: E501
        :rtype: str
        """
        return self._role_name

    @role_name.setter
    def role_name(self, role_name):
        """Sets the role_name of this ResourceRoleSpec.

        A short descriptive name used to identify the role. Unique per resource_type.   # noqa: E501

        :param role_name: The role_name of this ResourceRoleSpec.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and role_name is None:  # noqa: E501
            raise ValueError("Invalid value for `role_name`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                role_name is not None and len(role_name) > 40):
            raise ValueError("Invalid value for `role_name`, length must be less than or equal to `40`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                role_name is not None and len(role_name) < 1):
            raise ValueError("Invalid value for `role_name`, length must be greater than or equal to `1`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                role_name is not None and not re.search(r'[a-zA-Z0-9-_:]+', role_name)):  # noqa: E501
            raise ValueError(r"Invalid value for `role_name`, must be a follow pattern or equal to `/[a-zA-Z0-9-_:]+/`")  # noqa: E501

        self._role_name = role_name

    @property
    def description(self):
        """Gets the description of this ResourceRoleSpec.  # noqa: E501

        A brief description of the role detailing the purpose of the role and what sort of permissions it grants.   # noqa: E501

        :return: The description of this ResourceRoleSpec.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ResourceRoleSpec.

        A brief description of the role detailing the purpose of the role and what sort of permissions it grants.   # noqa: E501

        :param description: The description of this ResourceRoleSpec.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                description is not None and len(description) > 100):
            raise ValueError("Invalid value for `description`, length must be less than or equal to `100`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                description is not None and not re.search(r'[a-zA-Z0-9-_:]+', description)):  # noqa: E501
            raise ValueError(r"Invalid value for `description`, must be a follow pattern or equal to `/[a-zA-Z0-9-_:]+/`")  # noqa: E501

        self._description = description

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResourceRoleSpec):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ResourceRoleSpec):
            return True

        return self.to_dict() != other.to_dict()
