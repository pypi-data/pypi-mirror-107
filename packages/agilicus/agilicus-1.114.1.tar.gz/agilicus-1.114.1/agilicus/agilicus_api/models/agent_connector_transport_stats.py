# coding: utf-8

"""
    Agilicus API

    Agilicus is API-first. Modern software is controlled by other software, is open, is available for you to use the way you want, securely, simply.  A rendered, online viewable and usable version of this specification is available at [api](https://www.agilicus.com/api). You may try the API inline directly in the web page. To do so, first obtain an Authentication Token (the simplest way is to install the Python SDK, and then run `agilicus-cli --issuer https://MYISSUER get-token`). You will need an org-id for most calls (and can obtain from `agilicus-cli --issuer https://MYISSUER list-orgs`). The `MYISSUER` will typically be `auth.MYDOMAIN`, and you will see it as you sign-in to the administrative UI.  This API releases on Bearer-Token authentication. To obtain a valid bearer token you will need to Authenticate to an Issuer with OpenID Connect (a superset of OAUTH2).  Your \"issuer\" will look like https://auth.MYDOMAIN. For example, when you signed-up, if you said \"use my own domain name\" and assigned a CNAME of cloud.example.com, then your issuer would be https://auth.cloud.example.com.  If you selected \"use an Agilicus supplied domain name\", your issuer would look like https://auth.myorg.agilicus.cloud.  For test purposes you can use our [Python SDK](https://pypi.org/project/agilicus/) and run `agilicus-cli --issuer https://auth.MYDOMAIN get-token`.  This API may be used in any language runtime that supports OpenAPI 3.0, or, you may use our [Python SDK](https://pypi.org/project/agilicus/), our [Typescript SDK](https://www.npmjs.com/package/@agilicus/angular), or our [Golang SDK](https://git.agilicus.com/pub/sdk-go).  100% of the activities in our system our API-driven, from our web-admin, through our progressive web applications, to all internals: there is nothing that is not accessible.  For more information, see [developer resources](https://www.agilicus.com/developer).   # noqa: E501

    The version of the OpenAPI document: 2021.05.26
    Contact: dev@agilicus.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from agilicus_api.configuration import Configuration


class AgentConnectorTransportStats(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'active_connections': 'int',
        'target_number_connections': 'int',
        'connection_start_count': 'int',
        'connection_stop_count': 'int'
    }

    attribute_map = {
        'active_connections': 'active_connections',
        'target_number_connections': 'target_number_connections',
        'connection_start_count': 'connection_start_count',
        'connection_stop_count': 'connection_stop_count'
    }

    def __init__(self, active_connections=None, target_number_connections=None, connection_start_count=None, connection_stop_count=None, local_vars_configuration=None):  # noqa: E501
        """AgentConnectorTransportStats - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._active_connections = None
        self._target_number_connections = None
        self._connection_start_count = None
        self._connection_stop_count = None
        self.discriminator = None

        self.active_connections = active_connections
        self.target_number_connections = target_number_connections
        self.connection_start_count = connection_start_count
        self.connection_stop_count = connection_stop_count

    @property
    def active_connections(self):
        """Gets the active_connections of this AgentConnectorTransportStats.  # noqa: E501

        The number of currently active connections.   # noqa: E501

        :return: The active_connections of this AgentConnectorTransportStats.  # noqa: E501
        :rtype: int
        """
        return self._active_connections

    @active_connections.setter
    def active_connections(self, active_connections):
        """Sets the active_connections of this AgentConnectorTransportStats.

        The number of currently active connections.   # noqa: E501

        :param active_connections: The active_connections of this AgentConnectorTransportStats.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and active_connections is None:  # noqa: E501
            raise ValueError("Invalid value for `active_connections`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                active_connections is not None and active_connections < 0):  # noqa: E501
            raise ValueError("Invalid value for `active_connections`, must be a value greater than or equal to `0`")  # noqa: E501

        self._active_connections = active_connections

    @property
    def target_number_connections(self):
        """Gets the target_number_connections of this AgentConnectorTransportStats.  # noqa: E501

        The number of connections which should be in an active state. Note that this may be less than active_connections if the AgentConnector is currently applying configuration changes. It may be more than active_connections if there is a connectivity issue, or connections are first starting.   # noqa: E501

        :return: The target_number_connections of this AgentConnectorTransportStats.  # noqa: E501
        :rtype: int
        """
        return self._target_number_connections

    @target_number_connections.setter
    def target_number_connections(self, target_number_connections):
        """Sets the target_number_connections of this AgentConnectorTransportStats.

        The number of connections which should be in an active state. Note that this may be less than active_connections if the AgentConnector is currently applying configuration changes. It may be more than active_connections if there is a connectivity issue, or connections are first starting.   # noqa: E501

        :param target_number_connections: The target_number_connections of this AgentConnectorTransportStats.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and target_number_connections is None:  # noqa: E501
            raise ValueError("Invalid value for `target_number_connections`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                target_number_connections is not None and target_number_connections < 0):  # noqa: E501
            raise ValueError("Invalid value for `target_number_connections`, must be a value greater than or equal to `0`")  # noqa: E501

        self._target_number_connections = target_number_connections

    @property
    def connection_start_count(self):
        """Gets the connection_start_count of this AgentConnectorTransportStats.  # noqa: E501

        The number of times connections have been started   # noqa: E501

        :return: The connection_start_count of this AgentConnectorTransportStats.  # noqa: E501
        :rtype: int
        """
        return self._connection_start_count

    @connection_start_count.setter
    def connection_start_count(self, connection_start_count):
        """Sets the connection_start_count of this AgentConnectorTransportStats.

        The number of times connections have been started   # noqa: E501

        :param connection_start_count: The connection_start_count of this AgentConnectorTransportStats.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and connection_start_count is None:  # noqa: E501
            raise ValueError("Invalid value for `connection_start_count`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                connection_start_count is not None and connection_start_count < 0):  # noqa: E501
            raise ValueError("Invalid value for `connection_start_count`, must be a value greater than or equal to `0`")  # noqa: E501

        self._connection_start_count = connection_start_count

    @property
    def connection_stop_count(self):
        """Gets the connection_stop_count of this AgentConnectorTransportStats.  # noqa: E501

        The number of times connections have stopped   # noqa: E501

        :return: The connection_stop_count of this AgentConnectorTransportStats.  # noqa: E501
        :rtype: int
        """
        return self._connection_stop_count

    @connection_stop_count.setter
    def connection_stop_count(self, connection_stop_count):
        """Sets the connection_stop_count of this AgentConnectorTransportStats.

        The number of times connections have stopped   # noqa: E501

        :param connection_stop_count: The connection_stop_count of this AgentConnectorTransportStats.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and connection_stop_count is None:  # noqa: E501
            raise ValueError("Invalid value for `connection_stop_count`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                connection_stop_count is not None and connection_stop_count < 0):  # noqa: E501
            raise ValueError("Invalid value for `connection_stop_count`, must be a value greater than or equal to `0`")  # noqa: E501

        self._connection_stop_count = connection_stop_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AgentConnectorTransportStats):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AgentConnectorTransportStats):
            return True

        return self.to_dict() != other.to_dict()
