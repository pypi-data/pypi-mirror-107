# coding: utf-8

"""
    Agilicus API

    Agilicus is API-first. Modern software is controlled by other software, is open, is available for you to use the way you want, securely, simply.  A rendered, online viewable and usable version of this specification is available at [api](https://www.agilicus.com/api). You may try the API inline directly in the web page. To do so, first obtain an Authentication Token (the simplest way is to install the Python SDK, and then run `agilicus-cli --issuer https://MYISSUER get-token`). You will need an org-id for most calls (and can obtain from `agilicus-cli --issuer https://MYISSUER list-orgs`). The `MYISSUER` will typically be `auth.MYDOMAIN`, and you will see it as you sign-in to the administrative UI.  This API releases on Bearer-Token authentication. To obtain a valid bearer token you will need to Authenticate to an Issuer with OpenID Connect (a superset of OAUTH2).  Your \"issuer\" will look like https://auth.MYDOMAIN. For example, when you signed-up, if you said \"use my own domain name\" and assigned a CNAME of cloud.example.com, then your issuer would be https://auth.cloud.example.com.  If you selected \"use an Agilicus supplied domain name\", your issuer would look like https://auth.myorg.agilicus.cloud.  For test purposes you can use our [Python SDK](https://pypi.org/project/agilicus/) and run `agilicus-cli --issuer https://auth.MYDOMAIN get-token`.  This API may be used in any language runtime that supports OpenAPI 3.0, or, you may use our [Python SDK](https://pypi.org/project/agilicus/), our [Typescript SDK](https://www.npmjs.com/package/@agilicus/angular), or our [Golang SDK](https://git.agilicus.com/pub/sdk-go).  100% of the activities in our system our API-driven, from our web-admin, through our progressive web applications, to all internals: there is nothing that is not accessible.  For more information, see [developer resources](https://www.agilicus.com/developer).   # noqa: E501

    The version of the OpenAPI document: 2021.05.26
    Contact: dev@agilicus.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from agilicus_api.configuration import Configuration


class CertificateTransparencySettings(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'enabled': 'bool',
        'report_uri': 'str',
        'enforce': 'bool',
        'max_age_seconds': 'int'
    }

    attribute_map = {
        'enabled': 'enabled',
        'report_uri': 'report_uri',
        'enforce': 'enforce',
        'max_age_seconds': 'max_age_seconds'
    }

    def __init__(self, enabled=None, report_uri=None, enforce=None, max_age_seconds=None, local_vars_configuration=None):  # noqa: E501
        """CertificateTransparencySettings - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._enabled = None
        self._report_uri = None
        self._enforce = None
        self._max_age_seconds = None
        self.discriminator = None

        self.enabled = enabled
        self.report_uri = report_uri
        self.enforce = enforce
        self.max_age_seconds = max_age_seconds

    @property
    def enabled(self):
        """Gets the enabled of this CertificateTransparencySettings.  # noqa: E501

        Whether to apply the Certificate Transparency Settings. If false, no settings will be applied. Settings applied by the application itself will take effect.   # noqa: E501

        :return: The enabled of this CertificateTransparencySettings.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this CertificateTransparencySettings.

        Whether to apply the Certificate Transparency Settings. If false, no settings will be applied. Settings applied by the application itself will take effect.   # noqa: E501

        :param enabled: The enabled of this CertificateTransparencySettings.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and enabled is None:  # noqa: E501
            raise ValueError("Invalid value for `enabled`, must not be `None`")  # noqa: E501

        self._enabled = enabled

    @property
    def report_uri(self):
        """Gets the report_uri of this CertificateTransparencySettings.  # noqa: E501

        The uri where the browser will report failures. Setting this to `null` or `\"\"` will prevent reports.   # noqa: E501

        :return: The report_uri of this CertificateTransparencySettings.  # noqa: E501
        :rtype: str
        """
        return self._report_uri

    @report_uri.setter
    def report_uri(self, report_uri):
        """Sets the report_uri of this CertificateTransparencySettings.

        The uri where the browser will report failures. Setting this to `null` or `\"\"` will prevent reports.   # noqa: E501

        :param report_uri: The report_uri of this CertificateTransparencySettings.  # noqa: E501
        :type: str
        """

        self._report_uri = report_uri

    @property
    def enforce(self):
        """Gets the enforce of this CertificateTransparencySettings.  # noqa: E501

        Whether or not certificate transparency failures cause the browser to take action.   # noqa: E501

        :return: The enforce of this CertificateTransparencySettings.  # noqa: E501
        :rtype: bool
        """
        return self._enforce

    @enforce.setter
    def enforce(self, enforce):
        """Sets the enforce of this CertificateTransparencySettings.

        Whether or not certificate transparency failures cause the browser to take action.   # noqa: E501

        :param enforce: The enforce of this CertificateTransparencySettings.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and enforce is None:  # noqa: E501
            raise ValueError("Invalid value for `enforce`, must not be `None`")  # noqa: E501

        self._enforce = enforce

    @property
    def max_age_seconds(self):
        """Gets the max_age_seconds of this CertificateTransparencySettings.  # noqa: E501

        The number of seconds for which to remember that the Application expects certificate transparency.   # noqa: E501

        :return: The max_age_seconds of this CertificateTransparencySettings.  # noqa: E501
        :rtype: int
        """
        return self._max_age_seconds

    @max_age_seconds.setter
    def max_age_seconds(self, max_age_seconds):
        """Sets the max_age_seconds of this CertificateTransparencySettings.

        The number of seconds for which to remember that the Application expects certificate transparency.   # noqa: E501

        :param max_age_seconds: The max_age_seconds of this CertificateTransparencySettings.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and max_age_seconds is None:  # noqa: E501
            raise ValueError("Invalid value for `max_age_seconds`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                max_age_seconds is not None and max_age_seconds < 0):  # noqa: E501
            raise ValueError("Invalid value for `max_age_seconds`, must be a value greater than or equal to `0`")  # noqa: E501

        self._max_age_seconds = max_age_seconds

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CertificateTransparencySettings):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CertificateTransparencySettings):
            return True

        return self.to_dict() != other.to_dict()
