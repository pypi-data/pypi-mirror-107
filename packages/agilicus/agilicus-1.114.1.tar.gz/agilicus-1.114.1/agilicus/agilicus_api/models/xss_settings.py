# coding: utf-8

"""
    Agilicus API

    Agilicus is API-first. Modern software is controlled by other software, is open, is available for you to use the way you want, securely, simply.  A rendered, online viewable and usable version of this specification is available at [api](https://www.agilicus.com/api). You may try the API inline directly in the web page. To do so, first obtain an Authentication Token (the simplest way is to install the Python SDK, and then run `agilicus-cli --issuer https://MYISSUER get-token`). You will need an org-id for most calls (and can obtain from `agilicus-cli --issuer https://MYISSUER list-orgs`). The `MYISSUER` will typically be `auth.MYDOMAIN`, and you will see it as you sign-in to the administrative UI.  This API releases on Bearer-Token authentication. To obtain a valid bearer token you will need to Authenticate to an Issuer with OpenID Connect (a superset of OAUTH2).  Your \"issuer\" will look like https://auth.MYDOMAIN. For example, when you signed-up, if you said \"use my own domain name\" and assigned a CNAME of cloud.example.com, then your issuer would be https://auth.cloud.example.com.  If you selected \"use an Agilicus supplied domain name\", your issuer would look like https://auth.myorg.agilicus.cloud.  For test purposes you can use our [Python SDK](https://pypi.org/project/agilicus/) and run `agilicus-cli --issuer https://auth.MYDOMAIN get-token`.  This API may be used in any language runtime that supports OpenAPI 3.0, or, you may use our [Python SDK](https://pypi.org/project/agilicus/), our [Typescript SDK](https://www.npmjs.com/package/@agilicus/angular), or our [Golang SDK](https://git.agilicus.com/pub/sdk-go).  100% of the activities in our system our API-driven, from our web-admin, through our progressive web applications, to all internals: there is nothing that is not accessible.  For more information, see [developer resources](https://www.agilicus.com/developer).   # noqa: E501

    The version of the OpenAPI document: 2021.05.26
    Contact: dev@agilicus.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from agilicus_api.configuration import Configuration


class XSSSettings(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'enabled': 'bool',
        'mode': 'str',
        'report_uri': 'str'
    }

    attribute_map = {
        'enabled': 'enabled',
        'mode': 'mode',
        'report_uri': 'report_uri'
    }

    def __init__(self, enabled=None, mode=None, report_uri=None, local_vars_configuration=None):  # noqa: E501
        """XSSSettings - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._enabled = None
        self._mode = None
        self._report_uri = None
        self.discriminator = None

        self.enabled = enabled
        self.mode = mode
        self.report_uri = report_uri

    @property
    def enabled(self):
        """Gets the enabled of this XSSSettings.  # noqa: E501

        Whether or not to send the XSS-Protection-Header. If false, the system will not add the XSS-Protection-Header. Any headers added by the application will be passed through unchanged.   # noqa: E501

        :return: The enabled of this XSSSettings.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this XSSSettings.

        Whether or not to send the XSS-Protection-Header. If false, the system will not add the XSS-Protection-Header. Any headers added by the application will be passed through unchanged.   # noqa: E501

        :param enabled: The enabled of this XSSSettings.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and enabled is None:  # noqa: E501
            raise ValueError("Invalid value for `enabled`, must not be `None`")  # noqa: E501

        self._enabled = enabled

    @property
    def mode(self):
        """Gets the mode of this XSSSettings.  # noqa: E501

        Mode controls whether or not XSS filtering is enabled, and how it is. It has the following meanings:   - `disabled`: XSS Filtering is disabled.   - `sanitise`: XSS Filtering is enabled. Pages being attacked are sanitised.   - `block`: XSS Filtering is enabled, and attacked pages are not rendered.   # noqa: E501

        :return: The mode of this XSSSettings.  # noqa: E501
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this XSSSettings.

        Mode controls whether or not XSS filtering is enabled, and how it is. It has the following meanings:   - `disabled`: XSS Filtering is disabled.   - `sanitise`: XSS Filtering is enabled. Pages being attacked are sanitised.   - `block`: XSS Filtering is enabled, and attacked pages are not rendered.   # noqa: E501

        :param mode: The mode of this XSSSettings.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and mode is None:  # noqa: E501
            raise ValueError("Invalid value for `mode`, must not be `None`")  # noqa: E501
        allowed_values = ["disabled", "block", "sanitise"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and mode not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `mode` ({0}), must be one of {1}"  # noqa: E501
                .format(mode, allowed_values)
            )

        self._mode = mode

    @property
    def report_uri(self):
        """Gets the report_uri of this XSSSettings.  # noqa: E501

        Detected attacks are reported to this URI for supported browsers. Omitting this field or setting it to \"\" will lead to not reports being generated   # noqa: E501

        :return: The report_uri of this XSSSettings.  # noqa: E501
        :rtype: str
        """
        return self._report_uri

    @report_uri.setter
    def report_uri(self, report_uri):
        """Sets the report_uri of this XSSSettings.

        Detected attacks are reported to this URI for supported browsers. Omitting this field or setting it to \"\" will lead to not reports being generated   # noqa: E501

        :param report_uri: The report_uri of this XSSSettings.  # noqa: E501
        :type: str
        """

        self._report_uri = report_uri

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, XSSSettings):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, XSSSettings):
            return True

        return self.to_dict() != other.to_dict()
