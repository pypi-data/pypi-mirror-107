# coding: utf-8

"""
    Agilicus API

    Agilicus is API-first. Modern software is controlled by other software, is open, is available for you to use the way you want, securely, simply.  A rendered, online viewable and usable version of this specification is available at [api](https://www.agilicus.com/api). You may try the API inline directly in the web page. To do so, first obtain an Authentication Token (the simplest way is to install the Python SDK, and then run `agilicus-cli --issuer https://MYISSUER get-token`). You will need an org-id for most calls (and can obtain from `agilicus-cli --issuer https://MYISSUER list-orgs`). The `MYISSUER` will typically be `auth.MYDOMAIN`, and you will see it as you sign-in to the administrative UI.  This API releases on Bearer-Token authentication. To obtain a valid bearer token you will need to Authenticate to an Issuer with OpenID Connect (a superset of OAUTH2).  Your \"issuer\" will look like https://auth.MYDOMAIN. For example, when you signed-up, if you said \"use my own domain name\" and assigned a CNAME of cloud.example.com, then your issuer would be https://auth.cloud.example.com.  If you selected \"use an Agilicus supplied domain name\", your issuer would look like https://auth.myorg.agilicus.cloud.  For test purposes you can use our [Python SDK](https://pypi.org/project/agilicus/) and run `agilicus-cli --issuer https://auth.MYDOMAIN get-token`.  This API may be used in any language runtime that supports OpenAPI 3.0, or, you may use our [Python SDK](https://pypi.org/project/agilicus/), our [Typescript SDK](https://www.npmjs.com/package/@agilicus/angular), or our [Golang SDK](https://git.agilicus.com/pub/sdk-go).  100% of the activities in our system our API-driven, from our web-admin, through our progressive web applications, to all internals: there is nothing that is not accessible.  For more information, see [developer resources](https://www.agilicus.com/developer).   # noqa: E501

    The version of the OpenAPI document: 2021.05.26
    Contact: dev@agilicus.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import agilicus_api
from agilicus_api.models.agent_connector import AgentConnector  # noqa: E501
from agilicus_api.rest import ApiException

class TestAgentConnector(unittest.TestCase):
    """AgentConnector unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test AgentConnector
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = agilicus_api.models.agent_connector.AgentConnector()  # noqa: E501
        if include_optional :
            return AgentConnector(
                metadata = {"id":"ac233asaksjfF","created":"2017-07-07T15:49:51.230+00:00","updated":"2020-01-27T12:19:46.430+00:00"}, 
                spec = agilicus_api.models.agent_connector_spec.AgentConnectorSpec(
                    name = '0', 
                    name_slug = 'a', 
                    org_id = '123', 
                    max_number_connections = 0, 
                    connection_uri = '0', 
                    service_account_required = True, 
                    local_authentication_enabled = False, ), 
                status = agilicus_api.models.agent_connector_status.AgentConnectorStatus(
                    application_services = [
                        agilicus_api.models.application_service.ApplicationService(
                            created = '2015-07-07T15:49:51.230+02:00', 
                            id = '123', 
                            name = 'my-local-service', 
                            org_id = '0', 
                            hostname = 'db.example.com', 
                            ipv4_addresses = [
                                '192.0.2.1'
                                ], 
                            name_resolution = 'static', 
                            port = 56, 
                            protocol = 'tcp', 
                            assignments = [
                                agilicus_api.models.application_service_assignment.ApplicationServiceAssignment(
                                    app_id = '0', 
                                    environment_name = '0', 
                                    org_id = '0', )
                                ], 
                            updated = '2015-07-07T15:49:51.230+02:00', 
                            service_type = 'vpn', 
                            service_protocol_type = 'ip', 
                            tls_enabled = True, 
                            tls_verify = True, 
                            connector_id = '123', 
                            connection_uri = '0', 
                            stats = {"metadata":{"creation_time":"2020-07-07T15:40:46.010Z","collection_time":"2020-07-07T15:40:44.020Z","receipt_time":"2020-07-07T15:40:46.020Z"},"overall_status":"good"}, )
                        ], 
                    service_account_id = '0', 
                    info = agilicus_api.models.agent_connector_info.AgentConnectorInfo(
                        local_authentication_enabled = False, 
                        connections_info = [
                            agilicus_api.models.agent_connector_connection_info.AgentConnectorConnectionInfo(
                                connection_uri = 'wss://my-app.example.com/.agilcus-agent', 
                                connection_location = 'my-app.example.com', 
                                connection_path = '/.agilicus-agent', 
                                connection_org_id = 'asda93oidl2xZ6', 
                                connection_app_name = 'my-app', 
                                is_an_auth_service = True, 
                                end_to_end_tls = True, 
                                max_number_connections = 0, 
                                ip_services = [
                                    agilicus_api.models.application_service.ApplicationService(
                                        created = '2015-07-07T15:49:51.230+02:00', 
                                        id = '123', 
                                        name = 'my-local-service', 
                                        org_id = '0', 
                                        hostname = 'db.example.com', 
                                        name_resolution = 'static', 
                                        port = 56, 
                                        protocol = 'tcp', 
                                        updated = '2015-07-07T15:49:51.230+02:00', 
                                        service_type = 'vpn', 
                                        service_protocol_type = 'ip', 
                                        tls_enabled = True, 
                                        tls_verify = True, 
                                        connector_id = '123', 
                                        connection_uri = '0', )
                                    ], 
                                file_share_services = [
                                    agilicus_api.models.file_share_service.FileShareService(
                                        metadata = {"id":"ac233asaksjfF","created":"2017-07-07T15:49:51.230+00:00","updated":"2020-01-27T12:19:46.430+00:00"}, 
                                        spec = agilicus_api.models.file_share_service_spec.FileShareServiceSpec(
                                            name = 'share1', 
                                            share_name = 'share1', 
                                            org_id = '123', 
                                            local_path = '/home/agilicus/public/share1', 
                                            connector_id = '123', 
                                            share_index = 1, 
                                            transport_end_to_end_tls = True, 
                                            transport_base_domain = '0', ), 
                                        status = agilicus_api.models.file_share_service_status.FileShareServiceStatus(
                                            share_base_app_name = '0', 
                                            instance_id = 'asdas9Gk4asdaTH', 
                                            instance_org_id = '39ddfGAaslts8qX', 
                                            share_uri = 'https://share-4.cloud.egov.city/', ), )
                                    ], 
                                application_config = agilicus_api.models.application_config.ApplicationConfig(
                                    authentication_config = agilicus_api.models.application_authentication_config.ApplicationAuthenticationConfig(
                                        application_handles_authentication = False, 
                                        session_secret = 'Gns5ZPCvXGjzrtB672HAxfoSQ0dmqriSgiQf6uEQSBU=', ), 
                                    oidc_config = agilicus_api.models.oidc_proxy_config.OIDCProxyConfig(
                                        headers = agilicus_api.models.oidc_proxy_header.OIDCProxyHeader(
                                            domain_substitution = agilicus_api.models.oidc_proxy_domain_substitution.OIDCProxyDomainSubstitution(
                                                standard_headers = agilicus_api.models.oidc_proxy_standard_header.OIDCProxyStandardHeader(
                                                    location = True, 
                                                    origin = True, 
                                                    host = True, ), 
                                                other_headers = [
                                                    agilicus_api.models.oidc_proxy_header_mapping.OIDCProxyHeaderMapping(
                                                        name = 'Accept-Encoding', 
                                                        value = '*', )
                                                    ], ), 
                                            header_overrides = agilicus_api.models.oidc_proxy_header_override.OIDCProxyHeaderOverride(
                                                request = agilicus_api.models.oidc_proxy_header_user_config.OIDCProxyHeaderUserConfig(
                                                    set = [
                                                        agilicus_api.models.oidc_proxy_header_mapping.OIDCProxyHeaderMapping(
                                                            name = 'Accept-Encoding', 
                                                            value = '*', )
                                                        ], 
                                                    add = [
                                                        agilicus_api.models.oidc_proxy_header_mapping.OIDCProxyHeaderMapping(
                                                            name = 'Accept-Encoding', 
                                                            value = '*', )
                                                        ], 
                                                    remove = [
                                                        agilicus_api.models.oidc_proxy_header_name.OIDCProxyHeaderName(
                                                            name = '0', )
                                                        ], ), 
                                                response = agilicus_api.models.oidc_proxy_header_user_config.OIDCProxyHeaderUserConfig(), ), ), 
                                        domain_mapping = agilicus_api.models.oidc_proxy_domain_mapping.OIDCProxyDomainMapping(
                                            primary_external_name = 'app-1.cloud.egov.city', 
                                            primary_internal_name = 'app-1.internal', 
                                            other_mappings = [
                                                agilicus_api.models.oidc_proxy_domain_name_mapping.OIDCProxyDomainNameMapping(
                                                    internal_name = 'local_test_app', 
                                                    external_name = 'app-1', )
                                                ], ), 
                                        auth = agilicus_api.models.oidc_auth_config.OIDCAuthConfig(
                                            auth_enabled = True, 
                                            client_id = 'admin-portal', 
                                            issuer = 'https://auth.cloud.egov.city', 
                                            logout_url = '/login/logout.cfm', 
                                            scopes = [
                                                agilicus_api.models.oidc_proxy_scope.OIDCProxyScope(
                                                    name = 'urn:agilicus:app:app-1:owner', )
                                                ], 
                                            path_config = agilicus_api.models.oidc_auth_path_config.OIDCAuthPathConfig(
                                                included_paths = [{"path":"/login"}], 
                                                excluded_paths = [{"path":"/logout"}], ), ), 
                                        content_manipulation = agilicus_api.models.oidc_proxy_content_manipulation.OIDCProxyContentManipulation(
                                            media_types = [
                                                agilicus_api.models.oidc_content_type.OIDCContentType(
                                                    name = 'text/css', )
                                                ], ), 
                                        upstream_config = agilicus_api.models.oidc_proxy_upstream_config.OIDCProxyUpstreamConfig(
                                            scheme = 'https', 
                                            hostname = 'httpbin.org', 
                                            port = 1, ), ), 
                                    security = agilicus_api.models.application_security.ApplicationSecurity(
                                        http = agilicus_api.models.http_security_settings.HTTPSecuritySettings(
                                            csp = agilicus_api.models.csp_settings.CSPSettings(
                                                enabled = True, 
                                                mode = 'enforce', 
                                                directives = [
                                                    agilicus_api.models.csp_directive.CSPDirective(
                                                        name = 'default-src', 
                                                        values = [
                                                            'https:'
                                                            ], )
                                                    ], ), 
                                            cors = agilicus_api.models.cors_settings.CORSSettings(
                                                enabled = True, 
                                                mode = 'overwrite', 
                                                origin_matching = 'me', 
                                                allow_origins = [
                                                    agilicus_api.models.cors_origin.CORSOrigin(
                                                        exact = 'https://other-site.agilicus.cloud', )
                                                    ], 
                                                allow_methods = [
                                                    'POST'
                                                    ], 
                                                allow_headers = [
                                                    'Destination'
                                                    ], 
                                                expose_headers = [
                                                    'Location'
                                                    ], 
                                                max_age_seconds = 3600, 
                                                allow_credentials = True, ), 
                                            hsts = agilicus_api.models.hsts_settings.HSTSSettings(
                                                enabled = True, 
                                                max_age_seconds = 63072000, 
                                                include_sub_domains = False, 
                                                preload = True, ), 
                                            xss_protection = agilicus_api.models.xss_settings.XSSSettings(
                                                enabled = True, 
                                                mode = 'block', 
                                                report_uri = 'https://my-site.agilicus.cloud/xss-reports', ), 
                                            certificate_transparency = agilicus_api.models.certificate_transparency_settings.CertificateTransparencySettings(
                                                enabled = True, 
                                                report_uri = 'https://my-site.agilicus.cloud/ct-reports', 
                                                enforce = True, 
                                                max_age_seconds = 63072000, ), 
                                            frame_options = agilicus_api.models.frame_options_settings.FrameOptionsSettings(
                                                enabled = True, 
                                                mode = 'deny', 
                                                override = 'ALLOW-FROM https://my-site.agilicus.cloud/', ), 
                                            content_type_options = agilicus_api.models.content_type_options_settings.ContentTypeOptionsSettings(
                                                enabled = True, 
                                                mode = 'nosniff', 
                                                override = 'SomeCustomSetting', ), 
                                            permitted_cross_domain_policies = agilicus_api.models.permitted_cross_domain_policies_settings.PermittedCrossDomainPoliciesSettings(
                                                enabled = True, 
                                                mode = 'clear', 
                                                override = 'master-only', ), 
                                            coep = agilicus_api.models.cross_origin_embedder_policy_settings.CrossOriginEmbedderPolicySettings(
                                                enabled = True, 
                                                mode = 'unsafe_none', 
                                                override = 'some-custom-setting', ), 
                                            coop = agilicus_api.models.cross_origin_opener_policy_settings.CrossOriginOpenerPolicySettings(
                                                enabled = True, 
                                                mode = 'unsafe_none', 
                                                override = 'some-custom-setting', ), 
                                            corp = agilicus_api.models.cross_origin_resource_policy_settings.CrossOriginResourcePolicySettings(
                                                enabled = True, 
                                                mode = 'same_site', 
                                                override = 'some-custom-setting', ), 
                                            referrer_policy = agilicus_api.models.referrer_policy_settings.ReferrerPolicySettings(
                                                enabled = True, 
                                                mode = 'no_referrer', 
                                                override = 'some-custom-setting', ), ), ), ), )
                            ], 
                        allow_list = {
                            'key' : [
                                agilicus_api.models.allow_rule_compiled.AllowRuleCompiled(
                                    paths = [
                                        '/.*'
                                        ], 
                                    methods = ["get"], 
                                    any_auth_user = True, )
                                ]
                            }, 
                        authz_public_key = 'apublickey', 
                        application_service_uri = '0', 
                        tunnel_uri = 'wss://agent-server.ca-1.agilicus.ca/.agilicus-agent/control', 
                        service_forwarders = [
                            agilicus_api.models.service_forwarder.ServiceForwarder(
                                spec = agilicus_api.models.service_forwarder_spec.ServiceForwarderSpec(
                                    name = '0', 
                                    org_id = '0', 
                                    bind_address = 'localhost', 
                                    port = 56, 
                                    protocol = 'tcp', 
                                    application_service_id = '0', 
                                    connector_id = '123', ), )
                            ], 
                        from_service_forwarders = [
                            agilicus_api.models.service_forwarder.ServiceForwarder(
                                spec = agilicus_api.models.service_forwarder_spec.ServiceForwarderSpec(
                                    name = '0', 
                                    org_id = '0', 
                                    bind_address = 'localhost', 
                                    port = 56, 
                                    protocol = 'tcp', 
                                    application_service_id = '0', 
                                    connector_id = '123', ), )
                            ], ), 
                    stats = {"metadata":{"creation_time":"2020-07-07T15:40:46.010Z","collection_time":"2020-07-07T15:40:44.020Z","receipt_time":"2020-07-07T15:40:46.020Z"},"overall_status":"good","system":{"os_version":"5.4.0","os_uptime":15623,"agent_uptime":15000,"agent_version":"v0.29.5 8e4fe7281219aa02dcc088154b7e7e3fc279f259","agent_connector_id":"as3asldlt3a","agent_connector_org_id":"dO04ldlfwe9a3l"},"transport":{"active_connections":5,"target_number_connections":5,"connection_start_count":10,"connection_stop_count":5}}, 
                    local_authentication = agilicus_api.models.agent_local_auth_info.AgentLocalAuthInfo(
                        org_id = '123', 
                        local_authentication_public_key = '-----BEGIN PRIVATE KEY-----\nActualKeyContents\n-----END PRIVATE KEY-----\n', ), )
            )
        else :
            return AgentConnector(
                spec = agilicus_api.models.agent_connector_spec.AgentConnectorSpec(
                    name = '0', 
                    name_slug = 'a', 
                    org_id = '123', 
                    max_number_connections = 0, 
                    connection_uri = '0', 
                    service_account_required = True, 
                    local_authentication_enabled = False, ),
        )

    def testAgentConnector(self):
        """Test AgentConnector"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
