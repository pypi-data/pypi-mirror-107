# coding: utf-8

"""
    splitit-web-api-public-sdk

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class FeeRates(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        '_from': 'int',
        'to': 'int',
        'merchant_value': 'float',
        'agent_value': 'float',
        'fee_rate_collection_id': 'int',
        'agent_fee_type': 'AgentFeeType'
    }

    attribute_map = {
        'id': 'Id',
        '_from': 'From',
        'to': 'To',
        'merchant_value': 'MerchantValue',
        'agent_value': 'AgentValue',
        'fee_rate_collection_id': 'FeeRateCollectionId',
        'agent_fee_type': 'AgentFeeType'
    }

    def __init__(self, id=None, _from=None, to=None, merchant_value=None, agent_value=None, fee_rate_collection_id=None, agent_fee_type=None):  # noqa: E501
        """FeeRates - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self.__from = None
        self._to = None
        self._merchant_value = None
        self._agent_value = None
        self._fee_rate_collection_id = None
        self._agent_fee_type = None
        self.discriminator = None

        self._id = id
        self.__from = _from
        self._to = to
        self._merchant_value = merchant_value
        self._agent_value = agent_value
        self._fee_rate_collection_id = fee_rate_collection_id
        self._agent_fee_type = agent_fee_type

    @property
    def id(self):
        """Gets the id of this FeeRates.  # noqa: E501


        :return: The id of this FeeRates.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this FeeRates.


        :param id: The id of this FeeRates.  # noqa: E501
        :type: int
        """
        
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def _from(self):
        """Gets the _from of this FeeRates.  # noqa: E501


        :return: The _from of this FeeRates.  # noqa: E501
        :rtype: int
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """Sets the _from of this FeeRates.


        :param _from: The _from of this FeeRates.  # noqa: E501
        :type: int
        """
        
        if _from is None:
            raise ValueError("Invalid value for `_from`, must not be `None`")  # noqa: E501

        self.__from = _from

    @property
    def to(self):
        """Gets the to of this FeeRates.  # noqa: E501


        :return: The to of this FeeRates.  # noqa: E501
        :rtype: int
        """
        return self._to

    @to.setter
    def to(self, to):
        """Sets the to of this FeeRates.


        :param to: The to of this FeeRates.  # noqa: E501
        :type: int
        """
        
        if to is None:
            raise ValueError("Invalid value for `to`, must not be `None`")  # noqa: E501

        self._to = to

    @property
    def merchant_value(self):
        """Gets the merchant_value of this FeeRates.  # noqa: E501


        :return: The merchant_value of this FeeRates.  # noqa: E501
        :rtype: float
        """
        return self._merchant_value

    @merchant_value.setter
    def merchant_value(self, merchant_value):
        """Sets the merchant_value of this FeeRates.


        :param merchant_value: The merchant_value of this FeeRates.  # noqa: E501
        :type: float
        """
        
        if merchant_value is None:
            raise ValueError("Invalid value for `merchant_value`, must not be `None`")  # noqa: E501

        self._merchant_value = merchant_value

    @property
    def agent_value(self):
        """Gets the agent_value of this FeeRates.  # noqa: E501


        :return: The agent_value of this FeeRates.  # noqa: E501
        :rtype: float
        """
        return self._agent_value

    @agent_value.setter
    def agent_value(self, agent_value):
        """Sets the agent_value of this FeeRates.


        :param agent_value: The agent_value of this FeeRates.  # noqa: E501
        :type: float
        """
        
        if agent_value is None:
            raise ValueError("Invalid value for `agent_value`, must not be `None`")  # noqa: E501

        self._agent_value = agent_value

    @property
    def fee_rate_collection_id(self):
        """Gets the fee_rate_collection_id of this FeeRates.  # noqa: E501


        :return: The fee_rate_collection_id of this FeeRates.  # noqa: E501
        :rtype: int
        """
        return self._fee_rate_collection_id

    @fee_rate_collection_id.setter
    def fee_rate_collection_id(self, fee_rate_collection_id):
        """Sets the fee_rate_collection_id of this FeeRates.


        :param fee_rate_collection_id: The fee_rate_collection_id of this FeeRates.  # noqa: E501
        :type: int
        """
        
        if fee_rate_collection_id is None:
            raise ValueError("Invalid value for `fee_rate_collection_id`, must not be `None`")  # noqa: E501

        self._fee_rate_collection_id = fee_rate_collection_id

    @property
    def agent_fee_type(self):
        """Gets the agent_fee_type of this FeeRates.  # noqa: E501


        :return: The agent_fee_type of this FeeRates.  # noqa: E501
        :rtype: AgentFeeType
        """
        return self._agent_fee_type

    @agent_fee_type.setter
    def agent_fee_type(self, agent_fee_type):
        """Sets the agent_fee_type of this FeeRates.


        :param agent_fee_type: The agent_fee_type of this FeeRates.  # noqa: E501
        :type: AgentFeeType
        """
        
        if agent_fee_type is None:
            raise ValueError("Invalid value for `agent_fee_type`, must not be `None`")  # noqa: E501

        self._agent_fee_type = agent_fee_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FeeRates, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FeeRates):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
