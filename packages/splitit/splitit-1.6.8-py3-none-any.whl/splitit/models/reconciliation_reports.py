# coding: utf-8

"""
    splitit-web-api-public-sdk

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ReconciliationReports(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        '_from': 'datetime',
        'to': 'datetime',
        'terminal_id': 'int',
        'is_identical': 'bool',
        'is_daily': 'bool',
        'terminal': 'Terminals',
        'reconciliation_report_items': 'list[ReconciliationReportItems]'
    }

    attribute_map = {
        'id': 'Id',
        '_from': 'From',
        'to': 'To',
        'terminal_id': 'TerminalId',
        'is_identical': 'IsIdentical',
        'is_daily': 'IsDaily',
        'terminal': 'Terminal',
        'reconciliation_report_items': 'ReconciliationReportItems'
    }

    def __init__(self, id=None, _from=None, to=None, terminal_id=None, is_identical=None, is_daily=None, terminal=None, reconciliation_report_items=None):  # noqa: E501
        """ReconciliationReports - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self.__from = None
        self._to = None
        self._terminal_id = None
        self._is_identical = None
        self._is_daily = None
        self._terminal = None
        self._reconciliation_report_items = None
        self.discriminator = None

        self._id = id
        self.__from = _from
        self._to = to
        self._terminal_id = terminal_id
        self._is_identical = is_identical
        self._is_daily = is_daily
        if terminal is not None:
            self._terminal = terminal
        if reconciliation_report_items is not None:
            self._reconciliation_report_items = reconciliation_report_items

    @property
    def id(self):
        """Gets the id of this ReconciliationReports.  # noqa: E501


        :return: The id of this ReconciliationReports.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ReconciliationReports.


        :param id: The id of this ReconciliationReports.  # noqa: E501
        :type: int
        """
        
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def _from(self):
        """Gets the _from of this ReconciliationReports.  # noqa: E501


        :return: The _from of this ReconciliationReports.  # noqa: E501
        :rtype: datetime
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """Sets the _from of this ReconciliationReports.


        :param _from: The _from of this ReconciliationReports.  # noqa: E501
        :type: datetime
        """
        
        if _from is None:
            raise ValueError("Invalid value for `_from`, must not be `None`")  # noqa: E501

        self.__from = _from

    @property
    def to(self):
        """Gets the to of this ReconciliationReports.  # noqa: E501


        :return: The to of this ReconciliationReports.  # noqa: E501
        :rtype: datetime
        """
        return self._to

    @to.setter
    def to(self, to):
        """Sets the to of this ReconciliationReports.


        :param to: The to of this ReconciliationReports.  # noqa: E501
        :type: datetime
        """
        
        if to is None:
            raise ValueError("Invalid value for `to`, must not be `None`")  # noqa: E501

        self._to = to

    @property
    def terminal_id(self):
        """Gets the terminal_id of this ReconciliationReports.  # noqa: E501


        :return: The terminal_id of this ReconciliationReports.  # noqa: E501
        :rtype: int
        """
        return self._terminal_id

    @terminal_id.setter
    def terminal_id(self, terminal_id):
        """Sets the terminal_id of this ReconciliationReports.


        :param terminal_id: The terminal_id of this ReconciliationReports.  # noqa: E501
        :type: int
        """
        
        if terminal_id is None:
            raise ValueError("Invalid value for `terminal_id`, must not be `None`")  # noqa: E501

        self._terminal_id = terminal_id

    @property
    def is_identical(self):
        """Gets the is_identical of this ReconciliationReports.  # noqa: E501


        :return: The is_identical of this ReconciliationReports.  # noqa: E501
        :rtype: bool
        """
        return self._is_identical

    @is_identical.setter
    def is_identical(self, is_identical):
        """Sets the is_identical of this ReconciliationReports.


        :param is_identical: The is_identical of this ReconciliationReports.  # noqa: E501
        :type: bool
        """
        is_identical = bool(is_identical)
        if is_identical is None:
            raise ValueError("Invalid value for `is_identical`, must not be `None`")  # noqa: E501

        self._is_identical = is_identical

    @property
    def is_daily(self):
        """Gets the is_daily of this ReconciliationReports.  # noqa: E501


        :return: The is_daily of this ReconciliationReports.  # noqa: E501
        :rtype: bool
        """
        return self._is_daily

    @is_daily.setter
    def is_daily(self, is_daily):
        """Sets the is_daily of this ReconciliationReports.


        :param is_daily: The is_daily of this ReconciliationReports.  # noqa: E501
        :type: bool
        """
        is_daily = bool(is_daily)
        if is_daily is None:
            raise ValueError("Invalid value for `is_daily`, must not be `None`")  # noqa: E501

        self._is_daily = is_daily

    @property
    def terminal(self):
        """Gets the terminal of this ReconciliationReports.  # noqa: E501


        :return: The terminal of this ReconciliationReports.  # noqa: E501
        :rtype: Terminals
        """
        return self._terminal

    @terminal.setter
    def terminal(self, terminal):
        """Sets the terminal of this ReconciliationReports.


        :param terminal: The terminal of this ReconciliationReports.  # noqa: E501
        :type: Terminals
        """

        self._terminal = terminal

    @property
    def reconciliation_report_items(self):
        """Gets the reconciliation_report_items of this ReconciliationReports.  # noqa: E501


        :return: The reconciliation_report_items of this ReconciliationReports.  # noqa: E501
        :rtype: list[ReconciliationReportItems]
        """
        return self._reconciliation_report_items

    @reconciliation_report_items.setter
    def reconciliation_report_items(self, reconciliation_report_items):
        """Sets the reconciliation_report_items of this ReconciliationReports.


        :param reconciliation_report_items: The reconciliation_report_items of this ReconciliationReports.  # noqa: E501
        :type: list[ReconciliationReportItems]
        """

        self._reconciliation_report_items = reconciliation_report_items

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ReconciliationReports, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReconciliationReports):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
