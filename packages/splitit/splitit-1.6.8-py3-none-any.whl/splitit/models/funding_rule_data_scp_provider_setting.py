# coding: utf-8

"""
    splitit-web-api-public-sdk

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class FundingRuleDataScpProviderSetting(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'scp_provider_id': 'int',
        'funding_rule_data_id': 'int',
        'credit_line': 'float',
        'effective_scp_revenue_share_percent': 'float',
        'effective_scp_variable_cost_apr': 'float',
        'is_secondary': 'bool',
        'rotation_weight': 'float',
        'is_enabled': 'bool'
    }

    attribute_map = {
        'id': 'Id',
        'scp_provider_id': 'ScpProviderId',
        'funding_rule_data_id': 'FundingRuleDataId',
        'credit_line': 'CreditLine',
        'effective_scp_revenue_share_percent': 'EffectiveScpRevenueSharePercent',
        'effective_scp_variable_cost_apr': 'EffectiveScpVariableCostApr',
        'is_secondary': 'IsSecondary',
        'rotation_weight': 'RotationWeight',
        'is_enabled': 'IsEnabled'
    }

    def __init__(self, id=None, scp_provider_id=None, funding_rule_data_id=None, credit_line=None, effective_scp_revenue_share_percent=None, effective_scp_variable_cost_apr=None, is_secondary=None, rotation_weight=None, is_enabled=None):  # noqa: E501
        """FundingRuleDataScpProviderSetting - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._scp_provider_id = None
        self._funding_rule_data_id = None
        self._credit_line = None
        self._effective_scp_revenue_share_percent = None
        self._effective_scp_variable_cost_apr = None
        self._is_secondary = None
        self._rotation_weight = None
        self._is_enabled = None
        self.discriminator = None

        self._id = id
        self._scp_provider_id = scp_provider_id
        self._funding_rule_data_id = funding_rule_data_id
        self._credit_line = credit_line
        self._effective_scp_revenue_share_percent = effective_scp_revenue_share_percent
        self._effective_scp_variable_cost_apr = effective_scp_variable_cost_apr
        self._is_secondary = is_secondary
        self._rotation_weight = rotation_weight
        self._is_enabled = is_enabled

    @property
    def id(self):
        """Gets the id of this FundingRuleDataScpProviderSetting.  # noqa: E501


        :return: The id of this FundingRuleDataScpProviderSetting.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this FundingRuleDataScpProviderSetting.


        :param id: The id of this FundingRuleDataScpProviderSetting.  # noqa: E501
        :type: int
        """
        
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def scp_provider_id(self):
        """Gets the scp_provider_id of this FundingRuleDataScpProviderSetting.  # noqa: E501


        :return: The scp_provider_id of this FundingRuleDataScpProviderSetting.  # noqa: E501
        :rtype: int
        """
        return self._scp_provider_id

    @scp_provider_id.setter
    def scp_provider_id(self, scp_provider_id):
        """Sets the scp_provider_id of this FundingRuleDataScpProviderSetting.


        :param scp_provider_id: The scp_provider_id of this FundingRuleDataScpProviderSetting.  # noqa: E501
        :type: int
        """
        
        if scp_provider_id is None:
            raise ValueError("Invalid value for `scp_provider_id`, must not be `None`")  # noqa: E501

        self._scp_provider_id = scp_provider_id

    @property
    def funding_rule_data_id(self):
        """Gets the funding_rule_data_id of this FundingRuleDataScpProviderSetting.  # noqa: E501


        :return: The funding_rule_data_id of this FundingRuleDataScpProviderSetting.  # noqa: E501
        :rtype: int
        """
        return self._funding_rule_data_id

    @funding_rule_data_id.setter
    def funding_rule_data_id(self, funding_rule_data_id):
        """Sets the funding_rule_data_id of this FundingRuleDataScpProviderSetting.


        :param funding_rule_data_id: The funding_rule_data_id of this FundingRuleDataScpProviderSetting.  # noqa: E501
        :type: int
        """
        
        if funding_rule_data_id is None:
            raise ValueError("Invalid value for `funding_rule_data_id`, must not be `None`")  # noqa: E501

        self._funding_rule_data_id = funding_rule_data_id

    @property
    def credit_line(self):
        """Gets the credit_line of this FundingRuleDataScpProviderSetting.  # noqa: E501


        :return: The credit_line of this FundingRuleDataScpProviderSetting.  # noqa: E501
        :rtype: float
        """
        return self._credit_line

    @credit_line.setter
    def credit_line(self, credit_line):
        """Sets the credit_line of this FundingRuleDataScpProviderSetting.


        :param credit_line: The credit_line of this FundingRuleDataScpProviderSetting.  # noqa: E501
        :type: float
        """
        
        if credit_line is None:
            raise ValueError("Invalid value for `credit_line`, must not be `None`")  # noqa: E501

        self._credit_line = credit_line

    @property
    def effective_scp_revenue_share_percent(self):
        """Gets the effective_scp_revenue_share_percent of this FundingRuleDataScpProviderSetting.  # noqa: E501


        :return: The effective_scp_revenue_share_percent of this FundingRuleDataScpProviderSetting.  # noqa: E501
        :rtype: float
        """
        return self._effective_scp_revenue_share_percent

    @effective_scp_revenue_share_percent.setter
    def effective_scp_revenue_share_percent(self, effective_scp_revenue_share_percent):
        """Sets the effective_scp_revenue_share_percent of this FundingRuleDataScpProviderSetting.


        :param effective_scp_revenue_share_percent: The effective_scp_revenue_share_percent of this FundingRuleDataScpProviderSetting.  # noqa: E501
        :type: float
        """
        
        if effective_scp_revenue_share_percent is None:
            raise ValueError("Invalid value for `effective_scp_revenue_share_percent`, must not be `None`")  # noqa: E501

        self._effective_scp_revenue_share_percent = effective_scp_revenue_share_percent

    @property
    def effective_scp_variable_cost_apr(self):
        """Gets the effective_scp_variable_cost_apr of this FundingRuleDataScpProviderSetting.  # noqa: E501


        :return: The effective_scp_variable_cost_apr of this FundingRuleDataScpProviderSetting.  # noqa: E501
        :rtype: float
        """
        return self._effective_scp_variable_cost_apr

    @effective_scp_variable_cost_apr.setter
    def effective_scp_variable_cost_apr(self, effective_scp_variable_cost_apr):
        """Sets the effective_scp_variable_cost_apr of this FundingRuleDataScpProviderSetting.


        :param effective_scp_variable_cost_apr: The effective_scp_variable_cost_apr of this FundingRuleDataScpProviderSetting.  # noqa: E501
        :type: float
        """
        
        if effective_scp_variable_cost_apr is None:
            raise ValueError("Invalid value for `effective_scp_variable_cost_apr`, must not be `None`")  # noqa: E501

        self._effective_scp_variable_cost_apr = effective_scp_variable_cost_apr

    @property
    def is_secondary(self):
        """Gets the is_secondary of this FundingRuleDataScpProviderSetting.  # noqa: E501


        :return: The is_secondary of this FundingRuleDataScpProviderSetting.  # noqa: E501
        :rtype: bool
        """
        return self._is_secondary

    @is_secondary.setter
    def is_secondary(self, is_secondary):
        """Sets the is_secondary of this FundingRuleDataScpProviderSetting.


        :param is_secondary: The is_secondary of this FundingRuleDataScpProviderSetting.  # noqa: E501
        :type: bool
        """
        is_secondary = bool(is_secondary)
        if is_secondary is None:
            raise ValueError("Invalid value for `is_secondary`, must not be `None`")  # noqa: E501

        self._is_secondary = is_secondary

    @property
    def rotation_weight(self):
        """Gets the rotation_weight of this FundingRuleDataScpProviderSetting.  # noqa: E501


        :return: The rotation_weight of this FundingRuleDataScpProviderSetting.  # noqa: E501
        :rtype: float
        """
        return self._rotation_weight

    @rotation_weight.setter
    def rotation_weight(self, rotation_weight):
        """Sets the rotation_weight of this FundingRuleDataScpProviderSetting.


        :param rotation_weight: The rotation_weight of this FundingRuleDataScpProviderSetting.  # noqa: E501
        :type: float
        """
        
        if rotation_weight is None:
            raise ValueError("Invalid value for `rotation_weight`, must not be `None`")  # noqa: E501

        self._rotation_weight = rotation_weight

    @property
    def is_enabled(self):
        """Gets the is_enabled of this FundingRuleDataScpProviderSetting.  # noqa: E501


        :return: The is_enabled of this FundingRuleDataScpProviderSetting.  # noqa: E501
        :rtype: bool
        """
        return self._is_enabled

    @is_enabled.setter
    def is_enabled(self, is_enabled):
        """Sets the is_enabled of this FundingRuleDataScpProviderSetting.


        :param is_enabled: The is_enabled of this FundingRuleDataScpProviderSetting.  # noqa: E501
        :type: bool
        """
        is_enabled = bool(is_enabled)
        if is_enabled is None:
            raise ValueError("Invalid value for `is_enabled`, must not be `None`")  # noqa: E501

        self._is_enabled = is_enabled

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FundingRuleDataScpProviderSetting, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FundingRuleDataScpProviderSetting):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
