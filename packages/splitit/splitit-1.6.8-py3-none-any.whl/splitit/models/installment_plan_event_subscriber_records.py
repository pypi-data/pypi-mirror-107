# coding: utf-8

"""
    splitit-web-api-public-sdk

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class InstallmentPlanEventSubscriberRecords(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'installment_plan_event_id': 'int',
        'serialized_installment_plan_event_message': 'str',
        'is_acknowledged': 'bool',
        'subscriber_type': 'str',
        'installment_plan_event': 'InstallmentPlanEvents',
        'installment_plan_event_subscriber_record_send_logs': 'list[InstallmentPlanEventSubscriberRecordSendLogs]'
    }

    attribute_map = {
        'id': 'Id',
        'installment_plan_event_id': 'InstallmentPlanEventId',
        'serialized_installment_plan_event_message': 'SerializedInstallmentPlanEventMessage',
        'is_acknowledged': 'IsAcknowledged',
        'subscriber_type': 'SubscriberType',
        'installment_plan_event': 'InstallmentPlanEvent',
        'installment_plan_event_subscriber_record_send_logs': 'InstallmentPlanEventSubscriberRecordSendLogs'
    }

    def __init__(self, id=None, installment_plan_event_id=None, serialized_installment_plan_event_message=None, is_acknowledged=None, subscriber_type=None, installment_plan_event=None, installment_plan_event_subscriber_record_send_logs=None):  # noqa: E501
        """InstallmentPlanEventSubscriberRecords - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._installment_plan_event_id = None
        self._serialized_installment_plan_event_message = None
        self._is_acknowledged = None
        self._subscriber_type = None
        self._installment_plan_event = None
        self._installment_plan_event_subscriber_record_send_logs = None
        self.discriminator = None

        self._id = id
        self._installment_plan_event_id = installment_plan_event_id
        if serialized_installment_plan_event_message is not None:
            self._serialized_installment_plan_event_message = serialized_installment_plan_event_message
        self._is_acknowledged = is_acknowledged
        if subscriber_type is not None:
            self._subscriber_type = subscriber_type
        if installment_plan_event is not None:
            self._installment_plan_event = installment_plan_event
        if installment_plan_event_subscriber_record_send_logs is not None:
            self._installment_plan_event_subscriber_record_send_logs = installment_plan_event_subscriber_record_send_logs

    @property
    def id(self):
        """Gets the id of this InstallmentPlanEventSubscriberRecords.  # noqa: E501


        :return: The id of this InstallmentPlanEventSubscriberRecords.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InstallmentPlanEventSubscriberRecords.


        :param id: The id of this InstallmentPlanEventSubscriberRecords.  # noqa: E501
        :type: int
        """
        
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def installment_plan_event_id(self):
        """Gets the installment_plan_event_id of this InstallmentPlanEventSubscriberRecords.  # noqa: E501


        :return: The installment_plan_event_id of this InstallmentPlanEventSubscriberRecords.  # noqa: E501
        :rtype: int
        """
        return self._installment_plan_event_id

    @installment_plan_event_id.setter
    def installment_plan_event_id(self, installment_plan_event_id):
        """Sets the installment_plan_event_id of this InstallmentPlanEventSubscriberRecords.


        :param installment_plan_event_id: The installment_plan_event_id of this InstallmentPlanEventSubscriberRecords.  # noqa: E501
        :type: int
        """
        
        if installment_plan_event_id is None:
            raise ValueError("Invalid value for `installment_plan_event_id`, must not be `None`")  # noqa: E501

        self._installment_plan_event_id = installment_plan_event_id

    @property
    def serialized_installment_plan_event_message(self):
        """Gets the serialized_installment_plan_event_message of this InstallmentPlanEventSubscriberRecords.  # noqa: E501


        :return: The serialized_installment_plan_event_message of this InstallmentPlanEventSubscriberRecords.  # noqa: E501
        :rtype: str
        """
        return self._serialized_installment_plan_event_message

    @serialized_installment_plan_event_message.setter
    def serialized_installment_plan_event_message(self, serialized_installment_plan_event_message):
        """Sets the serialized_installment_plan_event_message of this InstallmentPlanEventSubscriberRecords.


        :param serialized_installment_plan_event_message: The serialized_installment_plan_event_message of this InstallmentPlanEventSubscriberRecords.  # noqa: E501
        :type: str
        """

        self._serialized_installment_plan_event_message = serialized_installment_plan_event_message

    @property
    def is_acknowledged(self):
        """Gets the is_acknowledged of this InstallmentPlanEventSubscriberRecords.  # noqa: E501


        :return: The is_acknowledged of this InstallmentPlanEventSubscriberRecords.  # noqa: E501
        :rtype: bool
        """
        return self._is_acknowledged

    @is_acknowledged.setter
    def is_acknowledged(self, is_acknowledged):
        """Sets the is_acknowledged of this InstallmentPlanEventSubscriberRecords.


        :param is_acknowledged: The is_acknowledged of this InstallmentPlanEventSubscriberRecords.  # noqa: E501
        :type: bool
        """
        is_acknowledged = bool(is_acknowledged)
        if is_acknowledged is None:
            raise ValueError("Invalid value for `is_acknowledged`, must not be `None`")  # noqa: E501

        self._is_acknowledged = is_acknowledged

    @property
    def subscriber_type(self):
        """Gets the subscriber_type of this InstallmentPlanEventSubscriberRecords.  # noqa: E501


        :return: The subscriber_type of this InstallmentPlanEventSubscriberRecords.  # noqa: E501
        :rtype: str
        """
        return self._subscriber_type

    @subscriber_type.setter
    def subscriber_type(self, subscriber_type):
        """Sets the subscriber_type of this InstallmentPlanEventSubscriberRecords.


        :param subscriber_type: The subscriber_type of this InstallmentPlanEventSubscriberRecords.  # noqa: E501
        :type: str
        """

        self._subscriber_type = subscriber_type

    @property
    def installment_plan_event(self):
        """Gets the installment_plan_event of this InstallmentPlanEventSubscriberRecords.  # noqa: E501


        :return: The installment_plan_event of this InstallmentPlanEventSubscriberRecords.  # noqa: E501
        :rtype: InstallmentPlanEvents
        """
        return self._installment_plan_event

    @installment_plan_event.setter
    def installment_plan_event(self, installment_plan_event):
        """Sets the installment_plan_event of this InstallmentPlanEventSubscriberRecords.


        :param installment_plan_event: The installment_plan_event of this InstallmentPlanEventSubscriberRecords.  # noqa: E501
        :type: InstallmentPlanEvents
        """

        self._installment_plan_event = installment_plan_event

    @property
    def installment_plan_event_subscriber_record_send_logs(self):
        """Gets the installment_plan_event_subscriber_record_send_logs of this InstallmentPlanEventSubscriberRecords.  # noqa: E501


        :return: The installment_plan_event_subscriber_record_send_logs of this InstallmentPlanEventSubscriberRecords.  # noqa: E501
        :rtype: list[InstallmentPlanEventSubscriberRecordSendLogs]
        """
        return self._installment_plan_event_subscriber_record_send_logs

    @installment_plan_event_subscriber_record_send_logs.setter
    def installment_plan_event_subscriber_record_send_logs(self, installment_plan_event_subscriber_record_send_logs):
        """Sets the installment_plan_event_subscriber_record_send_logs of this InstallmentPlanEventSubscriberRecords.


        :param installment_plan_event_subscriber_record_send_logs: The installment_plan_event_subscriber_record_send_logs of this InstallmentPlanEventSubscriberRecords.  # noqa: E501
        :type: list[InstallmentPlanEventSubscriberRecordSendLogs]
        """

        self._installment_plan_event_subscriber_record_send_logs = installment_plan_event_subscriber_record_send_logs

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InstallmentPlanEventSubscriberRecords, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InstallmentPlanEventSubscriberRecords):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
