# coding: utf-8

"""
    splitit-web-api-public-sdk

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class CardStateLogs(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'card_id': 'int',
        'expiration_month': 'int',
        'expiration_year': 'int',
        'card_holder_name': 'str',
        'address_data_address_line': 'str',
        'address_data_zip': 'str',
        'version': 'int',
        'is_verified': 'bool',
        'change_source': 'str',
        'address_data_address_line2': 'str',
        'address_data_city': 'str',
        'address_data_country_id': 'int',
        'address_data_state_id': 'int',
        'address_data_legacy_full_address_line': 'str',
        'card': 'Cards',
        'country': 'Countries',
        'state': 'CountrySubdivisions',
        'installments': 'list[Installments]',
        're_authorizations': 'list[ReAuthorizations]',
        'address_data': 'AddressData2'
    }

    attribute_map = {
        'id': 'Id',
        'card_id': 'CardId',
        'expiration_month': 'ExpirationMonth',
        'expiration_year': 'ExpirationYear',
        'card_holder_name': 'CardHolderName',
        'address_data_address_line': 'AddressDataAddressLine',
        'address_data_zip': 'AddressDataZip',
        'version': 'Version',
        'is_verified': 'IsVerified',
        'change_source': 'ChangeSource',
        'address_data_address_line2': 'AddressDataAddressLine2',
        'address_data_city': 'AddressDataCity',
        'address_data_country_id': 'AddressDataCountryId',
        'address_data_state_id': 'AddressDataStateId',
        'address_data_legacy_full_address_line': 'AddressDataLegacyFullAddressLine',
        'card': 'Card',
        'country': 'Country',
        'state': 'State',
        'installments': 'Installments',
        're_authorizations': 'ReAuthorizations',
        'address_data': 'AddressData'
    }

    def __init__(self, id=None, card_id=None, expiration_month=None, expiration_year=None, card_holder_name=None, address_data_address_line=None, address_data_zip=None, version=None, is_verified=None, change_source=None, address_data_address_line2=None, address_data_city=None, address_data_country_id=None, address_data_state_id=None, address_data_legacy_full_address_line=None, card=None, country=None, state=None, installments=None, re_authorizations=None, address_data=None):  # noqa: E501
        """CardStateLogs - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._card_id = None
        self._expiration_month = None
        self._expiration_year = None
        self._card_holder_name = None
        self._address_data_address_line = None
        self._address_data_zip = None
        self._version = None
        self._is_verified = None
        self._change_source = None
        self._address_data_address_line2 = None
        self._address_data_city = None
        self._address_data_country_id = None
        self._address_data_state_id = None
        self._address_data_legacy_full_address_line = None
        self._card = None
        self._country = None
        self._state = None
        self._installments = None
        self._re_authorizations = None
        self._address_data = None
        self.discriminator = None

        self._id = id
        self._card_id = card_id
        self._expiration_month = expiration_month
        self._expiration_year = expiration_year
        if card_holder_name is not None:
            self._card_holder_name = card_holder_name
        if address_data_address_line is not None:
            self._address_data_address_line = address_data_address_line
        if address_data_zip is not None:
            self._address_data_zip = address_data_zip
        self._version = version
        self._is_verified = is_verified
        if change_source is not None:
            self._change_source = change_source
        if address_data_address_line2 is not None:
            self._address_data_address_line2 = address_data_address_line2
        if address_data_city is not None:
            self._address_data_city = address_data_city
        if address_data_country_id is not None:
            self._address_data_country_id = address_data_country_id
        if address_data_state_id is not None:
            self._address_data_state_id = address_data_state_id
        if address_data_legacy_full_address_line is not None:
            self._address_data_legacy_full_address_line = address_data_legacy_full_address_line
        if card is not None:
            self._card = card
        if country is not None:
            self._country = country
        if state is not None:
            self._state = state
        if installments is not None:
            self._installments = installments
        if re_authorizations is not None:
            self._re_authorizations = re_authorizations
        if address_data is not None:
            self._address_data = address_data

    @property
    def id(self):
        """Gets the id of this CardStateLogs.  # noqa: E501


        :return: The id of this CardStateLogs.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CardStateLogs.


        :param id: The id of this CardStateLogs.  # noqa: E501
        :type: int
        """
        
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def card_id(self):
        """Gets the card_id of this CardStateLogs.  # noqa: E501


        :return: The card_id of this CardStateLogs.  # noqa: E501
        :rtype: int
        """
        return self._card_id

    @card_id.setter
    def card_id(self, card_id):
        """Sets the card_id of this CardStateLogs.


        :param card_id: The card_id of this CardStateLogs.  # noqa: E501
        :type: int
        """
        
        if card_id is None:
            raise ValueError("Invalid value for `card_id`, must not be `None`")  # noqa: E501

        self._card_id = card_id

    @property
    def expiration_month(self):
        """Gets the expiration_month of this CardStateLogs.  # noqa: E501


        :return: The expiration_month of this CardStateLogs.  # noqa: E501
        :rtype: int
        """
        return self._expiration_month

    @expiration_month.setter
    def expiration_month(self, expiration_month):
        """Sets the expiration_month of this CardStateLogs.


        :param expiration_month: The expiration_month of this CardStateLogs.  # noqa: E501
        :type: int
        """
        
        if expiration_month is None:
            raise ValueError("Invalid value for `expiration_month`, must not be `None`")  # noqa: E501

        self._expiration_month = expiration_month

    @property
    def expiration_year(self):
        """Gets the expiration_year of this CardStateLogs.  # noqa: E501


        :return: The expiration_year of this CardStateLogs.  # noqa: E501
        :rtype: int
        """
        return self._expiration_year

    @expiration_year.setter
    def expiration_year(self, expiration_year):
        """Sets the expiration_year of this CardStateLogs.


        :param expiration_year: The expiration_year of this CardStateLogs.  # noqa: E501
        :type: int
        """
        
        if expiration_year is None:
            raise ValueError("Invalid value for `expiration_year`, must not be `None`")  # noqa: E501

        self._expiration_year = expiration_year

    @property
    def card_holder_name(self):
        """Gets the card_holder_name of this CardStateLogs.  # noqa: E501


        :return: The card_holder_name of this CardStateLogs.  # noqa: E501
        :rtype: str
        """
        return self._card_holder_name

    @card_holder_name.setter
    def card_holder_name(self, card_holder_name):
        """Sets the card_holder_name of this CardStateLogs.


        :param card_holder_name: The card_holder_name of this CardStateLogs.  # noqa: E501
        :type: str
        """

        self._card_holder_name = card_holder_name

    @property
    def address_data_address_line(self):
        """Gets the address_data_address_line of this CardStateLogs.  # noqa: E501


        :return: The address_data_address_line of this CardStateLogs.  # noqa: E501
        :rtype: str
        """
        return self._address_data_address_line

    @address_data_address_line.setter
    def address_data_address_line(self, address_data_address_line):
        """Sets the address_data_address_line of this CardStateLogs.


        :param address_data_address_line: The address_data_address_line of this CardStateLogs.  # noqa: E501
        :type: str
        """

        self._address_data_address_line = address_data_address_line

    @property
    def address_data_zip(self):
        """Gets the address_data_zip of this CardStateLogs.  # noqa: E501


        :return: The address_data_zip of this CardStateLogs.  # noqa: E501
        :rtype: str
        """
        return self._address_data_zip

    @address_data_zip.setter
    def address_data_zip(self, address_data_zip):
        """Sets the address_data_zip of this CardStateLogs.


        :param address_data_zip: The address_data_zip of this CardStateLogs.  # noqa: E501
        :type: str
        """

        self._address_data_zip = address_data_zip

    @property
    def version(self):
        """Gets the version of this CardStateLogs.  # noqa: E501


        :return: The version of this CardStateLogs.  # noqa: E501
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this CardStateLogs.


        :param version: The version of this CardStateLogs.  # noqa: E501
        :type: int
        """
        
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")  # noqa: E501

        self._version = version

    @property
    def is_verified(self):
        """Gets the is_verified of this CardStateLogs.  # noqa: E501


        :return: The is_verified of this CardStateLogs.  # noqa: E501
        :rtype: bool
        """
        return self._is_verified

    @is_verified.setter
    def is_verified(self, is_verified):
        """Sets the is_verified of this CardStateLogs.


        :param is_verified: The is_verified of this CardStateLogs.  # noqa: E501
        :type: bool
        """
        is_verified = bool(is_verified)
        if is_verified is None:
            raise ValueError("Invalid value for `is_verified`, must not be `None`")  # noqa: E501

        self._is_verified = is_verified

    @property
    def change_source(self):
        """Gets the change_source of this CardStateLogs.  # noqa: E501


        :return: The change_source of this CardStateLogs.  # noqa: E501
        :rtype: str
        """
        return self._change_source

    @change_source.setter
    def change_source(self, change_source):
        """Sets the change_source of this CardStateLogs.


        :param change_source: The change_source of this CardStateLogs.  # noqa: E501
        :type: str
        """

        self._change_source = change_source

    @property
    def address_data_address_line2(self):
        """Gets the address_data_address_line2 of this CardStateLogs.  # noqa: E501


        :return: The address_data_address_line2 of this CardStateLogs.  # noqa: E501
        :rtype: str
        """
        return self._address_data_address_line2

    @address_data_address_line2.setter
    def address_data_address_line2(self, address_data_address_line2):
        """Sets the address_data_address_line2 of this CardStateLogs.


        :param address_data_address_line2: The address_data_address_line2 of this CardStateLogs.  # noqa: E501
        :type: str
        """

        self._address_data_address_line2 = address_data_address_line2

    @property
    def address_data_city(self):
        """Gets the address_data_city of this CardStateLogs.  # noqa: E501


        :return: The address_data_city of this CardStateLogs.  # noqa: E501
        :rtype: str
        """
        return self._address_data_city

    @address_data_city.setter
    def address_data_city(self, address_data_city):
        """Sets the address_data_city of this CardStateLogs.


        :param address_data_city: The address_data_city of this CardStateLogs.  # noqa: E501
        :type: str
        """

        self._address_data_city = address_data_city

    @property
    def address_data_country_id(self):
        """Gets the address_data_country_id of this CardStateLogs.  # noqa: E501


        :return: The address_data_country_id of this CardStateLogs.  # noqa: E501
        :rtype: int
        """
        return self._address_data_country_id

    @address_data_country_id.setter
    def address_data_country_id(self, address_data_country_id):
        """Sets the address_data_country_id of this CardStateLogs.


        :param address_data_country_id: The address_data_country_id of this CardStateLogs.  # noqa: E501
        :type: int
        """

        self._address_data_country_id = address_data_country_id

    @property
    def address_data_state_id(self):
        """Gets the address_data_state_id of this CardStateLogs.  # noqa: E501


        :return: The address_data_state_id of this CardStateLogs.  # noqa: E501
        :rtype: int
        """
        return self._address_data_state_id

    @address_data_state_id.setter
    def address_data_state_id(self, address_data_state_id):
        """Sets the address_data_state_id of this CardStateLogs.


        :param address_data_state_id: The address_data_state_id of this CardStateLogs.  # noqa: E501
        :type: int
        """

        self._address_data_state_id = address_data_state_id

    @property
    def address_data_legacy_full_address_line(self):
        """Gets the address_data_legacy_full_address_line of this CardStateLogs.  # noqa: E501


        :return: The address_data_legacy_full_address_line of this CardStateLogs.  # noqa: E501
        :rtype: str
        """
        return self._address_data_legacy_full_address_line

    @address_data_legacy_full_address_line.setter
    def address_data_legacy_full_address_line(self, address_data_legacy_full_address_line):
        """Sets the address_data_legacy_full_address_line of this CardStateLogs.


        :param address_data_legacy_full_address_line: The address_data_legacy_full_address_line of this CardStateLogs.  # noqa: E501
        :type: str
        """

        self._address_data_legacy_full_address_line = address_data_legacy_full_address_line

    @property
    def card(self):
        """Gets the card of this CardStateLogs.  # noqa: E501


        :return: The card of this CardStateLogs.  # noqa: E501
        :rtype: Cards
        """
        return self._card

    @card.setter
    def card(self, card):
        """Sets the card of this CardStateLogs.


        :param card: The card of this CardStateLogs.  # noqa: E501
        :type: Cards
        """

        self._card = card

    @property
    def country(self):
        """Gets the country of this CardStateLogs.  # noqa: E501


        :return: The country of this CardStateLogs.  # noqa: E501
        :rtype: Countries
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this CardStateLogs.


        :param country: The country of this CardStateLogs.  # noqa: E501
        :type: Countries
        """

        self._country = country

    @property
    def state(self):
        """Gets the state of this CardStateLogs.  # noqa: E501


        :return: The state of this CardStateLogs.  # noqa: E501
        :rtype: CountrySubdivisions
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this CardStateLogs.


        :param state: The state of this CardStateLogs.  # noqa: E501
        :type: CountrySubdivisions
        """

        self._state = state

    @property
    def installments(self):
        """Gets the installments of this CardStateLogs.  # noqa: E501


        :return: The installments of this CardStateLogs.  # noqa: E501
        :rtype: list[Installments]
        """
        return self._installments

    @installments.setter
    def installments(self, installments):
        """Sets the installments of this CardStateLogs.


        :param installments: The installments of this CardStateLogs.  # noqa: E501
        :type: list[Installments]
        """

        self._installments = installments

    @property
    def re_authorizations(self):
        """Gets the re_authorizations of this CardStateLogs.  # noqa: E501


        :return: The re_authorizations of this CardStateLogs.  # noqa: E501
        :rtype: list[ReAuthorizations]
        """
        return self._re_authorizations

    @re_authorizations.setter
    def re_authorizations(self, re_authorizations):
        """Sets the re_authorizations of this CardStateLogs.


        :param re_authorizations: The re_authorizations of this CardStateLogs.  # noqa: E501
        :type: list[ReAuthorizations]
        """

        self._re_authorizations = re_authorizations

    @property
    def address_data(self):
        """Gets the address_data of this CardStateLogs.  # noqa: E501


        :return: The address_data of this CardStateLogs.  # noqa: E501
        :rtype: AddressData2
        """
        return self._address_data

    @address_data.setter
    def address_data(self, address_data):
        """Sets the address_data of this CardStateLogs.


        :param address_data: The address_data of this CardStateLogs.  # noqa: E501
        :type: AddressData2
        """

        self._address_data = address_data

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CardStateLogs, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CardStateLogs):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
