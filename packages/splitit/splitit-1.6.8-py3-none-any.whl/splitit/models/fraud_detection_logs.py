# coding: utf-8

"""
    splitit-web-api-public-sdk

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class FraudDetectionLogs(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'installment_plan_id': 'int',
        'full_log': 'str',
        'provider_result_description': 'str',
        'provider_result_code': 'str',
        'provider_reference_id': 'str',
        'time_lapse': 'int',
        'card_id': 'int',
        'provider': 'str',
        'payment_gate_way_transaction_log_id': 'int',
        'card': 'Cards',
        'installment_plan': 'InstallmentPlans',
        'payment_gate_way_transaction_log': 'PaymentGatewayTransactionLogs',
        'result': 'FraudCheckResult'
    }

    attribute_map = {
        'id': 'Id',
        'installment_plan_id': 'InstallmentPlanId',
        'full_log': 'FullLog',
        'provider_result_description': 'ProviderResultDescription',
        'provider_result_code': 'ProviderResultCode',
        'provider_reference_id': 'ProviderReferenceId',
        'time_lapse': 'TimeLapse',
        'card_id': 'CardId',
        'provider': 'Provider',
        'payment_gate_way_transaction_log_id': 'PaymentGateWayTransactionLogId',
        'card': 'Card',
        'installment_plan': 'InstallmentPlan',
        'payment_gate_way_transaction_log': 'PaymentGateWayTransactionLog',
        'result': 'Result'
    }

    def __init__(self, id=None, installment_plan_id=None, full_log=None, provider_result_description=None, provider_result_code=None, provider_reference_id=None, time_lapse=None, card_id=None, provider=None, payment_gate_way_transaction_log_id=None, card=None, installment_plan=None, payment_gate_way_transaction_log=None, result=None):  # noqa: E501
        """FraudDetectionLogs - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._installment_plan_id = None
        self._full_log = None
        self._provider_result_description = None
        self._provider_result_code = None
        self._provider_reference_id = None
        self._time_lapse = None
        self._card_id = None
        self._provider = None
        self._payment_gate_way_transaction_log_id = None
        self._card = None
        self._installment_plan = None
        self._payment_gate_way_transaction_log = None
        self._result = None
        self.discriminator = None

        self._id = id
        self._installment_plan_id = installment_plan_id
        if full_log is not None:
            self._full_log = full_log
        if provider_result_description is not None:
            self._provider_result_description = provider_result_description
        if provider_result_code is not None:
            self._provider_result_code = provider_result_code
        if provider_reference_id is not None:
            self._provider_reference_id = provider_reference_id
        self._time_lapse = time_lapse
        self._card_id = card_id
        if provider is not None:
            self._provider = provider
        if payment_gate_way_transaction_log_id is not None:
            self._payment_gate_way_transaction_log_id = payment_gate_way_transaction_log_id
        if card is not None:
            self._card = card
        if installment_plan is not None:
            self._installment_plan = installment_plan
        if payment_gate_way_transaction_log is not None:
            self._payment_gate_way_transaction_log = payment_gate_way_transaction_log
        self._result = result

    @property
    def id(self):
        """Gets the id of this FraudDetectionLogs.  # noqa: E501


        :return: The id of this FraudDetectionLogs.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this FraudDetectionLogs.


        :param id: The id of this FraudDetectionLogs.  # noqa: E501
        :type: int
        """
        
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def installment_plan_id(self):
        """Gets the installment_plan_id of this FraudDetectionLogs.  # noqa: E501


        :return: The installment_plan_id of this FraudDetectionLogs.  # noqa: E501
        :rtype: int
        """
        return self._installment_plan_id

    @installment_plan_id.setter
    def installment_plan_id(self, installment_plan_id):
        """Sets the installment_plan_id of this FraudDetectionLogs.


        :param installment_plan_id: The installment_plan_id of this FraudDetectionLogs.  # noqa: E501
        :type: int
        """
        
        if installment_plan_id is None:
            raise ValueError("Invalid value for `installment_plan_id`, must not be `None`")  # noqa: E501

        self._installment_plan_id = installment_plan_id

    @property
    def full_log(self):
        """Gets the full_log of this FraudDetectionLogs.  # noqa: E501


        :return: The full_log of this FraudDetectionLogs.  # noqa: E501
        :rtype: str
        """
        return self._full_log

    @full_log.setter
    def full_log(self, full_log):
        """Sets the full_log of this FraudDetectionLogs.


        :param full_log: The full_log of this FraudDetectionLogs.  # noqa: E501
        :type: str
        """

        self._full_log = full_log

    @property
    def provider_result_description(self):
        """Gets the provider_result_description of this FraudDetectionLogs.  # noqa: E501


        :return: The provider_result_description of this FraudDetectionLogs.  # noqa: E501
        :rtype: str
        """
        return self._provider_result_description

    @provider_result_description.setter
    def provider_result_description(self, provider_result_description):
        """Sets the provider_result_description of this FraudDetectionLogs.


        :param provider_result_description: The provider_result_description of this FraudDetectionLogs.  # noqa: E501
        :type: str
        """

        self._provider_result_description = provider_result_description

    @property
    def provider_result_code(self):
        """Gets the provider_result_code of this FraudDetectionLogs.  # noqa: E501


        :return: The provider_result_code of this FraudDetectionLogs.  # noqa: E501
        :rtype: str
        """
        return self._provider_result_code

    @provider_result_code.setter
    def provider_result_code(self, provider_result_code):
        """Sets the provider_result_code of this FraudDetectionLogs.


        :param provider_result_code: The provider_result_code of this FraudDetectionLogs.  # noqa: E501
        :type: str
        """

        self._provider_result_code = provider_result_code

    @property
    def provider_reference_id(self):
        """Gets the provider_reference_id of this FraudDetectionLogs.  # noqa: E501


        :return: The provider_reference_id of this FraudDetectionLogs.  # noqa: E501
        :rtype: str
        """
        return self._provider_reference_id

    @provider_reference_id.setter
    def provider_reference_id(self, provider_reference_id):
        """Sets the provider_reference_id of this FraudDetectionLogs.


        :param provider_reference_id: The provider_reference_id of this FraudDetectionLogs.  # noqa: E501
        :type: str
        """

        self._provider_reference_id = provider_reference_id

    @property
    def time_lapse(self):
        """Gets the time_lapse of this FraudDetectionLogs.  # noqa: E501


        :return: The time_lapse of this FraudDetectionLogs.  # noqa: E501
        :rtype: int
        """
        return self._time_lapse

    @time_lapse.setter
    def time_lapse(self, time_lapse):
        """Sets the time_lapse of this FraudDetectionLogs.


        :param time_lapse: The time_lapse of this FraudDetectionLogs.  # noqa: E501
        :type: int
        """
        
        if time_lapse is None:
            raise ValueError("Invalid value for `time_lapse`, must not be `None`")  # noqa: E501

        self._time_lapse = time_lapse

    @property
    def card_id(self):
        """Gets the card_id of this FraudDetectionLogs.  # noqa: E501


        :return: The card_id of this FraudDetectionLogs.  # noqa: E501
        :rtype: int
        """
        return self._card_id

    @card_id.setter
    def card_id(self, card_id):
        """Sets the card_id of this FraudDetectionLogs.


        :param card_id: The card_id of this FraudDetectionLogs.  # noqa: E501
        :type: int
        """
        
        if card_id is None:
            raise ValueError("Invalid value for `card_id`, must not be `None`")  # noqa: E501

        self._card_id = card_id

    @property
    def provider(self):
        """Gets the provider of this FraudDetectionLogs.  # noqa: E501


        :return: The provider of this FraudDetectionLogs.  # noqa: E501
        :rtype: str
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this FraudDetectionLogs.


        :param provider: The provider of this FraudDetectionLogs.  # noqa: E501
        :type: str
        """

        self._provider = provider

    @property
    def payment_gate_way_transaction_log_id(self):
        """Gets the payment_gate_way_transaction_log_id of this FraudDetectionLogs.  # noqa: E501


        :return: The payment_gate_way_transaction_log_id of this FraudDetectionLogs.  # noqa: E501
        :rtype: int
        """
        return self._payment_gate_way_transaction_log_id

    @payment_gate_way_transaction_log_id.setter
    def payment_gate_way_transaction_log_id(self, payment_gate_way_transaction_log_id):
        """Sets the payment_gate_way_transaction_log_id of this FraudDetectionLogs.


        :param payment_gate_way_transaction_log_id: The payment_gate_way_transaction_log_id of this FraudDetectionLogs.  # noqa: E501
        :type: int
        """

        self._payment_gate_way_transaction_log_id = payment_gate_way_transaction_log_id

    @property
    def card(self):
        """Gets the card of this FraudDetectionLogs.  # noqa: E501


        :return: The card of this FraudDetectionLogs.  # noqa: E501
        :rtype: Cards
        """
        return self._card

    @card.setter
    def card(self, card):
        """Sets the card of this FraudDetectionLogs.


        :param card: The card of this FraudDetectionLogs.  # noqa: E501
        :type: Cards
        """

        self._card = card

    @property
    def installment_plan(self):
        """Gets the installment_plan of this FraudDetectionLogs.  # noqa: E501


        :return: The installment_plan of this FraudDetectionLogs.  # noqa: E501
        :rtype: InstallmentPlans
        """
        return self._installment_plan

    @installment_plan.setter
    def installment_plan(self, installment_plan):
        """Sets the installment_plan of this FraudDetectionLogs.


        :param installment_plan: The installment_plan of this FraudDetectionLogs.  # noqa: E501
        :type: InstallmentPlans
        """

        self._installment_plan = installment_plan

    @property
    def payment_gate_way_transaction_log(self):
        """Gets the payment_gate_way_transaction_log of this FraudDetectionLogs.  # noqa: E501


        :return: The payment_gate_way_transaction_log of this FraudDetectionLogs.  # noqa: E501
        :rtype: PaymentGatewayTransactionLogs
        """
        return self._payment_gate_way_transaction_log

    @payment_gate_way_transaction_log.setter
    def payment_gate_way_transaction_log(self, payment_gate_way_transaction_log):
        """Sets the payment_gate_way_transaction_log of this FraudDetectionLogs.


        :param payment_gate_way_transaction_log: The payment_gate_way_transaction_log of this FraudDetectionLogs.  # noqa: E501
        :type: PaymentGatewayTransactionLogs
        """

        self._payment_gate_way_transaction_log = payment_gate_way_transaction_log

    @property
    def result(self):
        """Gets the result of this FraudDetectionLogs.  # noqa: E501


        :return: The result of this FraudDetectionLogs.  # noqa: E501
        :rtype: FraudCheckResult
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this FraudDetectionLogs.


        :param result: The result of this FraudDetectionLogs.  # noqa: E501
        :type: FraudCheckResult
        """
        
        if result is None:
            raise ValueError("Invalid value for `result`, must not be `None`")  # noqa: E501

        self._result = result

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FraudDetectionLogs, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FraudDetectionLogs):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
