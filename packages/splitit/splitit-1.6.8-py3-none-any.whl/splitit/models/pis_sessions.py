# coding: utf-8

"""
    splitit-web-api-public-sdk

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class PisSessions(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'session_id': 'str',
        'last_access_time': 'datetime',
        'user_id': 'int',
        'user_unique_id': 'str',
        'installment_plan_number': 'str',
        'versioned_touch_point_id': 'int',
        'session_valid_period_in_minutes': 'int',
        'versioned_touch_point': 'VersionedTouchPoints',
        'user_type': 'UserType',
        'session_availibility': 'SessionAvailibility'
    }

    attribute_map = {
        'id': 'Id',
        'session_id': 'SessionId',
        'last_access_time': 'LastAccessTime',
        'user_id': 'UserId',
        'user_unique_id': 'UserUniqueId',
        'installment_plan_number': 'InstallmentPlanNumber',
        'versioned_touch_point_id': 'VersionedTouchPointId',
        'session_valid_period_in_minutes': 'SessionValidPeriodInMinutes',
        'versioned_touch_point': 'VersionedTouchPoint',
        'user_type': 'UserType',
        'session_availibility': 'SessionAvailibility'
    }

    def __init__(self, id=None, session_id=None, last_access_time=None, user_id=None, user_unique_id=None, installment_plan_number=None, versioned_touch_point_id=None, session_valid_period_in_minutes=None, versioned_touch_point=None, user_type=None, session_availibility=None):  # noqa: E501
        """PisSessions - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._session_id = None
        self._last_access_time = None
        self._user_id = None
        self._user_unique_id = None
        self._installment_plan_number = None
        self._versioned_touch_point_id = None
        self._session_valid_period_in_minutes = None
        self._versioned_touch_point = None
        self._user_type = None
        self._session_availibility = None
        self.discriminator = None

        self._id = id
        if session_id is not None:
            self._session_id = session_id
        self._last_access_time = last_access_time
        if user_id is not None:
            self._user_id = user_id
        if user_unique_id is not None:
            self._user_unique_id = user_unique_id
        if installment_plan_number is not None:
            self._installment_plan_number = installment_plan_number
        if versioned_touch_point_id is not None:
            self._versioned_touch_point_id = versioned_touch_point_id
        self._session_valid_period_in_minutes = session_valid_period_in_minutes
        if versioned_touch_point is not None:
            self._versioned_touch_point = versioned_touch_point
        if user_type is not None:
            self._user_type = user_type
        self._session_availibility = session_availibility

    @property
    def id(self):
        """Gets the id of this PisSessions.  # noqa: E501


        :return: The id of this PisSessions.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PisSessions.


        :param id: The id of this PisSessions.  # noqa: E501
        :type: int
        """
        
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def session_id(self):
        """Gets the session_id of this PisSessions.  # noqa: E501


        :return: The session_id of this PisSessions.  # noqa: E501
        :rtype: str
        """
        return self._session_id

    @session_id.setter
    def session_id(self, session_id):
        """Sets the session_id of this PisSessions.


        :param session_id: The session_id of this PisSessions.  # noqa: E501
        :type: str
        """

        self._session_id = session_id

    @property
    def last_access_time(self):
        """Gets the last_access_time of this PisSessions.  # noqa: E501


        :return: The last_access_time of this PisSessions.  # noqa: E501
        :rtype: datetime
        """
        return self._last_access_time

    @last_access_time.setter
    def last_access_time(self, last_access_time):
        """Sets the last_access_time of this PisSessions.


        :param last_access_time: The last_access_time of this PisSessions.  # noqa: E501
        :type: datetime
        """
        
        if last_access_time is None:
            raise ValueError("Invalid value for `last_access_time`, must not be `None`")  # noqa: E501

        self._last_access_time = last_access_time

    @property
    def user_id(self):
        """Gets the user_id of this PisSessions.  # noqa: E501


        :return: The user_id of this PisSessions.  # noqa: E501
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this PisSessions.


        :param user_id: The user_id of this PisSessions.  # noqa: E501
        :type: int
        """

        self._user_id = user_id

    @property
    def user_unique_id(self):
        """Gets the user_unique_id of this PisSessions.  # noqa: E501


        :return: The user_unique_id of this PisSessions.  # noqa: E501
        :rtype: str
        """
        return self._user_unique_id

    @user_unique_id.setter
    def user_unique_id(self, user_unique_id):
        """Sets the user_unique_id of this PisSessions.


        :param user_unique_id: The user_unique_id of this PisSessions.  # noqa: E501
        :type: str
        """

        self._user_unique_id = user_unique_id

    @property
    def installment_plan_number(self):
        """Gets the installment_plan_number of this PisSessions.  # noqa: E501


        :return: The installment_plan_number of this PisSessions.  # noqa: E501
        :rtype: str
        """
        return self._installment_plan_number

    @installment_plan_number.setter
    def installment_plan_number(self, installment_plan_number):
        """Sets the installment_plan_number of this PisSessions.


        :param installment_plan_number: The installment_plan_number of this PisSessions.  # noqa: E501
        :type: str
        """

        self._installment_plan_number = installment_plan_number

    @property
    def versioned_touch_point_id(self):
        """Gets the versioned_touch_point_id of this PisSessions.  # noqa: E501


        :return: The versioned_touch_point_id of this PisSessions.  # noqa: E501
        :rtype: int
        """
        return self._versioned_touch_point_id

    @versioned_touch_point_id.setter
    def versioned_touch_point_id(self, versioned_touch_point_id):
        """Sets the versioned_touch_point_id of this PisSessions.


        :param versioned_touch_point_id: The versioned_touch_point_id of this PisSessions.  # noqa: E501
        :type: int
        """

        self._versioned_touch_point_id = versioned_touch_point_id

    @property
    def session_valid_period_in_minutes(self):
        """Gets the session_valid_period_in_minutes of this PisSessions.  # noqa: E501


        :return: The session_valid_period_in_minutes of this PisSessions.  # noqa: E501
        :rtype: int
        """
        return self._session_valid_period_in_minutes

    @session_valid_period_in_minutes.setter
    def session_valid_period_in_minutes(self, session_valid_period_in_minutes):
        """Sets the session_valid_period_in_minutes of this PisSessions.


        :param session_valid_period_in_minutes: The session_valid_period_in_minutes of this PisSessions.  # noqa: E501
        :type: int
        """
        
        if session_valid_period_in_minutes is None:
            raise ValueError("Invalid value for `session_valid_period_in_minutes`, must not be `None`")  # noqa: E501

        self._session_valid_period_in_minutes = session_valid_period_in_minutes

    @property
    def versioned_touch_point(self):
        """Gets the versioned_touch_point of this PisSessions.  # noqa: E501


        :return: The versioned_touch_point of this PisSessions.  # noqa: E501
        :rtype: VersionedTouchPoints
        """
        return self._versioned_touch_point

    @versioned_touch_point.setter
    def versioned_touch_point(self, versioned_touch_point):
        """Sets the versioned_touch_point of this PisSessions.


        :param versioned_touch_point: The versioned_touch_point of this PisSessions.  # noqa: E501
        :type: VersionedTouchPoints
        """

        self._versioned_touch_point = versioned_touch_point

    @property
    def user_type(self):
        """Gets the user_type of this PisSessions.  # noqa: E501


        :return: The user_type of this PisSessions.  # noqa: E501
        :rtype: UserType
        """
        return self._user_type

    @user_type.setter
    def user_type(self, user_type):
        """Sets the user_type of this PisSessions.


        :param user_type: The user_type of this PisSessions.  # noqa: E501
        :type: UserType
        """

        self._user_type = user_type

    @property
    def session_availibility(self):
        """Gets the session_availibility of this PisSessions.  # noqa: E501


        :return: The session_availibility of this PisSessions.  # noqa: E501
        :rtype: SessionAvailibility
        """
        return self._session_availibility

    @session_availibility.setter
    def session_availibility(self, session_availibility):
        """Sets the session_availibility of this PisSessions.


        :param session_availibility: The session_availibility of this PisSessions.  # noqa: E501
        :type: SessionAvailibility
        """
        
        if session_availibility is None:
            raise ValueError("Invalid value for `session_availibility`, must not be `None`")  # noqa: E501

        self._session_availibility = session_availibility

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PisSessions, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PisSessions):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
