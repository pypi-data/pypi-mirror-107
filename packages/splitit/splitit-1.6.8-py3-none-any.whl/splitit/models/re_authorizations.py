# coding: utf-8

"""
    splitit-web-api-public-sdk

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ReAuthorizations(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'installment_plan_id': 'int',
        'processor_id': 'int',
        'amount': 'float',
        'process_date_time': 'datetime',
        'is_test': 'bool',
        'card_state_id': 'int',
        'card_state': 'CardStateLogs',
        'installment_plan': 'InstallmentPlans',
        'processor': 'Processors',
        're_authorization_payment_gateway_transaction_logs': 'list[ReAuthorizationPaymentGatewayTransactionLogs]',
        'status': 'InstallmentStatus'
    }

    attribute_map = {
        'id': 'Id',
        'installment_plan_id': 'InstallmentPlanId',
        'processor_id': 'ProcessorId',
        'amount': 'Amount',
        'process_date_time': 'ProcessDateTime',
        'is_test': 'IsTest',
        'card_state_id': 'CardStateId',
        'card_state': 'CardState',
        'installment_plan': 'InstallmentPlan',
        'processor': 'Processor',
        're_authorization_payment_gateway_transaction_logs': 'ReAuthorizationPaymentGatewayTransactionLogs',
        'status': 'Status'
    }

    def __init__(self, id=None, installment_plan_id=None, processor_id=None, amount=None, process_date_time=None, is_test=None, card_state_id=None, card_state=None, installment_plan=None, processor=None, re_authorization_payment_gateway_transaction_logs=None, status=None):  # noqa: E501
        """ReAuthorizations - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._installment_plan_id = None
        self._processor_id = None
        self._amount = None
        self._process_date_time = None
        self._is_test = None
        self._card_state_id = None
        self._card_state = None
        self._installment_plan = None
        self._processor = None
        self._re_authorization_payment_gateway_transaction_logs = None
        self._status = None
        self.discriminator = None

        self._id = id
        self._installment_plan_id = installment_plan_id
        self._processor_id = processor_id
        self._amount = amount
        if process_date_time is not None:
            self._process_date_time = process_date_time
        self._is_test = is_test
        if card_state_id is not None:
            self._card_state_id = card_state_id
        if card_state is not None:
            self._card_state = card_state
        if installment_plan is not None:
            self._installment_plan = installment_plan
        if processor is not None:
            self._processor = processor
        if re_authorization_payment_gateway_transaction_logs is not None:
            self._re_authorization_payment_gateway_transaction_logs = re_authorization_payment_gateway_transaction_logs
        self._status = status

    @property
    def id(self):
        """Gets the id of this ReAuthorizations.  # noqa: E501


        :return: The id of this ReAuthorizations.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ReAuthorizations.


        :param id: The id of this ReAuthorizations.  # noqa: E501
        :type: int
        """
        
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def installment_plan_id(self):
        """Gets the installment_plan_id of this ReAuthorizations.  # noqa: E501


        :return: The installment_plan_id of this ReAuthorizations.  # noqa: E501
        :rtype: int
        """
        return self._installment_plan_id

    @installment_plan_id.setter
    def installment_plan_id(self, installment_plan_id):
        """Sets the installment_plan_id of this ReAuthorizations.


        :param installment_plan_id: The installment_plan_id of this ReAuthorizations.  # noqa: E501
        :type: int
        """
        
        if installment_plan_id is None:
            raise ValueError("Invalid value for `installment_plan_id`, must not be `None`")  # noqa: E501

        self._installment_plan_id = installment_plan_id

    @property
    def processor_id(self):
        """Gets the processor_id of this ReAuthorizations.  # noqa: E501


        :return: The processor_id of this ReAuthorizations.  # noqa: E501
        :rtype: int
        """
        return self._processor_id

    @processor_id.setter
    def processor_id(self, processor_id):
        """Sets the processor_id of this ReAuthorizations.


        :param processor_id: The processor_id of this ReAuthorizations.  # noqa: E501
        :type: int
        """
        
        if processor_id is None:
            raise ValueError("Invalid value for `processor_id`, must not be `None`")  # noqa: E501

        self._processor_id = processor_id

    @property
    def amount(self):
        """Gets the amount of this ReAuthorizations.  # noqa: E501


        :return: The amount of this ReAuthorizations.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this ReAuthorizations.


        :param amount: The amount of this ReAuthorizations.  # noqa: E501
        :type: float
        """
        
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")  # noqa: E501

        self._amount = amount

    @property
    def process_date_time(self):
        """Gets the process_date_time of this ReAuthorizations.  # noqa: E501


        :return: The process_date_time of this ReAuthorizations.  # noqa: E501
        :rtype: datetime
        """
        return self._process_date_time

    @process_date_time.setter
    def process_date_time(self, process_date_time):
        """Sets the process_date_time of this ReAuthorizations.


        :param process_date_time: The process_date_time of this ReAuthorizations.  # noqa: E501
        :type: datetime
        """

        self._process_date_time = process_date_time

    @property
    def is_test(self):
        """Gets the is_test of this ReAuthorizations.  # noqa: E501


        :return: The is_test of this ReAuthorizations.  # noqa: E501
        :rtype: bool
        """
        return self._is_test

    @is_test.setter
    def is_test(self, is_test):
        """Sets the is_test of this ReAuthorizations.


        :param is_test: The is_test of this ReAuthorizations.  # noqa: E501
        :type: bool
        """
        is_test = bool(is_test)
        if is_test is None:
            raise ValueError("Invalid value for `is_test`, must not be `None`")  # noqa: E501

        self._is_test = is_test

    @property
    def card_state_id(self):
        """Gets the card_state_id of this ReAuthorizations.  # noqa: E501


        :return: The card_state_id of this ReAuthorizations.  # noqa: E501
        :rtype: int
        """
        return self._card_state_id

    @card_state_id.setter
    def card_state_id(self, card_state_id):
        """Sets the card_state_id of this ReAuthorizations.


        :param card_state_id: The card_state_id of this ReAuthorizations.  # noqa: E501
        :type: int
        """

        self._card_state_id = card_state_id

    @property
    def card_state(self):
        """Gets the card_state of this ReAuthorizations.  # noqa: E501


        :return: The card_state of this ReAuthorizations.  # noqa: E501
        :rtype: CardStateLogs
        """
        return self._card_state

    @card_state.setter
    def card_state(self, card_state):
        """Sets the card_state of this ReAuthorizations.


        :param card_state: The card_state of this ReAuthorizations.  # noqa: E501
        :type: CardStateLogs
        """

        self._card_state = card_state

    @property
    def installment_plan(self):
        """Gets the installment_plan of this ReAuthorizations.  # noqa: E501


        :return: The installment_plan of this ReAuthorizations.  # noqa: E501
        :rtype: InstallmentPlans
        """
        return self._installment_plan

    @installment_plan.setter
    def installment_plan(self, installment_plan):
        """Sets the installment_plan of this ReAuthorizations.


        :param installment_plan: The installment_plan of this ReAuthorizations.  # noqa: E501
        :type: InstallmentPlans
        """

        self._installment_plan = installment_plan

    @property
    def processor(self):
        """Gets the processor of this ReAuthorizations.  # noqa: E501


        :return: The processor of this ReAuthorizations.  # noqa: E501
        :rtype: Processors
        """
        return self._processor

    @processor.setter
    def processor(self, processor):
        """Sets the processor of this ReAuthorizations.


        :param processor: The processor of this ReAuthorizations.  # noqa: E501
        :type: Processors
        """

        self._processor = processor

    @property
    def re_authorization_payment_gateway_transaction_logs(self):
        """Gets the re_authorization_payment_gateway_transaction_logs of this ReAuthorizations.  # noqa: E501


        :return: The re_authorization_payment_gateway_transaction_logs of this ReAuthorizations.  # noqa: E501
        :rtype: list[ReAuthorizationPaymentGatewayTransactionLogs]
        """
        return self._re_authorization_payment_gateway_transaction_logs

    @re_authorization_payment_gateway_transaction_logs.setter
    def re_authorization_payment_gateway_transaction_logs(self, re_authorization_payment_gateway_transaction_logs):
        """Sets the re_authorization_payment_gateway_transaction_logs of this ReAuthorizations.


        :param re_authorization_payment_gateway_transaction_logs: The re_authorization_payment_gateway_transaction_logs of this ReAuthorizations.  # noqa: E501
        :type: list[ReAuthorizationPaymentGatewayTransactionLogs]
        """

        self._re_authorization_payment_gateway_transaction_logs = re_authorization_payment_gateway_transaction_logs

    @property
    def status(self):
        """Gets the status of this ReAuthorizations.  # noqa: E501


        :return: The status of this ReAuthorizations.  # noqa: E501
        :rtype: InstallmentStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ReAuthorizations.


        :param status: The status of this ReAuthorizations.  # noqa: E501
        :type: InstallmentStatus
        """
        
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ReAuthorizations, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReAuthorizations):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
