# coding: utf-8

"""
    splitit-web-api-public-sdk

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ProcessorAuthenticationParameters(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'display_name': 'str',
        'key': 'str',
        'order': 'int',
        'processor_id': 'int',
        'processor': 'Processors'
    }

    attribute_map = {
        'id': 'Id',
        'display_name': 'DisplayName',
        'key': 'Key',
        'order': 'Order',
        'processor_id': 'ProcessorId',
        'processor': 'Processor'
    }

    def __init__(self, id=None, display_name=None, key=None, order=None, processor_id=None, processor=None):  # noqa: E501
        """ProcessorAuthenticationParameters - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._display_name = None
        self._key = None
        self._order = None
        self._processor_id = None
        self._processor = None
        self.discriminator = None

        self._id = id
        if display_name is not None:
            self._display_name = display_name
        if key is not None:
            self._key = key
        self._order = order
        if processor_id is not None:
            self._processor_id = processor_id
        if processor is not None:
            self._processor = processor

    @property
    def id(self):
        """Gets the id of this ProcessorAuthenticationParameters.  # noqa: E501


        :return: The id of this ProcessorAuthenticationParameters.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ProcessorAuthenticationParameters.


        :param id: The id of this ProcessorAuthenticationParameters.  # noqa: E501
        :type: int
        """
        
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def display_name(self):
        """Gets the display_name of this ProcessorAuthenticationParameters.  # noqa: E501


        :return: The display_name of this ProcessorAuthenticationParameters.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this ProcessorAuthenticationParameters.


        :param display_name: The display_name of this ProcessorAuthenticationParameters.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def key(self):
        """Gets the key of this ProcessorAuthenticationParameters.  # noqa: E501


        :return: The key of this ProcessorAuthenticationParameters.  # noqa: E501
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this ProcessorAuthenticationParameters.


        :param key: The key of this ProcessorAuthenticationParameters.  # noqa: E501
        :type: str
        """

        self._key = key

    @property
    def order(self):
        """Gets the order of this ProcessorAuthenticationParameters.  # noqa: E501


        :return: The order of this ProcessorAuthenticationParameters.  # noqa: E501
        :rtype: int
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this ProcessorAuthenticationParameters.


        :param order: The order of this ProcessorAuthenticationParameters.  # noqa: E501
        :type: int
        """
        
        if order is None:
            raise ValueError("Invalid value for `order`, must not be `None`")  # noqa: E501

        self._order = order

    @property
    def processor_id(self):
        """Gets the processor_id of this ProcessorAuthenticationParameters.  # noqa: E501


        :return: The processor_id of this ProcessorAuthenticationParameters.  # noqa: E501
        :rtype: int
        """
        return self._processor_id

    @processor_id.setter
    def processor_id(self, processor_id):
        """Sets the processor_id of this ProcessorAuthenticationParameters.


        :param processor_id: The processor_id of this ProcessorAuthenticationParameters.  # noqa: E501
        :type: int
        """

        self._processor_id = processor_id

    @property
    def processor(self):
        """Gets the processor of this ProcessorAuthenticationParameters.  # noqa: E501


        :return: The processor of this ProcessorAuthenticationParameters.  # noqa: E501
        :rtype: Processors
        """
        return self._processor

    @processor.setter
    def processor(self, processor):
        """Sets the processor of this ProcessorAuthenticationParameters.


        :param processor: The processor of this ProcessorAuthenticationParameters.  # noqa: E501
        :type: Processors
        """

        self._processor = processor

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProcessorAuthenticationParameters, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProcessorAuthenticationParameters):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
