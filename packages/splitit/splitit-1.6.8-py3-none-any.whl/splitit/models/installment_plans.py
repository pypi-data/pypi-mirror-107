# coding: utf-8

"""
    splitit-web-api-public-sdk

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class InstallmentPlans(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'terminal_id': 'int',
        'number_of_installments': 'int',
        'amount': 'float',
        'amount_before_fees': 'float',
        'eula': 'bool',
        'installment_plan_number': 'str',
        'is_full_captured': 'bool',
        'begin_lock_time': 'datetime',
        'merchant_financed_date': 'datetime',
        'merchant_reserve_returned_date': 'datetime',
        'planned_full_capture': 'datetime',
        'installment_plan_terminal_data_id': 'int',
        'currency_id': 'int',
        'ref_order_number': 'str',
        'active_card_id': 'int',
        'base64_png_signature': 'str',
        'is_charged_back': 'bool',
        'are_charges_held': 'bool',
        'auto_retry': 'bool',
        'pis_member_unique_id': 'str',
        'pis_member_id': 'int',
        'subtotal': 'float',
        'tax': 'float',
        'shipping': 'float',
        'setup_context_id': 'int',
        'original_amount': 'float',
        'refund_amount': 'float',
        'reserve_pool_amount': 'float',
        'shopper_approval_date_time': 'datetime',
        'cancellation_date_time': 'datetime',
        'activated_date': 'datetime',
        'de_activated_date': 'datetime',
        'amount_for_funding': 'float',
        'amount_for_funding_currency': 'Currencies',
        'amount_for_funding_exchange_rate': 'float',
        'amount_for_funding_transaction_currency': 'float',
        'active_card': 'Cards',
        'currency': 'Currencies',
        'installment_plan_terminal_data': 'InstallmentPlanTerminalDatas',
        'pis_member': 'object',
        'setup_context': 'InstallmentPlanSetupContexts',
        'terminal': 'Terminals',
        'cart_items': 'list[CartItems]',
        'email_audit_logs': 'list[EmailAuditLogs]',
        'fees_documents': 'list[FeesDocuments]',
        'fraud_detection_logs': 'list[FraudDetectionLogs]',
        'funding_collect_document_details': 'list[FundingCollectDocumentDetails]',
        'installment_plan_audit_logs': 'list[InstallmentPlanAuditLogs]',
        'installment_plan_events': 'list[InstallmentPlanEvents]',
        'installment_plan_status_log_entries': 'list[InstallmentPlanStatusLogEntries]',
        'installments': 'list[Installments]',
        're_authorizations': 'list[ReAuthorizations]',
        'refund_log_entries': 'list[RefundLogEntries]',
        'transfer_document_details': 'list[TransferDocumentDetails]',
        'active_terminal_data_id': 'int',
        'active_terminal_data': 'TerminalGatewayDatas',
        'delay_resolution': 'DelayResolution',
        'test_mode': 'TestModes',
        'funding_types_id': 'MoneyFlows',
        'strategy': 'PlanStrategy',
        'status': 'InstallmentPlanStatus',
        'purchase_method': 'PurchaseMethod',
        'extended_params_serialized_data': 'str',
        'extended_params': 'dict(str, str)',
        'auto_capture': 'bool',
        'items': 'list[CartItems]',
        'amount_details': 'AmountDetails2'
    }

    attribute_map = {
        'id': 'Id',
        'terminal_id': 'TerminalId',
        'number_of_installments': 'NumberOfInstallments',
        'amount': 'Amount',
        'amount_before_fees': 'AmountBeforeFees',
        'eula': 'Eula',
        'installment_plan_number': 'InstallmentPlanNumber',
        'is_full_captured': 'IsFullCaptured',
        'begin_lock_time': 'BeginLockTime',
        'merchant_financed_date': 'MerchantFinancedDate',
        'merchant_reserve_returned_date': 'MerchantReserveReturnedDate',
        'planned_full_capture': 'PlannedFullCapture',
        'installment_plan_terminal_data_id': 'InstallmentPlanTerminalDataId',
        'currency_id': 'CurrencyId',
        'ref_order_number': 'RefOrderNumber',
        'active_card_id': 'ActiveCardId',
        'base64_png_signature': 'Base64PngSignature',
        'is_charged_back': 'IsChargedBack',
        'are_charges_held': 'AreChargesHeld',
        'auto_retry': 'AutoRetry',
        'pis_member_unique_id': 'PisMemberUniqueId',
        'pis_member_id': 'PisMemberId',
        'subtotal': 'Subtotal',
        'tax': 'Tax',
        'shipping': 'Shipping',
        'setup_context_id': 'SetupContextId',
        'original_amount': 'OriginalAmount',
        'refund_amount': 'RefundAmount',
        'reserve_pool_amount': 'ReservePoolAmount',
        'shopper_approval_date_time': 'ShopperApprovalDateTime',
        'cancellation_date_time': 'CancellationDateTime',
        'activated_date': 'ActivatedDate',
        'de_activated_date': 'DeActivatedDate',
        'amount_for_funding': 'AmountForFunding',
        'amount_for_funding_currency': 'AmountForFunding_Currency',
        'amount_for_funding_exchange_rate': 'AmountForFunding_ExchangeRate',
        'amount_for_funding_transaction_currency': 'AmountForFunding_TransactionCurrency',
        'active_card': 'ActiveCard',
        'currency': 'Currency',
        'installment_plan_terminal_data': 'InstallmentPlanTerminalData',
        'pis_member': 'PisMember',
        'setup_context': 'SetupContext',
        'terminal': 'Terminal',
        'cart_items': 'CartItems',
        'email_audit_logs': 'EmailAuditLogs',
        'fees_documents': 'FeesDocuments',
        'fraud_detection_logs': 'FraudDetectionLogs',
        'funding_collect_document_details': 'FundingCollectDocumentDetails',
        'installment_plan_audit_logs': 'InstallmentPlanAuditLogs',
        'installment_plan_events': 'InstallmentPlanEvents',
        'installment_plan_status_log_entries': 'InstallmentPlanStatusLogEntries',
        'installments': 'Installments',
        're_authorizations': 'ReAuthorizations',
        'refund_log_entries': 'RefundLogEntries',
        'transfer_document_details': 'TransferDocumentDetails',
        'active_terminal_data_id': 'ActiveTerminalDataId',
        'active_terminal_data': 'ActiveTerminalData',
        'delay_resolution': 'DelayResolution',
        'test_mode': 'TestMode',
        'funding_types_id': 'FundingTypesId',
        'strategy': 'Strategy',
        'status': 'Status',
        'purchase_method': 'PurchaseMethod',
        'extended_params_serialized_data': 'ExtendedParamsSerializedData',
        'extended_params': 'ExtendedParams',
        'auto_capture': 'AutoCapture',
        'items': 'Items',
        'amount_details': 'AmountDetails'
    }

    def __init__(self, id=None, terminal_id=None, number_of_installments=None, amount=None, amount_before_fees=None, eula=None, installment_plan_number=None, is_full_captured=None, begin_lock_time=None, merchant_financed_date=None, merchant_reserve_returned_date=None, planned_full_capture=None, installment_plan_terminal_data_id=None, currency_id=None, ref_order_number=None, active_card_id=None, base64_png_signature=None, is_charged_back=None, are_charges_held=None, auto_retry=None, pis_member_unique_id=None, pis_member_id=None, subtotal=None, tax=None, shipping=None, setup_context_id=None, original_amount=None, refund_amount=None, reserve_pool_amount=None, shopper_approval_date_time=None, cancellation_date_time=None, activated_date=None, de_activated_date=None, amount_for_funding=None, amount_for_funding_currency=None, amount_for_funding_exchange_rate=None, amount_for_funding_transaction_currency=None, active_card=None, currency=None, installment_plan_terminal_data=None, pis_member=None, setup_context=None, terminal=None, cart_items=None, email_audit_logs=None, fees_documents=None, fraud_detection_logs=None, funding_collect_document_details=None, installment_plan_audit_logs=None, installment_plan_events=None, installment_plan_status_log_entries=None, installments=None, re_authorizations=None, refund_log_entries=None, transfer_document_details=None, active_terminal_data_id=None, active_terminal_data=None, delay_resolution=None, test_mode=None, funding_types_id=None, strategy=None, status=None, purchase_method=None, extended_params_serialized_data=None, extended_params=None, auto_capture=None, items=None, amount_details=None):  # noqa: E501
        """InstallmentPlans - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._terminal_id = None
        self._number_of_installments = None
        self._amount = None
        self._amount_before_fees = None
        self._eula = None
        self._installment_plan_number = None
        self._is_full_captured = None
        self._begin_lock_time = None
        self._merchant_financed_date = None
        self._merchant_reserve_returned_date = None
        self._planned_full_capture = None
        self._installment_plan_terminal_data_id = None
        self._currency_id = None
        self._ref_order_number = None
        self._active_card_id = None
        self._base64_png_signature = None
        self._is_charged_back = None
        self._are_charges_held = None
        self._auto_retry = None
        self._pis_member_unique_id = None
        self._pis_member_id = None
        self._subtotal = None
        self._tax = None
        self._shipping = None
        self._setup_context_id = None
        self._original_amount = None
        self._refund_amount = None
        self._reserve_pool_amount = None
        self._shopper_approval_date_time = None
        self._cancellation_date_time = None
        self._activated_date = None
        self._de_activated_date = None
        self._amount_for_funding = None
        self._amount_for_funding_currency = None
        self._amount_for_funding_exchange_rate = None
        self._amount_for_funding_transaction_currency = None
        self._active_card = None
        self._currency = None
        self._installment_plan_terminal_data = None
        self._pis_member = None
        self._setup_context = None
        self._terminal = None
        self._cart_items = None
        self._email_audit_logs = None
        self._fees_documents = None
        self._fraud_detection_logs = None
        self._funding_collect_document_details = None
        self._installment_plan_audit_logs = None
        self._installment_plan_events = None
        self._installment_plan_status_log_entries = None
        self._installments = None
        self._re_authorizations = None
        self._refund_log_entries = None
        self._transfer_document_details = None
        self._active_terminal_data_id = None
        self._active_terminal_data = None
        self._delay_resolution = None
        self._test_mode = None
        self._funding_types_id = None
        self._strategy = None
        self._status = None
        self._purchase_method = None
        self._extended_params_serialized_data = None
        self._extended_params = None
        self._auto_capture = None
        self._items = None
        self._amount_details = None
        self.discriminator = None

        self._id = id
        self._terminal_id = terminal_id
        self._number_of_installments = number_of_installments
        self._amount = amount
        self._amount_before_fees = amount_before_fees
        self._eula = eula
        if installment_plan_number is not None:
            self._installment_plan_number = installment_plan_number
        self._is_full_captured = is_full_captured
        if begin_lock_time is not None:
            self._begin_lock_time = begin_lock_time
        if merchant_financed_date is not None:
            self._merchant_financed_date = merchant_financed_date
        if merchant_reserve_returned_date is not None:
            self._merchant_reserve_returned_date = merchant_reserve_returned_date
        if planned_full_capture is not None:
            self._planned_full_capture = planned_full_capture
        self._installment_plan_terminal_data_id = installment_plan_terminal_data_id
        self._currency_id = currency_id
        if ref_order_number is not None:
            self._ref_order_number = ref_order_number
        if active_card_id is not None:
            self._active_card_id = active_card_id
        if base64_png_signature is not None:
            self._base64_png_signature = base64_png_signature
        self._is_charged_back = is_charged_back
        self._are_charges_held = are_charges_held
        self._auto_retry = auto_retry
        if pis_member_unique_id is not None:
            self._pis_member_unique_id = pis_member_unique_id
        if pis_member_id is not None:
            self._pis_member_id = pis_member_id
        self._subtotal = subtotal
        self._tax = tax
        self._shipping = shipping
        self._setup_context_id = setup_context_id
        self._original_amount = original_amount
        self._refund_amount = refund_amount
        self._reserve_pool_amount = reserve_pool_amount
        if shopper_approval_date_time is not None:
            self._shopper_approval_date_time = shopper_approval_date_time
        if cancellation_date_time is not None:
            self._cancellation_date_time = cancellation_date_time
        if activated_date is not None:
            self._activated_date = activated_date
        if de_activated_date is not None:
            self._de_activated_date = de_activated_date
        self._amount_for_funding = amount_for_funding
        if amount_for_funding_currency is not None:
            self._amount_for_funding_currency = amount_for_funding_currency
        self._amount_for_funding_exchange_rate = amount_for_funding_exchange_rate
        self._amount_for_funding_transaction_currency = amount_for_funding_transaction_currency
        if active_card is not None:
            self._active_card = active_card
        if currency is not None:
            self._currency = currency
        if installment_plan_terminal_data is not None:
            self._installment_plan_terminal_data = installment_plan_terminal_data
        if pis_member is not None:
            self._pis_member = pis_member
        if setup_context is not None:
            self._setup_context = setup_context
        if terminal is not None:
            self._terminal = terminal
        if cart_items is not None:
            self._cart_items = cart_items
        if email_audit_logs is not None:
            self._email_audit_logs = email_audit_logs
        if fees_documents is not None:
            self._fees_documents = fees_documents
        if fraud_detection_logs is not None:
            self._fraud_detection_logs = fraud_detection_logs
        if funding_collect_document_details is not None:
            self._funding_collect_document_details = funding_collect_document_details
        if installment_plan_audit_logs is not None:
            self._installment_plan_audit_logs = installment_plan_audit_logs
        if installment_plan_events is not None:
            self._installment_plan_events = installment_plan_events
        if installment_plan_status_log_entries is not None:
            self._installment_plan_status_log_entries = installment_plan_status_log_entries
        if installments is not None:
            self._installments = installments
        if re_authorizations is not None:
            self._re_authorizations = re_authorizations
        if refund_log_entries is not None:
            self._refund_log_entries = refund_log_entries
        if transfer_document_details is not None:
            self._transfer_document_details = transfer_document_details
        if active_terminal_data_id is not None:
            self._active_terminal_data_id = active_terminal_data_id
        if active_terminal_data is not None:
            self._active_terminal_data = active_terminal_data
        if delay_resolution is not None:
            self._delay_resolution = delay_resolution
        self._test_mode = test_mode
        self._funding_types_id = funding_types_id
        self._strategy = strategy
        self._status = status
        self._purchase_method = purchase_method
        if extended_params_serialized_data is not None:
            self._extended_params_serialized_data = extended_params_serialized_data
        if extended_params is not None:
            self._extended_params = extended_params
        self._auto_capture = auto_capture
        if items is not None:
            self._items = items
        if amount_details is not None:
            self._amount_details = amount_details

    @property
    def id(self):
        """Gets the id of this InstallmentPlans.  # noqa: E501


        :return: The id of this InstallmentPlans.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InstallmentPlans.


        :param id: The id of this InstallmentPlans.  # noqa: E501
        :type: int
        """
        
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def terminal_id(self):
        """Gets the terminal_id of this InstallmentPlans.  # noqa: E501


        :return: The terminal_id of this InstallmentPlans.  # noqa: E501
        :rtype: int
        """
        return self._terminal_id

    @terminal_id.setter
    def terminal_id(self, terminal_id):
        """Sets the terminal_id of this InstallmentPlans.


        :param terminal_id: The terminal_id of this InstallmentPlans.  # noqa: E501
        :type: int
        """
        
        if terminal_id is None:
            raise ValueError("Invalid value for `terminal_id`, must not be `None`")  # noqa: E501

        self._terminal_id = terminal_id

    @property
    def number_of_installments(self):
        """Gets the number_of_installments of this InstallmentPlans.  # noqa: E501


        :return: The number_of_installments of this InstallmentPlans.  # noqa: E501
        :rtype: int
        """
        return self._number_of_installments

    @number_of_installments.setter
    def number_of_installments(self, number_of_installments):
        """Sets the number_of_installments of this InstallmentPlans.


        :param number_of_installments: The number_of_installments of this InstallmentPlans.  # noqa: E501
        :type: int
        """
        
        if number_of_installments is None:
            raise ValueError("Invalid value for `number_of_installments`, must not be `None`")  # noqa: E501

        self._number_of_installments = number_of_installments

    @property
    def amount(self):
        """Gets the amount of this InstallmentPlans.  # noqa: E501


        :return: The amount of this InstallmentPlans.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this InstallmentPlans.


        :param amount: The amount of this InstallmentPlans.  # noqa: E501
        :type: float
        """
        
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")  # noqa: E501

        self._amount = amount

    @property
    def amount_before_fees(self):
        """Gets the amount_before_fees of this InstallmentPlans.  # noqa: E501


        :return: The amount_before_fees of this InstallmentPlans.  # noqa: E501
        :rtype: float
        """
        return self._amount_before_fees

    @amount_before_fees.setter
    def amount_before_fees(self, amount_before_fees):
        """Sets the amount_before_fees of this InstallmentPlans.


        :param amount_before_fees: The amount_before_fees of this InstallmentPlans.  # noqa: E501
        :type: float
        """
        
        if amount_before_fees is None:
            raise ValueError("Invalid value for `amount_before_fees`, must not be `None`")  # noqa: E501

        self._amount_before_fees = amount_before_fees

    @property
    def eula(self):
        """Gets the eula of this InstallmentPlans.  # noqa: E501


        :return: The eula of this InstallmentPlans.  # noqa: E501
        :rtype: bool
        """
        return self._eula

    @eula.setter
    def eula(self, eula):
        """Sets the eula of this InstallmentPlans.


        :param eula: The eula of this InstallmentPlans.  # noqa: E501
        :type: bool
        """
        eula = bool(eula)
        if eula is None:
            raise ValueError("Invalid value for `eula`, must not be `None`")  # noqa: E501

        self._eula = eula

    @property
    def installment_plan_number(self):
        """Gets the installment_plan_number of this InstallmentPlans.  # noqa: E501


        :return: The installment_plan_number of this InstallmentPlans.  # noqa: E501
        :rtype: str
        """
        return self._installment_plan_number

    @installment_plan_number.setter
    def installment_plan_number(self, installment_plan_number):
        """Sets the installment_plan_number of this InstallmentPlans.


        :param installment_plan_number: The installment_plan_number of this InstallmentPlans.  # noqa: E501
        :type: str
        """

        self._installment_plan_number = installment_plan_number

    @property
    def is_full_captured(self):
        """Gets the is_full_captured of this InstallmentPlans.  # noqa: E501


        :return: The is_full_captured of this InstallmentPlans.  # noqa: E501
        :rtype: bool
        """
        return self._is_full_captured

    @is_full_captured.setter
    def is_full_captured(self, is_full_captured):
        """Sets the is_full_captured of this InstallmentPlans.


        :param is_full_captured: The is_full_captured of this InstallmentPlans.  # noqa: E501
        :type: bool
        """
        is_full_captured = bool(is_full_captured)
        if is_full_captured is None:
            raise ValueError("Invalid value for `is_full_captured`, must not be `None`")  # noqa: E501

        self._is_full_captured = is_full_captured

    @property
    def begin_lock_time(self):
        """Gets the begin_lock_time of this InstallmentPlans.  # noqa: E501


        :return: The begin_lock_time of this InstallmentPlans.  # noqa: E501
        :rtype: datetime
        """
        return self._begin_lock_time

    @begin_lock_time.setter
    def begin_lock_time(self, begin_lock_time):
        """Sets the begin_lock_time of this InstallmentPlans.


        :param begin_lock_time: The begin_lock_time of this InstallmentPlans.  # noqa: E501
        :type: datetime
        """

        self._begin_lock_time = begin_lock_time

    @property
    def merchant_financed_date(self):
        """Gets the merchant_financed_date of this InstallmentPlans.  # noqa: E501


        :return: The merchant_financed_date of this InstallmentPlans.  # noqa: E501
        :rtype: datetime
        """
        return self._merchant_financed_date

    @merchant_financed_date.setter
    def merchant_financed_date(self, merchant_financed_date):
        """Sets the merchant_financed_date of this InstallmentPlans.


        :param merchant_financed_date: The merchant_financed_date of this InstallmentPlans.  # noqa: E501
        :type: datetime
        """

        self._merchant_financed_date = merchant_financed_date

    @property
    def merchant_reserve_returned_date(self):
        """Gets the merchant_reserve_returned_date of this InstallmentPlans.  # noqa: E501


        :return: The merchant_reserve_returned_date of this InstallmentPlans.  # noqa: E501
        :rtype: datetime
        """
        return self._merchant_reserve_returned_date

    @merchant_reserve_returned_date.setter
    def merchant_reserve_returned_date(self, merchant_reserve_returned_date):
        """Sets the merchant_reserve_returned_date of this InstallmentPlans.


        :param merchant_reserve_returned_date: The merchant_reserve_returned_date of this InstallmentPlans.  # noqa: E501
        :type: datetime
        """

        self._merchant_reserve_returned_date = merchant_reserve_returned_date

    @property
    def planned_full_capture(self):
        """Gets the planned_full_capture of this InstallmentPlans.  # noqa: E501


        :return: The planned_full_capture of this InstallmentPlans.  # noqa: E501
        :rtype: datetime
        """
        return self._planned_full_capture

    @planned_full_capture.setter
    def planned_full_capture(self, planned_full_capture):
        """Sets the planned_full_capture of this InstallmentPlans.


        :param planned_full_capture: The planned_full_capture of this InstallmentPlans.  # noqa: E501
        :type: datetime
        """

        self._planned_full_capture = planned_full_capture

    @property
    def installment_plan_terminal_data_id(self):
        """Gets the installment_plan_terminal_data_id of this InstallmentPlans.  # noqa: E501


        :return: The installment_plan_terminal_data_id of this InstallmentPlans.  # noqa: E501
        :rtype: int
        """
        return self._installment_plan_terminal_data_id

    @installment_plan_terminal_data_id.setter
    def installment_plan_terminal_data_id(self, installment_plan_terminal_data_id):
        """Sets the installment_plan_terminal_data_id of this InstallmentPlans.


        :param installment_plan_terminal_data_id: The installment_plan_terminal_data_id of this InstallmentPlans.  # noqa: E501
        :type: int
        """
        
        if installment_plan_terminal_data_id is None:
            raise ValueError("Invalid value for `installment_plan_terminal_data_id`, must not be `None`")  # noqa: E501

        self._installment_plan_terminal_data_id = installment_plan_terminal_data_id

    @property
    def currency_id(self):
        """Gets the currency_id of this InstallmentPlans.  # noqa: E501


        :return: The currency_id of this InstallmentPlans.  # noqa: E501
        :rtype: int
        """
        return self._currency_id

    @currency_id.setter
    def currency_id(self, currency_id):
        """Sets the currency_id of this InstallmentPlans.


        :param currency_id: The currency_id of this InstallmentPlans.  # noqa: E501
        :type: int
        """
        
        if currency_id is None:
            raise ValueError("Invalid value for `currency_id`, must not be `None`")  # noqa: E501

        self._currency_id = currency_id

    @property
    def ref_order_number(self):
        """Gets the ref_order_number of this InstallmentPlans.  # noqa: E501


        :return: The ref_order_number of this InstallmentPlans.  # noqa: E501
        :rtype: str
        """
        return self._ref_order_number

    @ref_order_number.setter
    def ref_order_number(self, ref_order_number):
        """Sets the ref_order_number of this InstallmentPlans.


        :param ref_order_number: The ref_order_number of this InstallmentPlans.  # noqa: E501
        :type: str
        """

        self._ref_order_number = ref_order_number

    @property
    def active_card_id(self):
        """Gets the active_card_id of this InstallmentPlans.  # noqa: E501


        :return: The active_card_id of this InstallmentPlans.  # noqa: E501
        :rtype: int
        """
        return self._active_card_id

    @active_card_id.setter
    def active_card_id(self, active_card_id):
        """Sets the active_card_id of this InstallmentPlans.


        :param active_card_id: The active_card_id of this InstallmentPlans.  # noqa: E501
        :type: int
        """

        self._active_card_id = active_card_id

    @property
    def base64_png_signature(self):
        """Gets the base64_png_signature of this InstallmentPlans.  # noqa: E501


        :return: The base64_png_signature of this InstallmentPlans.  # noqa: E501
        :rtype: str
        """
        return self._base64_png_signature

    @base64_png_signature.setter
    def base64_png_signature(self, base64_png_signature):
        """Sets the base64_png_signature of this InstallmentPlans.


        :param base64_png_signature: The base64_png_signature of this InstallmentPlans.  # noqa: E501
        :type: str
        """

        self._base64_png_signature = base64_png_signature

    @property
    def is_charged_back(self):
        """Gets the is_charged_back of this InstallmentPlans.  # noqa: E501


        :return: The is_charged_back of this InstallmentPlans.  # noqa: E501
        :rtype: bool
        """
        return self._is_charged_back

    @is_charged_back.setter
    def is_charged_back(self, is_charged_back):
        """Sets the is_charged_back of this InstallmentPlans.


        :param is_charged_back: The is_charged_back of this InstallmentPlans.  # noqa: E501
        :type: bool
        """
        is_charged_back = bool(is_charged_back)
        if is_charged_back is None:
            raise ValueError("Invalid value for `is_charged_back`, must not be `None`")  # noqa: E501

        self._is_charged_back = is_charged_back

    @property
    def are_charges_held(self):
        """Gets the are_charges_held of this InstallmentPlans.  # noqa: E501


        :return: The are_charges_held of this InstallmentPlans.  # noqa: E501
        :rtype: bool
        """
        return self._are_charges_held

    @are_charges_held.setter
    def are_charges_held(self, are_charges_held):
        """Sets the are_charges_held of this InstallmentPlans.


        :param are_charges_held: The are_charges_held of this InstallmentPlans.  # noqa: E501
        :type: bool
        """
        are_charges_held = bool(are_charges_held)
        if are_charges_held is None:
            raise ValueError("Invalid value for `are_charges_held`, must not be `None`")  # noqa: E501

        self._are_charges_held = are_charges_held

    @property
    def auto_retry(self):
        """Gets the auto_retry of this InstallmentPlans.  # noqa: E501


        :return: The auto_retry of this InstallmentPlans.  # noqa: E501
        :rtype: bool
        """
        return self._auto_retry

    @auto_retry.setter
    def auto_retry(self, auto_retry):
        """Sets the auto_retry of this InstallmentPlans.


        :param auto_retry: The auto_retry of this InstallmentPlans.  # noqa: E501
        :type: bool
        """
        auto_retry = bool(auto_retry)
        if auto_retry is None:
            raise ValueError("Invalid value for `auto_retry`, must not be `None`")  # noqa: E501

        self._auto_retry = auto_retry

    @property
    def pis_member_unique_id(self):
        """Gets the pis_member_unique_id of this InstallmentPlans.  # noqa: E501


        :return: The pis_member_unique_id of this InstallmentPlans.  # noqa: E501
        :rtype: str
        """
        return self._pis_member_unique_id

    @pis_member_unique_id.setter
    def pis_member_unique_id(self, pis_member_unique_id):
        """Sets the pis_member_unique_id of this InstallmentPlans.


        :param pis_member_unique_id: The pis_member_unique_id of this InstallmentPlans.  # noqa: E501
        :type: str
        """

        self._pis_member_unique_id = pis_member_unique_id

    @property
    def pis_member_id(self):
        """Gets the pis_member_id of this InstallmentPlans.  # noqa: E501


        :return: The pis_member_id of this InstallmentPlans.  # noqa: E501
        :rtype: int
        """
        return self._pis_member_id

    @pis_member_id.setter
    def pis_member_id(self, pis_member_id):
        """Sets the pis_member_id of this InstallmentPlans.


        :param pis_member_id: The pis_member_id of this InstallmentPlans.  # noqa: E501
        :type: int
        """

        self._pis_member_id = pis_member_id

    @property
    def subtotal(self):
        """Gets the subtotal of this InstallmentPlans.  # noqa: E501


        :return: The subtotal of this InstallmentPlans.  # noqa: E501
        :rtype: float
        """
        return self._subtotal

    @subtotal.setter
    def subtotal(self, subtotal):
        """Sets the subtotal of this InstallmentPlans.


        :param subtotal: The subtotal of this InstallmentPlans.  # noqa: E501
        :type: float
        """
        
        if subtotal is None:
            raise ValueError("Invalid value for `subtotal`, must not be `None`")  # noqa: E501

        self._subtotal = subtotal

    @property
    def tax(self):
        """Gets the tax of this InstallmentPlans.  # noqa: E501


        :return: The tax of this InstallmentPlans.  # noqa: E501
        :rtype: float
        """
        return self._tax

    @tax.setter
    def tax(self, tax):
        """Sets the tax of this InstallmentPlans.


        :param tax: The tax of this InstallmentPlans.  # noqa: E501
        :type: float
        """
        
        if tax is None:
            raise ValueError("Invalid value for `tax`, must not be `None`")  # noqa: E501

        self._tax = tax

    @property
    def shipping(self):
        """Gets the shipping of this InstallmentPlans.  # noqa: E501


        :return: The shipping of this InstallmentPlans.  # noqa: E501
        :rtype: float
        """
        return self._shipping

    @shipping.setter
    def shipping(self, shipping):
        """Sets the shipping of this InstallmentPlans.


        :param shipping: The shipping of this InstallmentPlans.  # noqa: E501
        :type: float
        """
        
        if shipping is None:
            raise ValueError("Invalid value for `shipping`, must not be `None`")  # noqa: E501

        self._shipping = shipping

    @property
    def setup_context_id(self):
        """Gets the setup_context_id of this InstallmentPlans.  # noqa: E501


        :return: The setup_context_id of this InstallmentPlans.  # noqa: E501
        :rtype: int
        """
        return self._setup_context_id

    @setup_context_id.setter
    def setup_context_id(self, setup_context_id):
        """Sets the setup_context_id of this InstallmentPlans.


        :param setup_context_id: The setup_context_id of this InstallmentPlans.  # noqa: E501
        :type: int
        """
        
        if setup_context_id is None:
            raise ValueError("Invalid value for `setup_context_id`, must not be `None`")  # noqa: E501

        self._setup_context_id = setup_context_id

    @property
    def original_amount(self):
        """Gets the original_amount of this InstallmentPlans.  # noqa: E501


        :return: The original_amount of this InstallmentPlans.  # noqa: E501
        :rtype: float
        """
        return self._original_amount

    @original_amount.setter
    def original_amount(self, original_amount):
        """Sets the original_amount of this InstallmentPlans.


        :param original_amount: The original_amount of this InstallmentPlans.  # noqa: E501
        :type: float
        """
        
        if original_amount is None:
            raise ValueError("Invalid value for `original_amount`, must not be `None`")  # noqa: E501

        self._original_amount = original_amount

    @property
    def refund_amount(self):
        """Gets the refund_amount of this InstallmentPlans.  # noqa: E501


        :return: The refund_amount of this InstallmentPlans.  # noqa: E501
        :rtype: float
        """
        return self._refund_amount

    @refund_amount.setter
    def refund_amount(self, refund_amount):
        """Sets the refund_amount of this InstallmentPlans.


        :param refund_amount: The refund_amount of this InstallmentPlans.  # noqa: E501
        :type: float
        """
        
        if refund_amount is None:
            raise ValueError("Invalid value for `refund_amount`, must not be `None`")  # noqa: E501

        self._refund_amount = refund_amount

    @property
    def reserve_pool_amount(self):
        """Gets the reserve_pool_amount of this InstallmentPlans.  # noqa: E501


        :return: The reserve_pool_amount of this InstallmentPlans.  # noqa: E501
        :rtype: float
        """
        return self._reserve_pool_amount

    @reserve_pool_amount.setter
    def reserve_pool_amount(self, reserve_pool_amount):
        """Sets the reserve_pool_amount of this InstallmentPlans.


        :param reserve_pool_amount: The reserve_pool_amount of this InstallmentPlans.  # noqa: E501
        :type: float
        """
        
        if reserve_pool_amount is None:
            raise ValueError("Invalid value for `reserve_pool_amount`, must not be `None`")  # noqa: E501

        self._reserve_pool_amount = reserve_pool_amount

    @property
    def shopper_approval_date_time(self):
        """Gets the shopper_approval_date_time of this InstallmentPlans.  # noqa: E501


        :return: The shopper_approval_date_time of this InstallmentPlans.  # noqa: E501
        :rtype: datetime
        """
        return self._shopper_approval_date_time

    @shopper_approval_date_time.setter
    def shopper_approval_date_time(self, shopper_approval_date_time):
        """Sets the shopper_approval_date_time of this InstallmentPlans.


        :param shopper_approval_date_time: The shopper_approval_date_time of this InstallmentPlans.  # noqa: E501
        :type: datetime
        """

        self._shopper_approval_date_time = shopper_approval_date_time

    @property
    def cancellation_date_time(self):
        """Gets the cancellation_date_time of this InstallmentPlans.  # noqa: E501


        :return: The cancellation_date_time of this InstallmentPlans.  # noqa: E501
        :rtype: datetime
        """
        return self._cancellation_date_time

    @cancellation_date_time.setter
    def cancellation_date_time(self, cancellation_date_time):
        """Sets the cancellation_date_time of this InstallmentPlans.


        :param cancellation_date_time: The cancellation_date_time of this InstallmentPlans.  # noqa: E501
        :type: datetime
        """

        self._cancellation_date_time = cancellation_date_time

    @property
    def activated_date(self):
        """Gets the activated_date of this InstallmentPlans.  # noqa: E501


        :return: The activated_date of this InstallmentPlans.  # noqa: E501
        :rtype: datetime
        """
        return self._activated_date

    @activated_date.setter
    def activated_date(self, activated_date):
        """Sets the activated_date of this InstallmentPlans.


        :param activated_date: The activated_date of this InstallmentPlans.  # noqa: E501
        :type: datetime
        """

        self._activated_date = activated_date

    @property
    def de_activated_date(self):
        """Gets the de_activated_date of this InstallmentPlans.  # noqa: E501


        :return: The de_activated_date of this InstallmentPlans.  # noqa: E501
        :rtype: datetime
        """
        return self._de_activated_date

    @de_activated_date.setter
    def de_activated_date(self, de_activated_date):
        """Sets the de_activated_date of this InstallmentPlans.


        :param de_activated_date: The de_activated_date of this InstallmentPlans.  # noqa: E501
        :type: datetime
        """

        self._de_activated_date = de_activated_date

    @property
    def amount_for_funding(self):
        """Gets the amount_for_funding of this InstallmentPlans.  # noqa: E501


        :return: The amount_for_funding of this InstallmentPlans.  # noqa: E501
        :rtype: float
        """
        return self._amount_for_funding

    @amount_for_funding.setter
    def amount_for_funding(self, amount_for_funding):
        """Sets the amount_for_funding of this InstallmentPlans.


        :param amount_for_funding: The amount_for_funding of this InstallmentPlans.  # noqa: E501
        :type: float
        """
        
        if amount_for_funding is None:
            raise ValueError("Invalid value for `amount_for_funding`, must not be `None`")  # noqa: E501

        self._amount_for_funding = amount_for_funding

    @property
    def amount_for_funding_currency(self):
        """Gets the amount_for_funding_currency of this InstallmentPlans.  # noqa: E501


        :return: The amount_for_funding_currency of this InstallmentPlans.  # noqa: E501
        :rtype: Currencies
        """
        return self._amount_for_funding_currency

    @amount_for_funding_currency.setter
    def amount_for_funding_currency(self, amount_for_funding_currency):
        """Sets the amount_for_funding_currency of this InstallmentPlans.


        :param amount_for_funding_currency: The amount_for_funding_currency of this InstallmentPlans.  # noqa: E501
        :type: Currencies
        """

        self._amount_for_funding_currency = amount_for_funding_currency

    @property
    def amount_for_funding_exchange_rate(self):
        """Gets the amount_for_funding_exchange_rate of this InstallmentPlans.  # noqa: E501


        :return: The amount_for_funding_exchange_rate of this InstallmentPlans.  # noqa: E501
        :rtype: float
        """
        return self._amount_for_funding_exchange_rate

    @amount_for_funding_exchange_rate.setter
    def amount_for_funding_exchange_rate(self, amount_for_funding_exchange_rate):
        """Sets the amount_for_funding_exchange_rate of this InstallmentPlans.


        :param amount_for_funding_exchange_rate: The amount_for_funding_exchange_rate of this InstallmentPlans.  # noqa: E501
        :type: float
        """
        
        if amount_for_funding_exchange_rate is None:
            raise ValueError("Invalid value for `amount_for_funding_exchange_rate`, must not be `None`")  # noqa: E501

        self._amount_for_funding_exchange_rate = amount_for_funding_exchange_rate

    @property
    def amount_for_funding_transaction_currency(self):
        """Gets the amount_for_funding_transaction_currency of this InstallmentPlans.  # noqa: E501


        :return: The amount_for_funding_transaction_currency of this InstallmentPlans.  # noqa: E501
        :rtype: float
        """
        return self._amount_for_funding_transaction_currency

    @amount_for_funding_transaction_currency.setter
    def amount_for_funding_transaction_currency(self, amount_for_funding_transaction_currency):
        """Sets the amount_for_funding_transaction_currency of this InstallmentPlans.


        :param amount_for_funding_transaction_currency: The amount_for_funding_transaction_currency of this InstallmentPlans.  # noqa: E501
        :type: float
        """
        
        if amount_for_funding_transaction_currency is None:
            raise ValueError("Invalid value for `amount_for_funding_transaction_currency`, must not be `None`")  # noqa: E501

        self._amount_for_funding_transaction_currency = amount_for_funding_transaction_currency

    @property
    def active_card(self):
        """Gets the active_card of this InstallmentPlans.  # noqa: E501


        :return: The active_card of this InstallmentPlans.  # noqa: E501
        :rtype: Cards
        """
        return self._active_card

    @active_card.setter
    def active_card(self, active_card):
        """Sets the active_card of this InstallmentPlans.


        :param active_card: The active_card of this InstallmentPlans.  # noqa: E501
        :type: Cards
        """

        self._active_card = active_card

    @property
    def currency(self):
        """Gets the currency of this InstallmentPlans.  # noqa: E501


        :return: The currency of this InstallmentPlans.  # noqa: E501
        :rtype: Currencies
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this InstallmentPlans.


        :param currency: The currency of this InstallmentPlans.  # noqa: E501
        :type: Currencies
        """

        self._currency = currency

    @property
    def installment_plan_terminal_data(self):
        """Gets the installment_plan_terminal_data of this InstallmentPlans.  # noqa: E501


        :return: The installment_plan_terminal_data of this InstallmentPlans.  # noqa: E501
        :rtype: InstallmentPlanTerminalDatas
        """
        return self._installment_plan_terminal_data

    @installment_plan_terminal_data.setter
    def installment_plan_terminal_data(self, installment_plan_terminal_data):
        """Sets the installment_plan_terminal_data of this InstallmentPlans.


        :param installment_plan_terminal_data: The installment_plan_terminal_data of this InstallmentPlans.  # noqa: E501
        :type: InstallmentPlanTerminalDatas
        """

        self._installment_plan_terminal_data = installment_plan_terminal_data

    @property
    def pis_member(self):
        """Gets the pis_member of this InstallmentPlans.  # noqa: E501


        :return: The pis_member of this InstallmentPlans.  # noqa: E501
        :rtype: object
        """
        return self._pis_member

    @pis_member.setter
    def pis_member(self, pis_member):
        """Sets the pis_member of this InstallmentPlans.


        :param pis_member: The pis_member of this InstallmentPlans.  # noqa: E501
        :type: object
        """

        self._pis_member = pis_member

    @property
    def setup_context(self):
        """Gets the setup_context of this InstallmentPlans.  # noqa: E501


        :return: The setup_context of this InstallmentPlans.  # noqa: E501
        :rtype: InstallmentPlanSetupContexts
        """
        return self._setup_context

    @setup_context.setter
    def setup_context(self, setup_context):
        """Sets the setup_context of this InstallmentPlans.


        :param setup_context: The setup_context of this InstallmentPlans.  # noqa: E501
        :type: InstallmentPlanSetupContexts
        """

        self._setup_context = setup_context

    @property
    def terminal(self):
        """Gets the terminal of this InstallmentPlans.  # noqa: E501


        :return: The terminal of this InstallmentPlans.  # noqa: E501
        :rtype: Terminals
        """
        return self._terminal

    @terminal.setter
    def terminal(self, terminal):
        """Sets the terminal of this InstallmentPlans.


        :param terminal: The terminal of this InstallmentPlans.  # noqa: E501
        :type: Terminals
        """

        self._terminal = terminal

    @property
    def cart_items(self):
        """Gets the cart_items of this InstallmentPlans.  # noqa: E501


        :return: The cart_items of this InstallmentPlans.  # noqa: E501
        :rtype: list[CartItems]
        """
        return self._cart_items

    @cart_items.setter
    def cart_items(self, cart_items):
        """Sets the cart_items of this InstallmentPlans.


        :param cart_items: The cart_items of this InstallmentPlans.  # noqa: E501
        :type: list[CartItems]
        """

        self._cart_items = cart_items

    @property
    def email_audit_logs(self):
        """Gets the email_audit_logs of this InstallmentPlans.  # noqa: E501


        :return: The email_audit_logs of this InstallmentPlans.  # noqa: E501
        :rtype: list[EmailAuditLogs]
        """
        return self._email_audit_logs

    @email_audit_logs.setter
    def email_audit_logs(self, email_audit_logs):
        """Sets the email_audit_logs of this InstallmentPlans.


        :param email_audit_logs: The email_audit_logs of this InstallmentPlans.  # noqa: E501
        :type: list[EmailAuditLogs]
        """

        self._email_audit_logs = email_audit_logs

    @property
    def fees_documents(self):
        """Gets the fees_documents of this InstallmentPlans.  # noqa: E501


        :return: The fees_documents of this InstallmentPlans.  # noqa: E501
        :rtype: list[FeesDocuments]
        """
        return self._fees_documents

    @fees_documents.setter
    def fees_documents(self, fees_documents):
        """Sets the fees_documents of this InstallmentPlans.


        :param fees_documents: The fees_documents of this InstallmentPlans.  # noqa: E501
        :type: list[FeesDocuments]
        """

        self._fees_documents = fees_documents

    @property
    def fraud_detection_logs(self):
        """Gets the fraud_detection_logs of this InstallmentPlans.  # noqa: E501


        :return: The fraud_detection_logs of this InstallmentPlans.  # noqa: E501
        :rtype: list[FraudDetectionLogs]
        """
        return self._fraud_detection_logs

    @fraud_detection_logs.setter
    def fraud_detection_logs(self, fraud_detection_logs):
        """Sets the fraud_detection_logs of this InstallmentPlans.


        :param fraud_detection_logs: The fraud_detection_logs of this InstallmentPlans.  # noqa: E501
        :type: list[FraudDetectionLogs]
        """

        self._fraud_detection_logs = fraud_detection_logs

    @property
    def funding_collect_document_details(self):
        """Gets the funding_collect_document_details of this InstallmentPlans.  # noqa: E501


        :return: The funding_collect_document_details of this InstallmentPlans.  # noqa: E501
        :rtype: list[FundingCollectDocumentDetails]
        """
        return self._funding_collect_document_details

    @funding_collect_document_details.setter
    def funding_collect_document_details(self, funding_collect_document_details):
        """Sets the funding_collect_document_details of this InstallmentPlans.


        :param funding_collect_document_details: The funding_collect_document_details of this InstallmentPlans.  # noqa: E501
        :type: list[FundingCollectDocumentDetails]
        """

        self._funding_collect_document_details = funding_collect_document_details

    @property
    def installment_plan_audit_logs(self):
        """Gets the installment_plan_audit_logs of this InstallmentPlans.  # noqa: E501


        :return: The installment_plan_audit_logs of this InstallmentPlans.  # noqa: E501
        :rtype: list[InstallmentPlanAuditLogs]
        """
        return self._installment_plan_audit_logs

    @installment_plan_audit_logs.setter
    def installment_plan_audit_logs(self, installment_plan_audit_logs):
        """Sets the installment_plan_audit_logs of this InstallmentPlans.


        :param installment_plan_audit_logs: The installment_plan_audit_logs of this InstallmentPlans.  # noqa: E501
        :type: list[InstallmentPlanAuditLogs]
        """

        self._installment_plan_audit_logs = installment_plan_audit_logs

    @property
    def installment_plan_events(self):
        """Gets the installment_plan_events of this InstallmentPlans.  # noqa: E501


        :return: The installment_plan_events of this InstallmentPlans.  # noqa: E501
        :rtype: list[InstallmentPlanEvents]
        """
        return self._installment_plan_events

    @installment_plan_events.setter
    def installment_plan_events(self, installment_plan_events):
        """Sets the installment_plan_events of this InstallmentPlans.


        :param installment_plan_events: The installment_plan_events of this InstallmentPlans.  # noqa: E501
        :type: list[InstallmentPlanEvents]
        """

        self._installment_plan_events = installment_plan_events

    @property
    def installment_plan_status_log_entries(self):
        """Gets the installment_plan_status_log_entries of this InstallmentPlans.  # noqa: E501


        :return: The installment_plan_status_log_entries of this InstallmentPlans.  # noqa: E501
        :rtype: list[InstallmentPlanStatusLogEntries]
        """
        return self._installment_plan_status_log_entries

    @installment_plan_status_log_entries.setter
    def installment_plan_status_log_entries(self, installment_plan_status_log_entries):
        """Sets the installment_plan_status_log_entries of this InstallmentPlans.


        :param installment_plan_status_log_entries: The installment_plan_status_log_entries of this InstallmentPlans.  # noqa: E501
        :type: list[InstallmentPlanStatusLogEntries]
        """

        self._installment_plan_status_log_entries = installment_plan_status_log_entries

    @property
    def installments(self):
        """Gets the installments of this InstallmentPlans.  # noqa: E501


        :return: The installments of this InstallmentPlans.  # noqa: E501
        :rtype: list[Installments]
        """
        return self._installments

    @installments.setter
    def installments(self, installments):
        """Sets the installments of this InstallmentPlans.


        :param installments: The installments of this InstallmentPlans.  # noqa: E501
        :type: list[Installments]
        """

        self._installments = installments

    @property
    def re_authorizations(self):
        """Gets the re_authorizations of this InstallmentPlans.  # noqa: E501


        :return: The re_authorizations of this InstallmentPlans.  # noqa: E501
        :rtype: list[ReAuthorizations]
        """
        return self._re_authorizations

    @re_authorizations.setter
    def re_authorizations(self, re_authorizations):
        """Sets the re_authorizations of this InstallmentPlans.


        :param re_authorizations: The re_authorizations of this InstallmentPlans.  # noqa: E501
        :type: list[ReAuthorizations]
        """

        self._re_authorizations = re_authorizations

    @property
    def refund_log_entries(self):
        """Gets the refund_log_entries of this InstallmentPlans.  # noqa: E501


        :return: The refund_log_entries of this InstallmentPlans.  # noqa: E501
        :rtype: list[RefundLogEntries]
        """
        return self._refund_log_entries

    @refund_log_entries.setter
    def refund_log_entries(self, refund_log_entries):
        """Sets the refund_log_entries of this InstallmentPlans.


        :param refund_log_entries: The refund_log_entries of this InstallmentPlans.  # noqa: E501
        :type: list[RefundLogEntries]
        """

        self._refund_log_entries = refund_log_entries

    @property
    def transfer_document_details(self):
        """Gets the transfer_document_details of this InstallmentPlans.  # noqa: E501


        :return: The transfer_document_details of this InstallmentPlans.  # noqa: E501
        :rtype: list[TransferDocumentDetails]
        """
        return self._transfer_document_details

    @transfer_document_details.setter
    def transfer_document_details(self, transfer_document_details):
        """Sets the transfer_document_details of this InstallmentPlans.


        :param transfer_document_details: The transfer_document_details of this InstallmentPlans.  # noqa: E501
        :type: list[TransferDocumentDetails]
        """

        self._transfer_document_details = transfer_document_details

    @property
    def active_terminal_data_id(self):
        """Gets the active_terminal_data_id of this InstallmentPlans.  # noqa: E501


        :return: The active_terminal_data_id of this InstallmentPlans.  # noqa: E501
        :rtype: int
        """
        return self._active_terminal_data_id

    @active_terminal_data_id.setter
    def active_terminal_data_id(self, active_terminal_data_id):
        """Sets the active_terminal_data_id of this InstallmentPlans.


        :param active_terminal_data_id: The active_terminal_data_id of this InstallmentPlans.  # noqa: E501
        :type: int
        """

        self._active_terminal_data_id = active_terminal_data_id

    @property
    def active_terminal_data(self):
        """Gets the active_terminal_data of this InstallmentPlans.  # noqa: E501


        :return: The active_terminal_data of this InstallmentPlans.  # noqa: E501
        :rtype: TerminalGatewayDatas
        """
        return self._active_terminal_data

    @active_terminal_data.setter
    def active_terminal_data(self, active_terminal_data):
        """Sets the active_terminal_data of this InstallmentPlans.


        :param active_terminal_data: The active_terminal_data of this InstallmentPlans.  # noqa: E501
        :type: TerminalGatewayDatas
        """

        self._active_terminal_data = active_terminal_data

    @property
    def delay_resolution(self):
        """Gets the delay_resolution of this InstallmentPlans.  # noqa: E501


        :return: The delay_resolution of this InstallmentPlans.  # noqa: E501
        :rtype: DelayResolution
        """
        return self._delay_resolution

    @delay_resolution.setter
    def delay_resolution(self, delay_resolution):
        """Sets the delay_resolution of this InstallmentPlans.


        :param delay_resolution: The delay_resolution of this InstallmentPlans.  # noqa: E501
        :type: DelayResolution
        """

        self._delay_resolution = delay_resolution

    @property
    def test_mode(self):
        """Gets the test_mode of this InstallmentPlans.  # noqa: E501


        :return: The test_mode of this InstallmentPlans.  # noqa: E501
        :rtype: TestModes
        """
        return self._test_mode

    @test_mode.setter
    def test_mode(self, test_mode):
        """Sets the test_mode of this InstallmentPlans.


        :param test_mode: The test_mode of this InstallmentPlans.  # noqa: E501
        :type: TestModes
        """
        
        if test_mode is None:
            raise ValueError("Invalid value for `test_mode`, must not be `None`")  # noqa: E501

        self._test_mode = test_mode

    @property
    def funding_types_id(self):
        """Gets the funding_types_id of this InstallmentPlans.  # noqa: E501


        :return: The funding_types_id of this InstallmentPlans.  # noqa: E501
        :rtype: MoneyFlows
        """
        return self._funding_types_id

    @funding_types_id.setter
    def funding_types_id(self, funding_types_id):
        """Sets the funding_types_id of this InstallmentPlans.


        :param funding_types_id: The funding_types_id of this InstallmentPlans.  # noqa: E501
        :type: MoneyFlows
        """
        
        if funding_types_id is None:
            raise ValueError("Invalid value for `funding_types_id`, must not be `None`")  # noqa: E501

        self._funding_types_id = funding_types_id

    @property
    def strategy(self):
        """Gets the strategy of this InstallmentPlans.  # noqa: E501


        :return: The strategy of this InstallmentPlans.  # noqa: E501
        :rtype: PlanStrategy
        """
        return self._strategy

    @strategy.setter
    def strategy(self, strategy):
        """Sets the strategy of this InstallmentPlans.


        :param strategy: The strategy of this InstallmentPlans.  # noqa: E501
        :type: PlanStrategy
        """
        
        if strategy is None:
            raise ValueError("Invalid value for `strategy`, must not be `None`")  # noqa: E501

        self._strategy = strategy

    @property
    def status(self):
        """Gets the status of this InstallmentPlans.  # noqa: E501


        :return: The status of this InstallmentPlans.  # noqa: E501
        :rtype: InstallmentPlanStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this InstallmentPlans.


        :param status: The status of this InstallmentPlans.  # noqa: E501
        :type: InstallmentPlanStatus
        """
        
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def purchase_method(self):
        """Gets the purchase_method of this InstallmentPlans.  # noqa: E501


        :return: The purchase_method of this InstallmentPlans.  # noqa: E501
        :rtype: PurchaseMethod
        """
        return self._purchase_method

    @purchase_method.setter
    def purchase_method(self, purchase_method):
        """Sets the purchase_method of this InstallmentPlans.


        :param purchase_method: The purchase_method of this InstallmentPlans.  # noqa: E501
        :type: PurchaseMethod
        """
        
        if purchase_method is None:
            raise ValueError("Invalid value for `purchase_method`, must not be `None`")  # noqa: E501

        self._purchase_method = purchase_method

    @property
    def extended_params_serialized_data(self):
        """Gets the extended_params_serialized_data of this InstallmentPlans.  # noqa: E501


        :return: The extended_params_serialized_data of this InstallmentPlans.  # noqa: E501
        :rtype: str
        """
        return self._extended_params_serialized_data

    @extended_params_serialized_data.setter
    def extended_params_serialized_data(self, extended_params_serialized_data):
        """Sets the extended_params_serialized_data of this InstallmentPlans.


        :param extended_params_serialized_data: The extended_params_serialized_data of this InstallmentPlans.  # noqa: E501
        :type: str
        """

        self._extended_params_serialized_data = extended_params_serialized_data

    @property
    def extended_params(self):
        """Gets the extended_params of this InstallmentPlans.  # noqa: E501


        :return: The extended_params of this InstallmentPlans.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._extended_params

    @extended_params.setter
    def extended_params(self, extended_params):
        """Sets the extended_params of this InstallmentPlans.


        :param extended_params: The extended_params of this InstallmentPlans.  # noqa: E501
        :type: dict(str, str)
        """

        self._extended_params = extended_params

    @property
    def auto_capture(self):
        """Gets the auto_capture of this InstallmentPlans.  # noqa: E501


        :return: The auto_capture of this InstallmentPlans.  # noqa: E501
        :rtype: bool
        """
        return self._auto_capture

    @auto_capture.setter
    def auto_capture(self, auto_capture):
        """Sets the auto_capture of this InstallmentPlans.


        :param auto_capture: The auto_capture of this InstallmentPlans.  # noqa: E501
        :type: bool
        """
        auto_capture = bool(auto_capture)
        if auto_capture is None:
            raise ValueError("Invalid value for `auto_capture`, must not be `None`")  # noqa: E501

        self._auto_capture = auto_capture

    @property
    def items(self):
        """Gets the items of this InstallmentPlans.  # noqa: E501


        :return: The items of this InstallmentPlans.  # noqa: E501
        :rtype: list[CartItems]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this InstallmentPlans.


        :param items: The items of this InstallmentPlans.  # noqa: E501
        :type: list[CartItems]
        """

        self._items = items

    @property
    def amount_details(self):
        """Gets the amount_details of this InstallmentPlans.  # noqa: E501


        :return: The amount_details of this InstallmentPlans.  # noqa: E501
        :rtype: AmountDetails2
        """
        return self._amount_details

    @amount_details.setter
    def amount_details(self, amount_details):
        """Sets the amount_details of this InstallmentPlans.


        :param amount_details: The amount_details of this InstallmentPlans.  # noqa: E501
        :type: AmountDetails2
        """

        self._amount_details = amount_details

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InstallmentPlans, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InstallmentPlans):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
