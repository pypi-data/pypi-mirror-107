# coding: utf-8

"""
    splitit-web-api-public-sdk

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Merchants(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'address': 'str',
        'email': 'str',
        'merchant_admin_website': 'bool',
        'web_api': 'bool',
        'embedded_clients': 'bool',
        'crm_id': 'str',
        'sf_parent_account_external_id': 'str',
        'sf_lead_id': 'str',
        'sf_parent_account_name': 'str',
        'merchant_vertical': 'str',
        'sf_account_id': 'str',
        'declared_annual_volume_usd': 'float',
        'declared_aovusd': 'float',
        'logo_image': 'str',
        'logo_file_extension': 'str',
        'code': 'str',
        'support_email': 'str',
        'support_phone': 'str',
        'parameter_group_id': 'int',
        'business_unit_id': 'int',
        'logo_url': 'str',
        'merchant_legal_name': 'str',
        'splitit_merchant_id': 'str',
        'website_url': 'str',
        'billing_address_address_line': 'str',
        'billing_address_address_line2': 'str',
        'billing_address_city': 'str',
        'org_group': 'str',
        'billing_address_country_id': 'int',
        'billing_address_state_id': 'int',
        'billing_address_zip': 'str',
        'billing_address_legacy_full_address_line': 'str',
        'vat_tax_id': 'str',
        'sales_accossiate_id': 'int',
        'registered_country_of_business_country_id': 'int',
        'registered_country_of_business_state_id': 'int',
        'merchant_country_country_id': 'int',
        'merchant_country_state_id': 'int',
        'bank_details_bank_account_name': 'str',
        'bank_details_bank_routing_number': 'str',
        'bank_details_bank_account_number': 'str',
        'reports_folder_name': 'str',
        'on_boarding_method': 'OnBoardingMethod',
        'business_unit': 'BusinessUnits',
        'parameter_group': 'ParameterGroups',
        'sales_accossiate': 'SalesAssociates',
        'api_users': 'ApiUsers',
        'agents': 'list[Agents]',
        'installment_plan_events_subscription_datas': 'list[InstallmentPlanEventsSubscriptionDatas]',
        'terminals': 'list[Terminals]',
        'touch_point_color_values': 'list[TouchPointColorValues]',
        'is_test': 'bool',
        'marked_for_deletion': 'bool',
        'registered_country_of_business': 'CountryState',
        'merchant_country': 'CountryState',
        'status': 'MerchantStatus',
        'vertical': 'object',
        'bank_details': 'BankDetails',
        'billing_address': 'AddressData2',
        'country': 'Countries',
        'state': 'CountrySubdivisions',
        'splitit_signing_entity': 'SplititEntity',
        'splitit_current_entity': 'SplititEntity'
    }

    attribute_map = {
        'id': 'Id',
        'name': 'Name',
        'address': 'Address',
        'email': 'Email',
        'merchant_admin_website': 'MerchantAdminWebsite',
        'web_api': 'WebApi',
        'embedded_clients': 'EmbeddedClients',
        'crm_id': 'CrmId',
        'sf_parent_account_external_id': 'SFParentAccountExternalId',
        'sf_lead_id': 'SFLeadId',
        'sf_parent_account_name': 'SFParentAccountName',
        'merchant_vertical': 'MerchantVertical',
        'sf_account_id': 'SFAccountId',
        'declared_annual_volume_usd': 'DeclaredAnnualVolumeUSD',
        'declared_aovusd': 'DeclaredAOVUSD',
        'logo_image': 'LogoImage',
        'logo_file_extension': 'LogoFileExtension',
        'code': 'Code',
        'support_email': 'SupportEmail',
        'support_phone': 'SupportPhone',
        'parameter_group_id': 'ParameterGroupId',
        'business_unit_id': 'BusinessUnitId',
        'logo_url': 'LogoUrl',
        'merchant_legal_name': 'MerchantLegalName',
        'splitit_merchant_id': 'SplititMerchantId',
        'website_url': 'WebsiteUrl',
        'billing_address_address_line': 'BillingAddressAddressLine',
        'billing_address_address_line2': 'BillingAddressAddressLine2',
        'billing_address_city': 'BillingAddressCity',
        'org_group': 'OrgGroup',
        'billing_address_country_id': 'BillingAddressCountryId',
        'billing_address_state_id': 'BillingAddressStateId',
        'billing_address_zip': 'BillingAddressZip',
        'billing_address_legacy_full_address_line': 'BillingAddressLegacyFullAddressLine',
        'vat_tax_id': 'VatTaxId',
        'sales_accossiate_id': 'SalesAccossiateId',
        'registered_country_of_business_country_id': 'RegisteredCountryOfBusinessCountryId',
        'registered_country_of_business_state_id': 'RegisteredCountryOfBusinessStateId',
        'merchant_country_country_id': 'MerchantCountryCountryId',
        'merchant_country_state_id': 'MerchantCountryStateId',
        'bank_details_bank_account_name': 'BankDetailsBankAccountName',
        'bank_details_bank_routing_number': 'BankDetailsBankRoutingNumber',
        'bank_details_bank_account_number': 'BankDetailsBankAccountNumber',
        'reports_folder_name': 'ReportsFolderName',
        'on_boarding_method': 'OnBoardingMethod',
        'business_unit': 'BusinessUnit',
        'parameter_group': 'ParameterGroup',
        'sales_accossiate': 'SalesAccossiate',
        'api_users': 'ApiUsers',
        'agents': 'Agents',
        'installment_plan_events_subscription_datas': 'InstallmentPlanEventsSubscriptionDatas',
        'terminals': 'Terminals',
        'touch_point_color_values': 'TouchPointColorValues',
        'is_test': 'IsTest',
        'marked_for_deletion': 'MarkedForDeletion',
        'registered_country_of_business': 'RegisteredCountryOfBusiness',
        'merchant_country': 'MerchantCountry',
        'status': 'Status',
        'vertical': 'Vertical',
        'bank_details': 'BankDetails',
        'billing_address': 'BillingAddress',
        'country': 'Country',
        'state': 'State',
        'splitit_signing_entity': 'SplititSigningEntity',
        'splitit_current_entity': 'SplititCurrentEntity'
    }

    def __init__(self, id=None, name=None, address=None, email=None, merchant_admin_website=None, web_api=None, embedded_clients=None, crm_id=None, sf_parent_account_external_id=None, sf_lead_id=None, sf_parent_account_name=None, merchant_vertical=None, sf_account_id=None, declared_annual_volume_usd=None, declared_aovusd=None, logo_image=None, logo_file_extension=None, code=None, support_email=None, support_phone=None, parameter_group_id=None, business_unit_id=None, logo_url=None, merchant_legal_name=None, splitit_merchant_id=None, website_url=None, billing_address_address_line=None, billing_address_address_line2=None, billing_address_city=None, org_group=None, billing_address_country_id=None, billing_address_state_id=None, billing_address_zip=None, billing_address_legacy_full_address_line=None, vat_tax_id=None, sales_accossiate_id=None, registered_country_of_business_country_id=None, registered_country_of_business_state_id=None, merchant_country_country_id=None, merchant_country_state_id=None, bank_details_bank_account_name=None, bank_details_bank_routing_number=None, bank_details_bank_account_number=None, reports_folder_name=None, on_boarding_method=None, business_unit=None, parameter_group=None, sales_accossiate=None, api_users=None, agents=None, installment_plan_events_subscription_datas=None, terminals=None, touch_point_color_values=None, is_test=None, marked_for_deletion=None, registered_country_of_business=None, merchant_country=None, status=None, vertical=None, bank_details=None, billing_address=None, country=None, state=None, splitit_signing_entity=None, splitit_current_entity=None):  # noqa: E501
        """Merchants - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._name = None
        self._address = None
        self._email = None
        self._merchant_admin_website = None
        self._web_api = None
        self._embedded_clients = None
        self._crm_id = None
        self._sf_parent_account_external_id = None
        self._sf_lead_id = None
        self._sf_parent_account_name = None
        self._merchant_vertical = None
        self._sf_account_id = None
        self._declared_annual_volume_usd = None
        self._declared_aovusd = None
        self._logo_image = None
        self._logo_file_extension = None
        self._code = None
        self._support_email = None
        self._support_phone = None
        self._parameter_group_id = None
        self._business_unit_id = None
        self._logo_url = None
        self._merchant_legal_name = None
        self._splitit_merchant_id = None
        self._website_url = None
        self._billing_address_address_line = None
        self._billing_address_address_line2 = None
        self._billing_address_city = None
        self._org_group = None
        self._billing_address_country_id = None
        self._billing_address_state_id = None
        self._billing_address_zip = None
        self._billing_address_legacy_full_address_line = None
        self._vat_tax_id = None
        self._sales_accossiate_id = None
        self._registered_country_of_business_country_id = None
        self._registered_country_of_business_state_id = None
        self._merchant_country_country_id = None
        self._merchant_country_state_id = None
        self._bank_details_bank_account_name = None
        self._bank_details_bank_routing_number = None
        self._bank_details_bank_account_number = None
        self._reports_folder_name = None
        self._on_boarding_method = None
        self._business_unit = None
        self._parameter_group = None
        self._sales_accossiate = None
        self._api_users = None
        self._agents = None
        self._installment_plan_events_subscription_datas = None
        self._terminals = None
        self._touch_point_color_values = None
        self._is_test = None
        self._marked_for_deletion = None
        self._registered_country_of_business = None
        self._merchant_country = None
        self._status = None
        self._vertical = None
        self._bank_details = None
        self._billing_address = None
        self._country = None
        self._state = None
        self._splitit_signing_entity = None
        self._splitit_current_entity = None
        self.discriminator = None

        self._id = id
        if name is not None:
            self._name = name
        if address is not None:
            self._address = address
        if email is not None:
            self._email = email
        self._merchant_admin_website = merchant_admin_website
        self._web_api = web_api
        self._embedded_clients = embedded_clients
        if crm_id is not None:
            self._crm_id = crm_id
        if sf_parent_account_external_id is not None:
            self._sf_parent_account_external_id = sf_parent_account_external_id
        if sf_lead_id is not None:
            self._sf_lead_id = sf_lead_id
        if sf_parent_account_name is not None:
            self._sf_parent_account_name = sf_parent_account_name
        if merchant_vertical is not None:
            self._merchant_vertical = merchant_vertical
        if sf_account_id is not None:
            self._sf_account_id = sf_account_id
        if declared_annual_volume_usd is not None:
            self._declared_annual_volume_usd = declared_annual_volume_usd
        if declared_aovusd is not None:
            self._declared_aovusd = declared_aovusd
        if logo_image is not None:
            self._logo_image = logo_image
        if logo_file_extension is not None:
            self._logo_file_extension = logo_file_extension
        if code is not None:
            self._code = code
        if support_email is not None:
            self._support_email = support_email
        if support_phone is not None:
            self._support_phone = support_phone
        if parameter_group_id is not None:
            self._parameter_group_id = parameter_group_id
        self._business_unit_id = business_unit_id
        if logo_url is not None:
            self._logo_url = logo_url
        if merchant_legal_name is not None:
            self._merchant_legal_name = merchant_legal_name
        if splitit_merchant_id is not None:
            self._splitit_merchant_id = splitit_merchant_id
        if website_url is not None:
            self._website_url = website_url
        if billing_address_address_line is not None:
            self._billing_address_address_line = billing_address_address_line
        if billing_address_address_line2 is not None:
            self._billing_address_address_line2 = billing_address_address_line2
        if billing_address_city is not None:
            self._billing_address_city = billing_address_city
        if org_group is not None:
            self._org_group = org_group
        if billing_address_country_id is not None:
            self._billing_address_country_id = billing_address_country_id
        if billing_address_state_id is not None:
            self._billing_address_state_id = billing_address_state_id
        if billing_address_zip is not None:
            self._billing_address_zip = billing_address_zip
        if billing_address_legacy_full_address_line is not None:
            self._billing_address_legacy_full_address_line = billing_address_legacy_full_address_line
        if vat_tax_id is not None:
            self._vat_tax_id = vat_tax_id
        if sales_accossiate_id is not None:
            self._sales_accossiate_id = sales_accossiate_id
        if registered_country_of_business_country_id is not None:
            self._registered_country_of_business_country_id = registered_country_of_business_country_id
        if registered_country_of_business_state_id is not None:
            self._registered_country_of_business_state_id = registered_country_of_business_state_id
        if merchant_country_country_id is not None:
            self._merchant_country_country_id = merchant_country_country_id
        if merchant_country_state_id is not None:
            self._merchant_country_state_id = merchant_country_state_id
        if bank_details_bank_account_name is not None:
            self._bank_details_bank_account_name = bank_details_bank_account_name
        if bank_details_bank_routing_number is not None:
            self._bank_details_bank_routing_number = bank_details_bank_routing_number
        if bank_details_bank_account_number is not None:
            self._bank_details_bank_account_number = bank_details_bank_account_number
        if reports_folder_name is not None:
            self._reports_folder_name = reports_folder_name
        self._on_boarding_method = on_boarding_method
        if business_unit is not None:
            self._business_unit = business_unit
        if parameter_group is not None:
            self._parameter_group = parameter_group
        if sales_accossiate is not None:
            self._sales_accossiate = sales_accossiate
        if api_users is not None:
            self._api_users = api_users
        if agents is not None:
            self._agents = agents
        if installment_plan_events_subscription_datas is not None:
            self._installment_plan_events_subscription_datas = installment_plan_events_subscription_datas
        if terminals is not None:
            self._terminals = terminals
        if touch_point_color_values is not None:
            self._touch_point_color_values = touch_point_color_values
        self._is_test = is_test
        self._marked_for_deletion = marked_for_deletion
        if registered_country_of_business is not None:
            self._registered_country_of_business = registered_country_of_business
        if merchant_country is not None:
            self._merchant_country = merchant_country
        self._status = status
        self._vertical = vertical
        if bank_details is not None:
            self._bank_details = bank_details
        if billing_address is not None:
            self._billing_address = billing_address
        if country is not None:
            self._country = country
        if state is not None:
            self._state = state
        self._splitit_signing_entity = splitit_signing_entity
        self._splitit_current_entity = splitit_current_entity

    @property
    def id(self):
        """Gets the id of this Merchants.  # noqa: E501


        :return: The id of this Merchants.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Merchants.


        :param id: The id of this Merchants.  # noqa: E501
        :type: int
        """
        
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this Merchants.  # noqa: E501


        :return: The name of this Merchants.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Merchants.


        :param name: The name of this Merchants.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def address(self):
        """Gets the address of this Merchants.  # noqa: E501


        :return: The address of this Merchants.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this Merchants.


        :param address: The address of this Merchants.  # noqa: E501
        :type: str
        """

        self._address = address

    @property
    def email(self):
        """Gets the email of this Merchants.  # noqa: E501


        :return: The email of this Merchants.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this Merchants.


        :param email: The email of this Merchants.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def merchant_admin_website(self):
        """Gets the merchant_admin_website of this Merchants.  # noqa: E501


        :return: The merchant_admin_website of this Merchants.  # noqa: E501
        :rtype: bool
        """
        return self._merchant_admin_website

    @merchant_admin_website.setter
    def merchant_admin_website(self, merchant_admin_website):
        """Sets the merchant_admin_website of this Merchants.


        :param merchant_admin_website: The merchant_admin_website of this Merchants.  # noqa: E501
        :type: bool
        """
        merchant_admin_website = bool(merchant_admin_website)
        if merchant_admin_website is None:
            raise ValueError("Invalid value for `merchant_admin_website`, must not be `None`")  # noqa: E501

        self._merchant_admin_website = merchant_admin_website

    @property
    def web_api(self):
        """Gets the web_api of this Merchants.  # noqa: E501


        :return: The web_api of this Merchants.  # noqa: E501
        :rtype: bool
        """
        return self._web_api

    @web_api.setter
    def web_api(self, web_api):
        """Sets the web_api of this Merchants.


        :param web_api: The web_api of this Merchants.  # noqa: E501
        :type: bool
        """
        web_api = bool(web_api)
        if web_api is None:
            raise ValueError("Invalid value for `web_api`, must not be `None`")  # noqa: E501

        self._web_api = web_api

    @property
    def embedded_clients(self):
        """Gets the embedded_clients of this Merchants.  # noqa: E501


        :return: The embedded_clients of this Merchants.  # noqa: E501
        :rtype: bool
        """
        return self._embedded_clients

    @embedded_clients.setter
    def embedded_clients(self, embedded_clients):
        """Sets the embedded_clients of this Merchants.


        :param embedded_clients: The embedded_clients of this Merchants.  # noqa: E501
        :type: bool
        """
        embedded_clients = bool(embedded_clients)
        if embedded_clients is None:
            raise ValueError("Invalid value for `embedded_clients`, must not be `None`")  # noqa: E501

        self._embedded_clients = embedded_clients

    @property
    def crm_id(self):
        """Gets the crm_id of this Merchants.  # noqa: E501


        :return: The crm_id of this Merchants.  # noqa: E501
        :rtype: str
        """
        return self._crm_id

    @crm_id.setter
    def crm_id(self, crm_id):
        """Sets the crm_id of this Merchants.


        :param crm_id: The crm_id of this Merchants.  # noqa: E501
        :type: str
        """

        self._crm_id = crm_id

    @property
    def sf_parent_account_external_id(self):
        """Gets the sf_parent_account_external_id of this Merchants.  # noqa: E501


        :return: The sf_parent_account_external_id of this Merchants.  # noqa: E501
        :rtype: str
        """
        return self._sf_parent_account_external_id

    @sf_parent_account_external_id.setter
    def sf_parent_account_external_id(self, sf_parent_account_external_id):
        """Sets the sf_parent_account_external_id of this Merchants.


        :param sf_parent_account_external_id: The sf_parent_account_external_id of this Merchants.  # noqa: E501
        :type: str
        """

        self._sf_parent_account_external_id = sf_parent_account_external_id

    @property
    def sf_lead_id(self):
        """Gets the sf_lead_id of this Merchants.  # noqa: E501


        :return: The sf_lead_id of this Merchants.  # noqa: E501
        :rtype: str
        """
        return self._sf_lead_id

    @sf_lead_id.setter
    def sf_lead_id(self, sf_lead_id):
        """Sets the sf_lead_id of this Merchants.


        :param sf_lead_id: The sf_lead_id of this Merchants.  # noqa: E501
        :type: str
        """

        self._sf_lead_id = sf_lead_id

    @property
    def sf_parent_account_name(self):
        """Gets the sf_parent_account_name of this Merchants.  # noqa: E501


        :return: The sf_parent_account_name of this Merchants.  # noqa: E501
        :rtype: str
        """
        return self._sf_parent_account_name

    @sf_parent_account_name.setter
    def sf_parent_account_name(self, sf_parent_account_name):
        """Sets the sf_parent_account_name of this Merchants.


        :param sf_parent_account_name: The sf_parent_account_name of this Merchants.  # noqa: E501
        :type: str
        """

        self._sf_parent_account_name = sf_parent_account_name

    @property
    def merchant_vertical(self):
        """Gets the merchant_vertical of this Merchants.  # noqa: E501


        :return: The merchant_vertical of this Merchants.  # noqa: E501
        :rtype: str
        """
        return self._merchant_vertical

    @merchant_vertical.setter
    def merchant_vertical(self, merchant_vertical):
        """Sets the merchant_vertical of this Merchants.


        :param merchant_vertical: The merchant_vertical of this Merchants.  # noqa: E501
        :type: str
        """

        self._merchant_vertical = merchant_vertical

    @property
    def sf_account_id(self):
        """Gets the sf_account_id of this Merchants.  # noqa: E501


        :return: The sf_account_id of this Merchants.  # noqa: E501
        :rtype: str
        """
        return self._sf_account_id

    @sf_account_id.setter
    def sf_account_id(self, sf_account_id):
        """Sets the sf_account_id of this Merchants.


        :param sf_account_id: The sf_account_id of this Merchants.  # noqa: E501
        :type: str
        """

        self._sf_account_id = sf_account_id

    @property
    def declared_annual_volume_usd(self):
        """Gets the declared_annual_volume_usd of this Merchants.  # noqa: E501


        :return: The declared_annual_volume_usd of this Merchants.  # noqa: E501
        :rtype: float
        """
        return self._declared_annual_volume_usd

    @declared_annual_volume_usd.setter
    def declared_annual_volume_usd(self, declared_annual_volume_usd):
        """Sets the declared_annual_volume_usd of this Merchants.


        :param declared_annual_volume_usd: The declared_annual_volume_usd of this Merchants.  # noqa: E501
        :type: float
        """

        self._declared_annual_volume_usd = declared_annual_volume_usd

    @property
    def declared_aovusd(self):
        """Gets the declared_aovusd of this Merchants.  # noqa: E501


        :return: The declared_aovusd of this Merchants.  # noqa: E501
        :rtype: float
        """
        return self._declared_aovusd

    @declared_aovusd.setter
    def declared_aovusd(self, declared_aovusd):
        """Sets the declared_aovusd of this Merchants.


        :param declared_aovusd: The declared_aovusd of this Merchants.  # noqa: E501
        :type: float
        """

        self._declared_aovusd = declared_aovusd

    @property
    def logo_image(self):
        """Gets the logo_image of this Merchants.  # noqa: E501


        :return: The logo_image of this Merchants.  # noqa: E501
        :rtype: str
        """
        return self._logo_image

    @logo_image.setter
    def logo_image(self, logo_image):
        """Sets the logo_image of this Merchants.


        :param logo_image: The logo_image of this Merchants.  # noqa: E501
        :type: str
        """
        if logo_image is not None and not re.search(r'^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$', logo_image):  # noqa: E501
            raise ValueError(r"Invalid value for `logo_image`, must be a follow pattern or equal to `/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/`")  # noqa: E501

        self._logo_image = logo_image

    @property
    def logo_file_extension(self):
        """Gets the logo_file_extension of this Merchants.  # noqa: E501


        :return: The logo_file_extension of this Merchants.  # noqa: E501
        :rtype: str
        """
        return self._logo_file_extension

    @logo_file_extension.setter
    def logo_file_extension(self, logo_file_extension):
        """Sets the logo_file_extension of this Merchants.


        :param logo_file_extension: The logo_file_extension of this Merchants.  # noqa: E501
        :type: str
        """

        self._logo_file_extension = logo_file_extension

    @property
    def code(self):
        """Gets the code of this Merchants.  # noqa: E501


        :return: The code of this Merchants.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this Merchants.


        :param code: The code of this Merchants.  # noqa: E501
        :type: str
        """

        self._code = code

    @property
    def support_email(self):
        """Gets the support_email of this Merchants.  # noqa: E501


        :return: The support_email of this Merchants.  # noqa: E501
        :rtype: str
        """
        return self._support_email

    @support_email.setter
    def support_email(self, support_email):
        """Sets the support_email of this Merchants.


        :param support_email: The support_email of this Merchants.  # noqa: E501
        :type: str
        """

        self._support_email = support_email

    @property
    def support_phone(self):
        """Gets the support_phone of this Merchants.  # noqa: E501


        :return: The support_phone of this Merchants.  # noqa: E501
        :rtype: str
        """
        return self._support_phone

    @support_phone.setter
    def support_phone(self, support_phone):
        """Sets the support_phone of this Merchants.


        :param support_phone: The support_phone of this Merchants.  # noqa: E501
        :type: str
        """

        self._support_phone = support_phone

    @property
    def parameter_group_id(self):
        """Gets the parameter_group_id of this Merchants.  # noqa: E501


        :return: The parameter_group_id of this Merchants.  # noqa: E501
        :rtype: int
        """
        return self._parameter_group_id

    @parameter_group_id.setter
    def parameter_group_id(self, parameter_group_id):
        """Sets the parameter_group_id of this Merchants.


        :param parameter_group_id: The parameter_group_id of this Merchants.  # noqa: E501
        :type: int
        """

        self._parameter_group_id = parameter_group_id

    @property
    def business_unit_id(self):
        """Gets the business_unit_id of this Merchants.  # noqa: E501


        :return: The business_unit_id of this Merchants.  # noqa: E501
        :rtype: int
        """
        return self._business_unit_id

    @business_unit_id.setter
    def business_unit_id(self, business_unit_id):
        """Sets the business_unit_id of this Merchants.


        :param business_unit_id: The business_unit_id of this Merchants.  # noqa: E501
        :type: int
        """
        
        if business_unit_id is None:
            raise ValueError("Invalid value for `business_unit_id`, must not be `None`")  # noqa: E501

        self._business_unit_id = business_unit_id

    @property
    def logo_url(self):
        """Gets the logo_url of this Merchants.  # noqa: E501


        :return: The logo_url of this Merchants.  # noqa: E501
        :rtype: str
        """
        return self._logo_url

    @logo_url.setter
    def logo_url(self, logo_url):
        """Sets the logo_url of this Merchants.


        :param logo_url: The logo_url of this Merchants.  # noqa: E501
        :type: str
        """

        self._logo_url = logo_url

    @property
    def merchant_legal_name(self):
        """Gets the merchant_legal_name of this Merchants.  # noqa: E501


        :return: The merchant_legal_name of this Merchants.  # noqa: E501
        :rtype: str
        """
        return self._merchant_legal_name

    @merchant_legal_name.setter
    def merchant_legal_name(self, merchant_legal_name):
        """Sets the merchant_legal_name of this Merchants.


        :param merchant_legal_name: The merchant_legal_name of this Merchants.  # noqa: E501
        :type: str
        """

        self._merchant_legal_name = merchant_legal_name

    @property
    def splitit_merchant_id(self):
        """Gets the splitit_merchant_id of this Merchants.  # noqa: E501


        :return: The splitit_merchant_id of this Merchants.  # noqa: E501
        :rtype: str
        """
        return self._splitit_merchant_id

    @splitit_merchant_id.setter
    def splitit_merchant_id(self, splitit_merchant_id):
        """Sets the splitit_merchant_id of this Merchants.


        :param splitit_merchant_id: The splitit_merchant_id of this Merchants.  # noqa: E501
        :type: str
        """

        self._splitit_merchant_id = splitit_merchant_id

    @property
    def website_url(self):
        """Gets the website_url of this Merchants.  # noqa: E501


        :return: The website_url of this Merchants.  # noqa: E501
        :rtype: str
        """
        return self._website_url

    @website_url.setter
    def website_url(self, website_url):
        """Sets the website_url of this Merchants.


        :param website_url: The website_url of this Merchants.  # noqa: E501
        :type: str
        """

        self._website_url = website_url

    @property
    def billing_address_address_line(self):
        """Gets the billing_address_address_line of this Merchants.  # noqa: E501


        :return: The billing_address_address_line of this Merchants.  # noqa: E501
        :rtype: str
        """
        return self._billing_address_address_line

    @billing_address_address_line.setter
    def billing_address_address_line(self, billing_address_address_line):
        """Sets the billing_address_address_line of this Merchants.


        :param billing_address_address_line: The billing_address_address_line of this Merchants.  # noqa: E501
        :type: str
        """

        self._billing_address_address_line = billing_address_address_line

    @property
    def billing_address_address_line2(self):
        """Gets the billing_address_address_line2 of this Merchants.  # noqa: E501


        :return: The billing_address_address_line2 of this Merchants.  # noqa: E501
        :rtype: str
        """
        return self._billing_address_address_line2

    @billing_address_address_line2.setter
    def billing_address_address_line2(self, billing_address_address_line2):
        """Sets the billing_address_address_line2 of this Merchants.


        :param billing_address_address_line2: The billing_address_address_line2 of this Merchants.  # noqa: E501
        :type: str
        """

        self._billing_address_address_line2 = billing_address_address_line2

    @property
    def billing_address_city(self):
        """Gets the billing_address_city of this Merchants.  # noqa: E501


        :return: The billing_address_city of this Merchants.  # noqa: E501
        :rtype: str
        """
        return self._billing_address_city

    @billing_address_city.setter
    def billing_address_city(self, billing_address_city):
        """Sets the billing_address_city of this Merchants.


        :param billing_address_city: The billing_address_city of this Merchants.  # noqa: E501
        :type: str
        """

        self._billing_address_city = billing_address_city

    @property
    def org_group(self):
        """Gets the org_group of this Merchants.  # noqa: E501


        :return: The org_group of this Merchants.  # noqa: E501
        :rtype: str
        """
        return self._org_group

    @org_group.setter
    def org_group(self, org_group):
        """Sets the org_group of this Merchants.


        :param org_group: The org_group of this Merchants.  # noqa: E501
        :type: str
        """

        self._org_group = org_group

    @property
    def billing_address_country_id(self):
        """Gets the billing_address_country_id of this Merchants.  # noqa: E501


        :return: The billing_address_country_id of this Merchants.  # noqa: E501
        :rtype: int
        """
        return self._billing_address_country_id

    @billing_address_country_id.setter
    def billing_address_country_id(self, billing_address_country_id):
        """Sets the billing_address_country_id of this Merchants.


        :param billing_address_country_id: The billing_address_country_id of this Merchants.  # noqa: E501
        :type: int
        """

        self._billing_address_country_id = billing_address_country_id

    @property
    def billing_address_state_id(self):
        """Gets the billing_address_state_id of this Merchants.  # noqa: E501


        :return: The billing_address_state_id of this Merchants.  # noqa: E501
        :rtype: int
        """
        return self._billing_address_state_id

    @billing_address_state_id.setter
    def billing_address_state_id(self, billing_address_state_id):
        """Sets the billing_address_state_id of this Merchants.


        :param billing_address_state_id: The billing_address_state_id of this Merchants.  # noqa: E501
        :type: int
        """

        self._billing_address_state_id = billing_address_state_id

    @property
    def billing_address_zip(self):
        """Gets the billing_address_zip of this Merchants.  # noqa: E501


        :return: The billing_address_zip of this Merchants.  # noqa: E501
        :rtype: str
        """
        return self._billing_address_zip

    @billing_address_zip.setter
    def billing_address_zip(self, billing_address_zip):
        """Sets the billing_address_zip of this Merchants.


        :param billing_address_zip: The billing_address_zip of this Merchants.  # noqa: E501
        :type: str
        """

        self._billing_address_zip = billing_address_zip

    @property
    def billing_address_legacy_full_address_line(self):
        """Gets the billing_address_legacy_full_address_line of this Merchants.  # noqa: E501


        :return: The billing_address_legacy_full_address_line of this Merchants.  # noqa: E501
        :rtype: str
        """
        return self._billing_address_legacy_full_address_line

    @billing_address_legacy_full_address_line.setter
    def billing_address_legacy_full_address_line(self, billing_address_legacy_full_address_line):
        """Sets the billing_address_legacy_full_address_line of this Merchants.


        :param billing_address_legacy_full_address_line: The billing_address_legacy_full_address_line of this Merchants.  # noqa: E501
        :type: str
        """

        self._billing_address_legacy_full_address_line = billing_address_legacy_full_address_line

    @property
    def vat_tax_id(self):
        """Gets the vat_tax_id of this Merchants.  # noqa: E501


        :return: The vat_tax_id of this Merchants.  # noqa: E501
        :rtype: str
        """
        return self._vat_tax_id

    @vat_tax_id.setter
    def vat_tax_id(self, vat_tax_id):
        """Sets the vat_tax_id of this Merchants.


        :param vat_tax_id: The vat_tax_id of this Merchants.  # noqa: E501
        :type: str
        """

        self._vat_tax_id = vat_tax_id

    @property
    def sales_accossiate_id(self):
        """Gets the sales_accossiate_id of this Merchants.  # noqa: E501


        :return: The sales_accossiate_id of this Merchants.  # noqa: E501
        :rtype: int
        """
        return self._sales_accossiate_id

    @sales_accossiate_id.setter
    def sales_accossiate_id(self, sales_accossiate_id):
        """Sets the sales_accossiate_id of this Merchants.


        :param sales_accossiate_id: The sales_accossiate_id of this Merchants.  # noqa: E501
        :type: int
        """

        self._sales_accossiate_id = sales_accossiate_id

    @property
    def registered_country_of_business_country_id(self):
        """Gets the registered_country_of_business_country_id of this Merchants.  # noqa: E501


        :return: The registered_country_of_business_country_id of this Merchants.  # noqa: E501
        :rtype: int
        """
        return self._registered_country_of_business_country_id

    @registered_country_of_business_country_id.setter
    def registered_country_of_business_country_id(self, registered_country_of_business_country_id):
        """Sets the registered_country_of_business_country_id of this Merchants.


        :param registered_country_of_business_country_id: The registered_country_of_business_country_id of this Merchants.  # noqa: E501
        :type: int
        """

        self._registered_country_of_business_country_id = registered_country_of_business_country_id

    @property
    def registered_country_of_business_state_id(self):
        """Gets the registered_country_of_business_state_id of this Merchants.  # noqa: E501


        :return: The registered_country_of_business_state_id of this Merchants.  # noqa: E501
        :rtype: int
        """
        return self._registered_country_of_business_state_id

    @registered_country_of_business_state_id.setter
    def registered_country_of_business_state_id(self, registered_country_of_business_state_id):
        """Sets the registered_country_of_business_state_id of this Merchants.


        :param registered_country_of_business_state_id: The registered_country_of_business_state_id of this Merchants.  # noqa: E501
        :type: int
        """

        self._registered_country_of_business_state_id = registered_country_of_business_state_id

    @property
    def merchant_country_country_id(self):
        """Gets the merchant_country_country_id of this Merchants.  # noqa: E501


        :return: The merchant_country_country_id of this Merchants.  # noqa: E501
        :rtype: int
        """
        return self._merchant_country_country_id

    @merchant_country_country_id.setter
    def merchant_country_country_id(self, merchant_country_country_id):
        """Sets the merchant_country_country_id of this Merchants.


        :param merchant_country_country_id: The merchant_country_country_id of this Merchants.  # noqa: E501
        :type: int
        """

        self._merchant_country_country_id = merchant_country_country_id

    @property
    def merchant_country_state_id(self):
        """Gets the merchant_country_state_id of this Merchants.  # noqa: E501


        :return: The merchant_country_state_id of this Merchants.  # noqa: E501
        :rtype: int
        """
        return self._merchant_country_state_id

    @merchant_country_state_id.setter
    def merchant_country_state_id(self, merchant_country_state_id):
        """Sets the merchant_country_state_id of this Merchants.


        :param merchant_country_state_id: The merchant_country_state_id of this Merchants.  # noqa: E501
        :type: int
        """

        self._merchant_country_state_id = merchant_country_state_id

    @property
    def bank_details_bank_account_name(self):
        """Gets the bank_details_bank_account_name of this Merchants.  # noqa: E501


        :return: The bank_details_bank_account_name of this Merchants.  # noqa: E501
        :rtype: str
        """
        return self._bank_details_bank_account_name

    @bank_details_bank_account_name.setter
    def bank_details_bank_account_name(self, bank_details_bank_account_name):
        """Sets the bank_details_bank_account_name of this Merchants.


        :param bank_details_bank_account_name: The bank_details_bank_account_name of this Merchants.  # noqa: E501
        :type: str
        """

        self._bank_details_bank_account_name = bank_details_bank_account_name

    @property
    def bank_details_bank_routing_number(self):
        """Gets the bank_details_bank_routing_number of this Merchants.  # noqa: E501


        :return: The bank_details_bank_routing_number of this Merchants.  # noqa: E501
        :rtype: str
        """
        return self._bank_details_bank_routing_number

    @bank_details_bank_routing_number.setter
    def bank_details_bank_routing_number(self, bank_details_bank_routing_number):
        """Sets the bank_details_bank_routing_number of this Merchants.


        :param bank_details_bank_routing_number: The bank_details_bank_routing_number of this Merchants.  # noqa: E501
        :type: str
        """

        self._bank_details_bank_routing_number = bank_details_bank_routing_number

    @property
    def bank_details_bank_account_number(self):
        """Gets the bank_details_bank_account_number of this Merchants.  # noqa: E501


        :return: The bank_details_bank_account_number of this Merchants.  # noqa: E501
        :rtype: str
        """
        return self._bank_details_bank_account_number

    @bank_details_bank_account_number.setter
    def bank_details_bank_account_number(self, bank_details_bank_account_number):
        """Sets the bank_details_bank_account_number of this Merchants.


        :param bank_details_bank_account_number: The bank_details_bank_account_number of this Merchants.  # noqa: E501
        :type: str
        """

        self._bank_details_bank_account_number = bank_details_bank_account_number

    @property
    def reports_folder_name(self):
        """Gets the reports_folder_name of this Merchants.  # noqa: E501


        :return: The reports_folder_name of this Merchants.  # noqa: E501
        :rtype: str
        """
        return self._reports_folder_name

    @reports_folder_name.setter
    def reports_folder_name(self, reports_folder_name):
        """Sets the reports_folder_name of this Merchants.


        :param reports_folder_name: The reports_folder_name of this Merchants.  # noqa: E501
        :type: str
        """

        self._reports_folder_name = reports_folder_name

    @property
    def on_boarding_method(self):
        """Gets the on_boarding_method of this Merchants.  # noqa: E501


        :return: The on_boarding_method of this Merchants.  # noqa: E501
        :rtype: OnBoardingMethod
        """
        return self._on_boarding_method

    @on_boarding_method.setter
    def on_boarding_method(self, on_boarding_method):
        """Sets the on_boarding_method of this Merchants.


        :param on_boarding_method: The on_boarding_method of this Merchants.  # noqa: E501
        :type: OnBoardingMethod
        """
        
        if on_boarding_method is None:
            raise ValueError("Invalid value for `on_boarding_method`, must not be `None`")  # noqa: E501

        self._on_boarding_method = on_boarding_method

    @property
    def business_unit(self):
        """Gets the business_unit of this Merchants.  # noqa: E501


        :return: The business_unit of this Merchants.  # noqa: E501
        :rtype: BusinessUnits
        """
        return self._business_unit

    @business_unit.setter
    def business_unit(self, business_unit):
        """Sets the business_unit of this Merchants.


        :param business_unit: The business_unit of this Merchants.  # noqa: E501
        :type: BusinessUnits
        """

        self._business_unit = business_unit

    @property
    def parameter_group(self):
        """Gets the parameter_group of this Merchants.  # noqa: E501


        :return: The parameter_group of this Merchants.  # noqa: E501
        :rtype: ParameterGroups
        """
        return self._parameter_group

    @parameter_group.setter
    def parameter_group(self, parameter_group):
        """Sets the parameter_group of this Merchants.


        :param parameter_group: The parameter_group of this Merchants.  # noqa: E501
        :type: ParameterGroups
        """

        self._parameter_group = parameter_group

    @property
    def sales_accossiate(self):
        """Gets the sales_accossiate of this Merchants.  # noqa: E501


        :return: The sales_accossiate of this Merchants.  # noqa: E501
        :rtype: SalesAssociates
        """
        return self._sales_accossiate

    @sales_accossiate.setter
    def sales_accossiate(self, sales_accossiate):
        """Sets the sales_accossiate of this Merchants.


        :param sales_accossiate: The sales_accossiate of this Merchants.  # noqa: E501
        :type: SalesAssociates
        """

        self._sales_accossiate = sales_accossiate

    @property
    def api_users(self):
        """Gets the api_users of this Merchants.  # noqa: E501


        :return: The api_users of this Merchants.  # noqa: E501
        :rtype: ApiUsers
        """
        return self._api_users

    @api_users.setter
    def api_users(self, api_users):
        """Sets the api_users of this Merchants.


        :param api_users: The api_users of this Merchants.  # noqa: E501
        :type: ApiUsers
        """

        self._api_users = api_users

    @property
    def agents(self):
        """Gets the agents of this Merchants.  # noqa: E501


        :return: The agents of this Merchants.  # noqa: E501
        :rtype: list[Agents]
        """
        return self._agents

    @agents.setter
    def agents(self, agents):
        """Sets the agents of this Merchants.


        :param agents: The agents of this Merchants.  # noqa: E501
        :type: list[Agents]
        """

        self._agents = agents

    @property
    def installment_plan_events_subscription_datas(self):
        """Gets the installment_plan_events_subscription_datas of this Merchants.  # noqa: E501


        :return: The installment_plan_events_subscription_datas of this Merchants.  # noqa: E501
        :rtype: list[InstallmentPlanEventsSubscriptionDatas]
        """
        return self._installment_plan_events_subscription_datas

    @installment_plan_events_subscription_datas.setter
    def installment_plan_events_subscription_datas(self, installment_plan_events_subscription_datas):
        """Sets the installment_plan_events_subscription_datas of this Merchants.


        :param installment_plan_events_subscription_datas: The installment_plan_events_subscription_datas of this Merchants.  # noqa: E501
        :type: list[InstallmentPlanEventsSubscriptionDatas]
        """

        self._installment_plan_events_subscription_datas = installment_plan_events_subscription_datas

    @property
    def terminals(self):
        """Gets the terminals of this Merchants.  # noqa: E501


        :return: The terminals of this Merchants.  # noqa: E501
        :rtype: list[Terminals]
        """
        return self._terminals

    @terminals.setter
    def terminals(self, terminals):
        """Sets the terminals of this Merchants.


        :param terminals: The terminals of this Merchants.  # noqa: E501
        :type: list[Terminals]
        """

        self._terminals = terminals

    @property
    def touch_point_color_values(self):
        """Gets the touch_point_color_values of this Merchants.  # noqa: E501


        :return: The touch_point_color_values of this Merchants.  # noqa: E501
        :rtype: list[TouchPointColorValues]
        """
        return self._touch_point_color_values

    @touch_point_color_values.setter
    def touch_point_color_values(self, touch_point_color_values):
        """Sets the touch_point_color_values of this Merchants.


        :param touch_point_color_values: The touch_point_color_values of this Merchants.  # noqa: E501
        :type: list[TouchPointColorValues]
        """

        self._touch_point_color_values = touch_point_color_values

    @property
    def is_test(self):
        """Gets the is_test of this Merchants.  # noqa: E501


        :return: The is_test of this Merchants.  # noqa: E501
        :rtype: bool
        """
        return self._is_test

    @is_test.setter
    def is_test(self, is_test):
        """Sets the is_test of this Merchants.


        :param is_test: The is_test of this Merchants.  # noqa: E501
        :type: bool
        """
        is_test = bool(is_test)
        if is_test is None:
            raise ValueError("Invalid value for `is_test`, must not be `None`")  # noqa: E501

        self._is_test = is_test

    @property
    def marked_for_deletion(self):
        """Gets the marked_for_deletion of this Merchants.  # noqa: E501


        :return: The marked_for_deletion of this Merchants.  # noqa: E501
        :rtype: bool
        """
        return self._marked_for_deletion

    @marked_for_deletion.setter
    def marked_for_deletion(self, marked_for_deletion):
        """Sets the marked_for_deletion of this Merchants.


        :param marked_for_deletion: The marked_for_deletion of this Merchants.  # noqa: E501
        :type: bool
        """
        marked_for_deletion = bool(marked_for_deletion)
        if marked_for_deletion is None:
            raise ValueError("Invalid value for `marked_for_deletion`, must not be `None`")  # noqa: E501

        self._marked_for_deletion = marked_for_deletion

    @property
    def registered_country_of_business(self):
        """Gets the registered_country_of_business of this Merchants.  # noqa: E501


        :return: The registered_country_of_business of this Merchants.  # noqa: E501
        :rtype: CountryState
        """
        return self._registered_country_of_business

    @registered_country_of_business.setter
    def registered_country_of_business(self, registered_country_of_business):
        """Sets the registered_country_of_business of this Merchants.


        :param registered_country_of_business: The registered_country_of_business of this Merchants.  # noqa: E501
        :type: CountryState
        """

        self._registered_country_of_business = registered_country_of_business

    @property
    def merchant_country(self):
        """Gets the merchant_country of this Merchants.  # noqa: E501


        :return: The merchant_country of this Merchants.  # noqa: E501
        :rtype: CountryState
        """
        return self._merchant_country

    @merchant_country.setter
    def merchant_country(self, merchant_country):
        """Sets the merchant_country of this Merchants.


        :param merchant_country: The merchant_country of this Merchants.  # noqa: E501
        :type: CountryState
        """

        self._merchant_country = merchant_country

    @property
    def status(self):
        """Gets the status of this Merchants.  # noqa: E501


        :return: The status of this Merchants.  # noqa: E501
        :rtype: MerchantStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Merchants.


        :param status: The status of this Merchants.  # noqa: E501
        :type: MerchantStatus
        """
        
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def vertical(self):
        """Gets the vertical of this Merchants.  # noqa: E501


        :return: The vertical of this Merchants.  # noqa: E501
        :rtype: object
        """
        return self._vertical

    @vertical.setter
    def vertical(self, vertical):
        """Sets the vertical of this Merchants.


        :param vertical: The vertical of this Merchants.  # noqa: E501
        :type: object
        """
        
        if vertical is None:
            raise ValueError("Invalid value for `vertical`, must not be `None`")  # noqa: E501

        self._vertical = vertical

    @property
    def bank_details(self):
        """Gets the bank_details of this Merchants.  # noqa: E501


        :return: The bank_details of this Merchants.  # noqa: E501
        :rtype: BankDetails
        """
        return self._bank_details

    @bank_details.setter
    def bank_details(self, bank_details):
        """Sets the bank_details of this Merchants.


        :param bank_details: The bank_details of this Merchants.  # noqa: E501
        :type: BankDetails
        """

        self._bank_details = bank_details

    @property
    def billing_address(self):
        """Gets the billing_address of this Merchants.  # noqa: E501


        :return: The billing_address of this Merchants.  # noqa: E501
        :rtype: AddressData2
        """
        return self._billing_address

    @billing_address.setter
    def billing_address(self, billing_address):
        """Sets the billing_address of this Merchants.


        :param billing_address: The billing_address of this Merchants.  # noqa: E501
        :type: AddressData2
        """

        self._billing_address = billing_address

    @property
    def country(self):
        """Gets the country of this Merchants.  # noqa: E501


        :return: The country of this Merchants.  # noqa: E501
        :rtype: Countries
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this Merchants.


        :param country: The country of this Merchants.  # noqa: E501
        :type: Countries
        """

        self._country = country

    @property
    def state(self):
        """Gets the state of this Merchants.  # noqa: E501


        :return: The state of this Merchants.  # noqa: E501
        :rtype: CountrySubdivisions
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Merchants.


        :param state: The state of this Merchants.  # noqa: E501
        :type: CountrySubdivisions
        """

        self._state = state

    @property
    def splitit_signing_entity(self):
        """Gets the splitit_signing_entity of this Merchants.  # noqa: E501


        :return: The splitit_signing_entity of this Merchants.  # noqa: E501
        :rtype: SplititEntity
        """
        return self._splitit_signing_entity

    @splitit_signing_entity.setter
    def splitit_signing_entity(self, splitit_signing_entity):
        """Sets the splitit_signing_entity of this Merchants.


        :param splitit_signing_entity: The splitit_signing_entity of this Merchants.  # noqa: E501
        :type: SplititEntity
        """
        
        if splitit_signing_entity is None:
            raise ValueError("Invalid value for `splitit_signing_entity`, must not be `None`")  # noqa: E501

        self._splitit_signing_entity = splitit_signing_entity

    @property
    def splitit_current_entity(self):
        """Gets the splitit_current_entity of this Merchants.  # noqa: E501


        :return: The splitit_current_entity of this Merchants.  # noqa: E501
        :rtype: SplititEntity
        """
        return self._splitit_current_entity

    @splitit_current_entity.setter
    def splitit_current_entity(self, splitit_current_entity):
        """Sets the splitit_current_entity of this Merchants.


        :param splitit_current_entity: The splitit_current_entity of this Merchants.  # noqa: E501
        :type: SplititEntity
        """
        
        if splitit_current_entity is None:
            raise ValueError("Invalid value for `splitit_current_entity`, must not be `None`")  # noqa: E501

        self._splitit_current_entity = splitit_current_entity

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Merchants, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Merchants):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
