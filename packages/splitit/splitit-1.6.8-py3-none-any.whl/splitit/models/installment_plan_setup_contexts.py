# coding: utf-8

"""
    splitit-web-api-public-sdk

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class InstallmentPlanSetupContexts(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'public_installment_plan_session': 'str',
        'billing_address_address_line': 'str',
        'billing_address_zip': 'str',
        'billing_address_address_line2': 'str',
        'billing_address_city': 'str',
        'requested_number_of_installments': 'str',
        'success_exit_url': 'str',
        'error_exit_url': 'str',
        'cancel_exit_url': 'str',
        'ab_test_query_string': 'str',
        'requested_first_installment_amount': 'float',
        'requested_first_scheduled_installment_date': 'datetime',
        'send_shopper_approval_request': 'datetime',
        'send_shopper_payment_request': 'datetime',
        'requested_capture_on_creation': 'bool',
        'billing_address_country_id': 'int',
        'suggested_payment_tp_id': 'int',
        'ab_testing_session_id': 'int',
        'default_num_of_installments': 'int',
        'billing_address_state_id': 'int',
        'billing_address_legacy_full_address_line': 'str',
        'requested_funding': 'bool',
        'success_async_url': 'str',
        'attempt3_dsecure': 'bool',
        'view_name': 'str',
        'is_opened_in_iframe': 'bool',
        'is3d_secure_in_popup': 'bool',
        'external_auth_unique_gateway_id': 'str',
        'external_amount_details': 'float',
        'external_auth_date': 'datetime',
        'external_auth_transaction_log': 'str',
        'payment_approval_phone': 'str',
        'payment_approval_email': 'str',
        'payment_message': 'str',
        'terms_and_conditions_key': 'str',
        'finger_print_id': 'str',
        'request_update_card_phone': 'str',
        'request_update_card_email': 'str',
        'request_update_card_time': 'datetime',
        'billing_address_first_time_populated_by': 'str',
        'country': 'Countries',
        'state': 'CountrySubdivisions',
        'ab_testing_session': 'PaymentFormTPABTestingDefinition',
        'suggested_payment_tp': 'VersionedTouchPoints',
        'installment_plans': 'list[InstallmentPlans]',
        'requested_strategy': 'PlanStrategy',
        'billing_address': 'AddressData2'
    }

    attribute_map = {
        'id': 'Id',
        'public_installment_plan_session': 'PublicInstallmentPlanSession',
        'billing_address_address_line': 'BillingAddressAddressLine',
        'billing_address_zip': 'BillingAddressZip',
        'billing_address_address_line2': 'BillingAddressAddressLine2',
        'billing_address_city': 'BillingAddressCity',
        'requested_number_of_installments': 'RequestedNumberOfInstallments',
        'success_exit_url': 'SuccessExitUrl',
        'error_exit_url': 'ErrorExitUrl',
        'cancel_exit_url': 'CancelExitUrl',
        'ab_test_query_string': 'AbTestQueryString',
        'requested_first_installment_amount': 'RequestedFirstInstallmentAmount',
        'requested_first_scheduled_installment_date': 'RequestedFirstScheduledInstallmentDate',
        'send_shopper_approval_request': 'SendShopperApprovalRequest',
        'send_shopper_payment_request': 'SendShopperPaymentRequest',
        'requested_capture_on_creation': 'RequestedCaptureOnCreation',
        'billing_address_country_id': 'BillingAddressCountryId',
        'suggested_payment_tp_id': 'SuggestedPaymentTPId',
        'ab_testing_session_id': 'ABTestingSessionId',
        'default_num_of_installments': 'DefaultNumOfInstallments',
        'billing_address_state_id': 'BillingAddressStateId',
        'billing_address_legacy_full_address_line': 'BillingAddressLegacyFullAddressLine',
        'requested_funding': 'RequestedFunding',
        'success_async_url': 'SuccessAsyncUrl',
        'attempt3_dsecure': 'Attempt3Dsecure',
        'view_name': 'ViewName',
        'is_opened_in_iframe': 'IsOpenedInIframe',
        'is3d_secure_in_popup': 'Is3dSecureInPopup',
        'external_auth_unique_gateway_id': 'ExternalAuthUniqueGatewayId',
        'external_amount_details': 'ExternalAmountDetails',
        'external_auth_date': 'ExternalAuthDate',
        'external_auth_transaction_log': 'ExternalAuthTransactionLog',
        'payment_approval_phone': 'PaymentApprovalPhone',
        'payment_approval_email': 'PaymentApprovalEmail',
        'payment_message': 'PaymentMessage',
        'terms_and_conditions_key': 'TermsAndConditionsKey',
        'finger_print_id': 'FingerPrintId',
        'request_update_card_phone': 'RequestUpdateCardPhone',
        'request_update_card_email': 'RequestUpdateCardEmail',
        'request_update_card_time': 'RequestUpdateCardTime',
        'billing_address_first_time_populated_by': 'BillingAddressFirstTimePopulatedBy',
        'country': 'Country',
        'state': 'State',
        'ab_testing_session': 'ABTestingSession',
        'suggested_payment_tp': 'SuggestedPaymentTP',
        'installment_plans': 'InstallmentPlans',
        'requested_strategy': 'RequestedStrategy',
        'billing_address': 'BillingAddress'
    }

    def __init__(self, id=None, public_installment_plan_session=None, billing_address_address_line=None, billing_address_zip=None, billing_address_address_line2=None, billing_address_city=None, requested_number_of_installments=None, success_exit_url=None, error_exit_url=None, cancel_exit_url=None, ab_test_query_string=None, requested_first_installment_amount=None, requested_first_scheduled_installment_date=None, send_shopper_approval_request=None, send_shopper_payment_request=None, requested_capture_on_creation=None, billing_address_country_id=None, suggested_payment_tp_id=None, ab_testing_session_id=None, default_num_of_installments=None, billing_address_state_id=None, billing_address_legacy_full_address_line=None, requested_funding=None, success_async_url=None, attempt3_dsecure=None, view_name=None, is_opened_in_iframe=None, is3d_secure_in_popup=None, external_auth_unique_gateway_id=None, external_amount_details=None, external_auth_date=None, external_auth_transaction_log=None, payment_approval_phone=None, payment_approval_email=None, payment_message=None, terms_and_conditions_key=None, finger_print_id=None, request_update_card_phone=None, request_update_card_email=None, request_update_card_time=None, billing_address_first_time_populated_by=None, country=None, state=None, ab_testing_session=None, suggested_payment_tp=None, installment_plans=None, requested_strategy=None, billing_address=None):  # noqa: E501
        """InstallmentPlanSetupContexts - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._public_installment_plan_session = None
        self._billing_address_address_line = None
        self._billing_address_zip = None
        self._billing_address_address_line2 = None
        self._billing_address_city = None
        self._requested_number_of_installments = None
        self._success_exit_url = None
        self._error_exit_url = None
        self._cancel_exit_url = None
        self._ab_test_query_string = None
        self._requested_first_installment_amount = None
        self._requested_first_scheduled_installment_date = None
        self._send_shopper_approval_request = None
        self._send_shopper_payment_request = None
        self._requested_capture_on_creation = None
        self._billing_address_country_id = None
        self._suggested_payment_tp_id = None
        self._ab_testing_session_id = None
        self._default_num_of_installments = None
        self._billing_address_state_id = None
        self._billing_address_legacy_full_address_line = None
        self._requested_funding = None
        self._success_async_url = None
        self._attempt3_dsecure = None
        self._view_name = None
        self._is_opened_in_iframe = None
        self._is3d_secure_in_popup = None
        self._external_auth_unique_gateway_id = None
        self._external_amount_details = None
        self._external_auth_date = None
        self._external_auth_transaction_log = None
        self._payment_approval_phone = None
        self._payment_approval_email = None
        self._payment_message = None
        self._terms_and_conditions_key = None
        self._finger_print_id = None
        self._request_update_card_phone = None
        self._request_update_card_email = None
        self._request_update_card_time = None
        self._billing_address_first_time_populated_by = None
        self._country = None
        self._state = None
        self._ab_testing_session = None
        self._suggested_payment_tp = None
        self._installment_plans = None
        self._requested_strategy = None
        self._billing_address = None
        self.discriminator = None

        self._id = id
        if public_installment_plan_session is not None:
            self._public_installment_plan_session = public_installment_plan_session
        if billing_address_address_line is not None:
            self._billing_address_address_line = billing_address_address_line
        if billing_address_zip is not None:
            self._billing_address_zip = billing_address_zip
        if billing_address_address_line2 is not None:
            self._billing_address_address_line2 = billing_address_address_line2
        if billing_address_city is not None:
            self._billing_address_city = billing_address_city
        if requested_number_of_installments is not None:
            self._requested_number_of_installments = requested_number_of_installments
        if success_exit_url is not None:
            self._success_exit_url = success_exit_url
        if error_exit_url is not None:
            self._error_exit_url = error_exit_url
        if cancel_exit_url is not None:
            self._cancel_exit_url = cancel_exit_url
        if ab_test_query_string is not None:
            self._ab_test_query_string = ab_test_query_string
        self._requested_first_installment_amount = requested_first_installment_amount
        if requested_first_scheduled_installment_date is not None:
            self._requested_first_scheduled_installment_date = requested_first_scheduled_installment_date
        if send_shopper_approval_request is not None:
            self._send_shopper_approval_request = send_shopper_approval_request
        if send_shopper_payment_request is not None:
            self._send_shopper_payment_request = send_shopper_payment_request
        if requested_capture_on_creation is not None:
            self._requested_capture_on_creation = requested_capture_on_creation
        if billing_address_country_id is not None:
            self._billing_address_country_id = billing_address_country_id
        if suggested_payment_tp_id is not None:
            self._suggested_payment_tp_id = suggested_payment_tp_id
        if ab_testing_session_id is not None:
            self._ab_testing_session_id = ab_testing_session_id
        self._default_num_of_installments = default_num_of_installments
        if billing_address_state_id is not None:
            self._billing_address_state_id = billing_address_state_id
        if billing_address_legacy_full_address_line is not None:
            self._billing_address_legacy_full_address_line = billing_address_legacy_full_address_line
        if requested_funding is not None:
            self._requested_funding = requested_funding
        if success_async_url is not None:
            self._success_async_url = success_async_url
        if attempt3_dsecure is not None:
            self._attempt3_dsecure = attempt3_dsecure
        if view_name is not None:
            self._view_name = view_name
        self._is_opened_in_iframe = is_opened_in_iframe
        if is3d_secure_in_popup is not None:
            self._is3d_secure_in_popup = is3d_secure_in_popup
        if external_auth_unique_gateway_id is not None:
            self._external_auth_unique_gateway_id = external_auth_unique_gateway_id
        self._external_amount_details = external_amount_details
        self._external_auth_date = external_auth_date
        if external_auth_transaction_log is not None:
            self._external_auth_transaction_log = external_auth_transaction_log
        if payment_approval_phone is not None:
            self._payment_approval_phone = payment_approval_phone
        if payment_approval_email is not None:
            self._payment_approval_email = payment_approval_email
        if payment_message is not None:
            self._payment_message = payment_message
        if terms_and_conditions_key is not None:
            self._terms_and_conditions_key = terms_and_conditions_key
        if finger_print_id is not None:
            self._finger_print_id = finger_print_id
        if request_update_card_phone is not None:
            self._request_update_card_phone = request_update_card_phone
        if request_update_card_email is not None:
            self._request_update_card_email = request_update_card_email
        if request_update_card_time is not None:
            self._request_update_card_time = request_update_card_time
        if billing_address_first_time_populated_by is not None:
            self._billing_address_first_time_populated_by = billing_address_first_time_populated_by
        if country is not None:
            self._country = country
        if state is not None:
            self._state = state
        if ab_testing_session is not None:
            self._ab_testing_session = ab_testing_session
        if suggested_payment_tp is not None:
            self._suggested_payment_tp = suggested_payment_tp
        if installment_plans is not None:
            self._installment_plans = installment_plans
        if requested_strategy is not None:
            self._requested_strategy = requested_strategy
        if billing_address is not None:
            self._billing_address = billing_address

    @property
    def id(self):
        """Gets the id of this InstallmentPlanSetupContexts.  # noqa: E501


        :return: The id of this InstallmentPlanSetupContexts.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InstallmentPlanSetupContexts.


        :param id: The id of this InstallmentPlanSetupContexts.  # noqa: E501
        :type: int
        """
        
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def public_installment_plan_session(self):
        """Gets the public_installment_plan_session of this InstallmentPlanSetupContexts.  # noqa: E501


        :return: The public_installment_plan_session of this InstallmentPlanSetupContexts.  # noqa: E501
        :rtype: str
        """
        return self._public_installment_plan_session

    @public_installment_plan_session.setter
    def public_installment_plan_session(self, public_installment_plan_session):
        """Sets the public_installment_plan_session of this InstallmentPlanSetupContexts.


        :param public_installment_plan_session: The public_installment_plan_session of this InstallmentPlanSetupContexts.  # noqa: E501
        :type: str
        """

        self._public_installment_plan_session = public_installment_plan_session

    @property
    def billing_address_address_line(self):
        """Gets the billing_address_address_line of this InstallmentPlanSetupContexts.  # noqa: E501


        :return: The billing_address_address_line of this InstallmentPlanSetupContexts.  # noqa: E501
        :rtype: str
        """
        return self._billing_address_address_line

    @billing_address_address_line.setter
    def billing_address_address_line(self, billing_address_address_line):
        """Sets the billing_address_address_line of this InstallmentPlanSetupContexts.


        :param billing_address_address_line: The billing_address_address_line of this InstallmentPlanSetupContexts.  # noqa: E501
        :type: str
        """

        self._billing_address_address_line = billing_address_address_line

    @property
    def billing_address_zip(self):
        """Gets the billing_address_zip of this InstallmentPlanSetupContexts.  # noqa: E501


        :return: The billing_address_zip of this InstallmentPlanSetupContexts.  # noqa: E501
        :rtype: str
        """
        return self._billing_address_zip

    @billing_address_zip.setter
    def billing_address_zip(self, billing_address_zip):
        """Sets the billing_address_zip of this InstallmentPlanSetupContexts.


        :param billing_address_zip: The billing_address_zip of this InstallmentPlanSetupContexts.  # noqa: E501
        :type: str
        """

        self._billing_address_zip = billing_address_zip

    @property
    def billing_address_address_line2(self):
        """Gets the billing_address_address_line2 of this InstallmentPlanSetupContexts.  # noqa: E501


        :return: The billing_address_address_line2 of this InstallmentPlanSetupContexts.  # noqa: E501
        :rtype: str
        """
        return self._billing_address_address_line2

    @billing_address_address_line2.setter
    def billing_address_address_line2(self, billing_address_address_line2):
        """Sets the billing_address_address_line2 of this InstallmentPlanSetupContexts.


        :param billing_address_address_line2: The billing_address_address_line2 of this InstallmentPlanSetupContexts.  # noqa: E501
        :type: str
        """

        self._billing_address_address_line2 = billing_address_address_line2

    @property
    def billing_address_city(self):
        """Gets the billing_address_city of this InstallmentPlanSetupContexts.  # noqa: E501


        :return: The billing_address_city of this InstallmentPlanSetupContexts.  # noqa: E501
        :rtype: str
        """
        return self._billing_address_city

    @billing_address_city.setter
    def billing_address_city(self, billing_address_city):
        """Sets the billing_address_city of this InstallmentPlanSetupContexts.


        :param billing_address_city: The billing_address_city of this InstallmentPlanSetupContexts.  # noqa: E501
        :type: str
        """

        self._billing_address_city = billing_address_city

    @property
    def requested_number_of_installments(self):
        """Gets the requested_number_of_installments of this InstallmentPlanSetupContexts.  # noqa: E501


        :return: The requested_number_of_installments of this InstallmentPlanSetupContexts.  # noqa: E501
        :rtype: str
        """
        return self._requested_number_of_installments

    @requested_number_of_installments.setter
    def requested_number_of_installments(self, requested_number_of_installments):
        """Sets the requested_number_of_installments of this InstallmentPlanSetupContexts.


        :param requested_number_of_installments: The requested_number_of_installments of this InstallmentPlanSetupContexts.  # noqa: E501
        :type: str
        """

        self._requested_number_of_installments = requested_number_of_installments

    @property
    def success_exit_url(self):
        """Gets the success_exit_url of this InstallmentPlanSetupContexts.  # noqa: E501


        :return: The success_exit_url of this InstallmentPlanSetupContexts.  # noqa: E501
        :rtype: str
        """
        return self._success_exit_url

    @success_exit_url.setter
    def success_exit_url(self, success_exit_url):
        """Sets the success_exit_url of this InstallmentPlanSetupContexts.


        :param success_exit_url: The success_exit_url of this InstallmentPlanSetupContexts.  # noqa: E501
        :type: str
        """

        self._success_exit_url = success_exit_url

    @property
    def error_exit_url(self):
        """Gets the error_exit_url of this InstallmentPlanSetupContexts.  # noqa: E501


        :return: The error_exit_url of this InstallmentPlanSetupContexts.  # noqa: E501
        :rtype: str
        """
        return self._error_exit_url

    @error_exit_url.setter
    def error_exit_url(self, error_exit_url):
        """Sets the error_exit_url of this InstallmentPlanSetupContexts.


        :param error_exit_url: The error_exit_url of this InstallmentPlanSetupContexts.  # noqa: E501
        :type: str
        """

        self._error_exit_url = error_exit_url

    @property
    def cancel_exit_url(self):
        """Gets the cancel_exit_url of this InstallmentPlanSetupContexts.  # noqa: E501


        :return: The cancel_exit_url of this InstallmentPlanSetupContexts.  # noqa: E501
        :rtype: str
        """
        return self._cancel_exit_url

    @cancel_exit_url.setter
    def cancel_exit_url(self, cancel_exit_url):
        """Sets the cancel_exit_url of this InstallmentPlanSetupContexts.


        :param cancel_exit_url: The cancel_exit_url of this InstallmentPlanSetupContexts.  # noqa: E501
        :type: str
        """

        self._cancel_exit_url = cancel_exit_url

    @property
    def ab_test_query_string(self):
        """Gets the ab_test_query_string of this InstallmentPlanSetupContexts.  # noqa: E501


        :return: The ab_test_query_string of this InstallmentPlanSetupContexts.  # noqa: E501
        :rtype: str
        """
        return self._ab_test_query_string

    @ab_test_query_string.setter
    def ab_test_query_string(self, ab_test_query_string):
        """Sets the ab_test_query_string of this InstallmentPlanSetupContexts.


        :param ab_test_query_string: The ab_test_query_string of this InstallmentPlanSetupContexts.  # noqa: E501
        :type: str
        """

        self._ab_test_query_string = ab_test_query_string

    @property
    def requested_first_installment_amount(self):
        """Gets the requested_first_installment_amount of this InstallmentPlanSetupContexts.  # noqa: E501


        :return: The requested_first_installment_amount of this InstallmentPlanSetupContexts.  # noqa: E501
        :rtype: float
        """
        return self._requested_first_installment_amount

    @requested_first_installment_amount.setter
    def requested_first_installment_amount(self, requested_first_installment_amount):
        """Sets the requested_first_installment_amount of this InstallmentPlanSetupContexts.


        :param requested_first_installment_amount: The requested_first_installment_amount of this InstallmentPlanSetupContexts.  # noqa: E501
        :type: float
        """
        
        if requested_first_installment_amount is None:
            raise ValueError("Invalid value for `requested_first_installment_amount`, must not be `None`")  # noqa: E501

        self._requested_first_installment_amount = requested_first_installment_amount

    @property
    def requested_first_scheduled_installment_date(self):
        """Gets the requested_first_scheduled_installment_date of this InstallmentPlanSetupContexts.  # noqa: E501


        :return: The requested_first_scheduled_installment_date of this InstallmentPlanSetupContexts.  # noqa: E501
        :rtype: datetime
        """
        return self._requested_first_scheduled_installment_date

    @requested_first_scheduled_installment_date.setter
    def requested_first_scheduled_installment_date(self, requested_first_scheduled_installment_date):
        """Sets the requested_first_scheduled_installment_date of this InstallmentPlanSetupContexts.


        :param requested_first_scheduled_installment_date: The requested_first_scheduled_installment_date of this InstallmentPlanSetupContexts.  # noqa: E501
        :type: datetime
        """

        self._requested_first_scheduled_installment_date = requested_first_scheduled_installment_date

    @property
    def send_shopper_approval_request(self):
        """Gets the send_shopper_approval_request of this InstallmentPlanSetupContexts.  # noqa: E501


        :return: The send_shopper_approval_request of this InstallmentPlanSetupContexts.  # noqa: E501
        :rtype: datetime
        """
        return self._send_shopper_approval_request

    @send_shopper_approval_request.setter
    def send_shopper_approval_request(self, send_shopper_approval_request):
        """Sets the send_shopper_approval_request of this InstallmentPlanSetupContexts.


        :param send_shopper_approval_request: The send_shopper_approval_request of this InstallmentPlanSetupContexts.  # noqa: E501
        :type: datetime
        """

        self._send_shopper_approval_request = send_shopper_approval_request

    @property
    def send_shopper_payment_request(self):
        """Gets the send_shopper_payment_request of this InstallmentPlanSetupContexts.  # noqa: E501


        :return: The send_shopper_payment_request of this InstallmentPlanSetupContexts.  # noqa: E501
        :rtype: datetime
        """
        return self._send_shopper_payment_request

    @send_shopper_payment_request.setter
    def send_shopper_payment_request(self, send_shopper_payment_request):
        """Sets the send_shopper_payment_request of this InstallmentPlanSetupContexts.


        :param send_shopper_payment_request: The send_shopper_payment_request of this InstallmentPlanSetupContexts.  # noqa: E501
        :type: datetime
        """

        self._send_shopper_payment_request = send_shopper_payment_request

    @property
    def requested_capture_on_creation(self):
        """Gets the requested_capture_on_creation of this InstallmentPlanSetupContexts.  # noqa: E501


        :return: The requested_capture_on_creation of this InstallmentPlanSetupContexts.  # noqa: E501
        :rtype: bool
        """
        return self._requested_capture_on_creation

    @requested_capture_on_creation.setter
    def requested_capture_on_creation(self, requested_capture_on_creation):
        """Sets the requested_capture_on_creation of this InstallmentPlanSetupContexts.


        :param requested_capture_on_creation: The requested_capture_on_creation of this InstallmentPlanSetupContexts.  # noqa: E501
        :type: bool
        """

        self._requested_capture_on_creation = requested_capture_on_creation

    @property
    def billing_address_country_id(self):
        """Gets the billing_address_country_id of this InstallmentPlanSetupContexts.  # noqa: E501


        :return: The billing_address_country_id of this InstallmentPlanSetupContexts.  # noqa: E501
        :rtype: int
        """
        return self._billing_address_country_id

    @billing_address_country_id.setter
    def billing_address_country_id(self, billing_address_country_id):
        """Sets the billing_address_country_id of this InstallmentPlanSetupContexts.


        :param billing_address_country_id: The billing_address_country_id of this InstallmentPlanSetupContexts.  # noqa: E501
        :type: int
        """

        self._billing_address_country_id = billing_address_country_id

    @property
    def suggested_payment_tp_id(self):
        """Gets the suggested_payment_tp_id of this InstallmentPlanSetupContexts.  # noqa: E501


        :return: The suggested_payment_tp_id of this InstallmentPlanSetupContexts.  # noqa: E501
        :rtype: int
        """
        return self._suggested_payment_tp_id

    @suggested_payment_tp_id.setter
    def suggested_payment_tp_id(self, suggested_payment_tp_id):
        """Sets the suggested_payment_tp_id of this InstallmentPlanSetupContexts.


        :param suggested_payment_tp_id: The suggested_payment_tp_id of this InstallmentPlanSetupContexts.  # noqa: E501
        :type: int
        """

        self._suggested_payment_tp_id = suggested_payment_tp_id

    @property
    def ab_testing_session_id(self):
        """Gets the ab_testing_session_id of this InstallmentPlanSetupContexts.  # noqa: E501


        :return: The ab_testing_session_id of this InstallmentPlanSetupContexts.  # noqa: E501
        :rtype: int
        """
        return self._ab_testing_session_id

    @ab_testing_session_id.setter
    def ab_testing_session_id(self, ab_testing_session_id):
        """Sets the ab_testing_session_id of this InstallmentPlanSetupContexts.


        :param ab_testing_session_id: The ab_testing_session_id of this InstallmentPlanSetupContexts.  # noqa: E501
        :type: int
        """

        self._ab_testing_session_id = ab_testing_session_id

    @property
    def default_num_of_installments(self):
        """Gets the default_num_of_installments of this InstallmentPlanSetupContexts.  # noqa: E501


        :return: The default_num_of_installments of this InstallmentPlanSetupContexts.  # noqa: E501
        :rtype: int
        """
        return self._default_num_of_installments

    @default_num_of_installments.setter
    def default_num_of_installments(self, default_num_of_installments):
        """Sets the default_num_of_installments of this InstallmentPlanSetupContexts.


        :param default_num_of_installments: The default_num_of_installments of this InstallmentPlanSetupContexts.  # noqa: E501
        :type: int
        """
        
        if default_num_of_installments is None:
            raise ValueError("Invalid value for `default_num_of_installments`, must not be `None`")  # noqa: E501

        self._default_num_of_installments = default_num_of_installments

    @property
    def billing_address_state_id(self):
        """Gets the billing_address_state_id of this InstallmentPlanSetupContexts.  # noqa: E501


        :return: The billing_address_state_id of this InstallmentPlanSetupContexts.  # noqa: E501
        :rtype: int
        """
        return self._billing_address_state_id

    @billing_address_state_id.setter
    def billing_address_state_id(self, billing_address_state_id):
        """Sets the billing_address_state_id of this InstallmentPlanSetupContexts.


        :param billing_address_state_id: The billing_address_state_id of this InstallmentPlanSetupContexts.  # noqa: E501
        :type: int
        """

        self._billing_address_state_id = billing_address_state_id

    @property
    def billing_address_legacy_full_address_line(self):
        """Gets the billing_address_legacy_full_address_line of this InstallmentPlanSetupContexts.  # noqa: E501


        :return: The billing_address_legacy_full_address_line of this InstallmentPlanSetupContexts.  # noqa: E501
        :rtype: str
        """
        return self._billing_address_legacy_full_address_line

    @billing_address_legacy_full_address_line.setter
    def billing_address_legacy_full_address_line(self, billing_address_legacy_full_address_line):
        """Sets the billing_address_legacy_full_address_line of this InstallmentPlanSetupContexts.


        :param billing_address_legacy_full_address_line: The billing_address_legacy_full_address_line of this InstallmentPlanSetupContexts.  # noqa: E501
        :type: str
        """

        self._billing_address_legacy_full_address_line = billing_address_legacy_full_address_line

    @property
    def requested_funding(self):
        """Gets the requested_funding of this InstallmentPlanSetupContexts.  # noqa: E501


        :return: The requested_funding of this InstallmentPlanSetupContexts.  # noqa: E501
        :rtype: bool
        """
        return self._requested_funding

    @requested_funding.setter
    def requested_funding(self, requested_funding):
        """Sets the requested_funding of this InstallmentPlanSetupContexts.


        :param requested_funding: The requested_funding of this InstallmentPlanSetupContexts.  # noqa: E501
        :type: bool
        """

        self._requested_funding = requested_funding

    @property
    def success_async_url(self):
        """Gets the success_async_url of this InstallmentPlanSetupContexts.  # noqa: E501


        :return: The success_async_url of this InstallmentPlanSetupContexts.  # noqa: E501
        :rtype: str
        """
        return self._success_async_url

    @success_async_url.setter
    def success_async_url(self, success_async_url):
        """Sets the success_async_url of this InstallmentPlanSetupContexts.


        :param success_async_url: The success_async_url of this InstallmentPlanSetupContexts.  # noqa: E501
        :type: str
        """

        self._success_async_url = success_async_url

    @property
    def attempt3_dsecure(self):
        """Gets the attempt3_dsecure of this InstallmentPlanSetupContexts.  # noqa: E501


        :return: The attempt3_dsecure of this InstallmentPlanSetupContexts.  # noqa: E501
        :rtype: bool
        """
        return self._attempt3_dsecure

    @attempt3_dsecure.setter
    def attempt3_dsecure(self, attempt3_dsecure):
        """Sets the attempt3_dsecure of this InstallmentPlanSetupContexts.


        :param attempt3_dsecure: The attempt3_dsecure of this InstallmentPlanSetupContexts.  # noqa: E501
        :type: bool
        """

        self._attempt3_dsecure = attempt3_dsecure

    @property
    def view_name(self):
        """Gets the view_name of this InstallmentPlanSetupContexts.  # noqa: E501


        :return: The view_name of this InstallmentPlanSetupContexts.  # noqa: E501
        :rtype: str
        """
        return self._view_name

    @view_name.setter
    def view_name(self, view_name):
        """Sets the view_name of this InstallmentPlanSetupContexts.


        :param view_name: The view_name of this InstallmentPlanSetupContexts.  # noqa: E501
        :type: str
        """

        self._view_name = view_name

    @property
    def is_opened_in_iframe(self):
        """Gets the is_opened_in_iframe of this InstallmentPlanSetupContexts.  # noqa: E501


        :return: The is_opened_in_iframe of this InstallmentPlanSetupContexts.  # noqa: E501
        :rtype: bool
        """
        return self._is_opened_in_iframe

    @is_opened_in_iframe.setter
    def is_opened_in_iframe(self, is_opened_in_iframe):
        """Sets the is_opened_in_iframe of this InstallmentPlanSetupContexts.


        :param is_opened_in_iframe: The is_opened_in_iframe of this InstallmentPlanSetupContexts.  # noqa: E501
        :type: bool
        """
        is_opened_in_iframe = bool(is_opened_in_iframe)
        if is_opened_in_iframe is None:
            raise ValueError("Invalid value for `is_opened_in_iframe`, must not be `None`")  # noqa: E501

        self._is_opened_in_iframe = is_opened_in_iframe

    @property
    def is3d_secure_in_popup(self):
        """Gets the is3d_secure_in_popup of this InstallmentPlanSetupContexts.  # noqa: E501


        :return: The is3d_secure_in_popup of this InstallmentPlanSetupContexts.  # noqa: E501
        :rtype: bool
        """
        return self._is3d_secure_in_popup

    @is3d_secure_in_popup.setter
    def is3d_secure_in_popup(self, is3d_secure_in_popup):
        """Sets the is3d_secure_in_popup of this InstallmentPlanSetupContexts.


        :param is3d_secure_in_popup: The is3d_secure_in_popup of this InstallmentPlanSetupContexts.  # noqa: E501
        :type: bool
        """

        self._is3d_secure_in_popup = is3d_secure_in_popup

    @property
    def external_auth_unique_gateway_id(self):
        """Gets the external_auth_unique_gateway_id of this InstallmentPlanSetupContexts.  # noqa: E501


        :return: The external_auth_unique_gateway_id of this InstallmentPlanSetupContexts.  # noqa: E501
        :rtype: str
        """
        return self._external_auth_unique_gateway_id

    @external_auth_unique_gateway_id.setter
    def external_auth_unique_gateway_id(self, external_auth_unique_gateway_id):
        """Sets the external_auth_unique_gateway_id of this InstallmentPlanSetupContexts.


        :param external_auth_unique_gateway_id: The external_auth_unique_gateway_id of this InstallmentPlanSetupContexts.  # noqa: E501
        :type: str
        """

        self._external_auth_unique_gateway_id = external_auth_unique_gateway_id

    @property
    def external_amount_details(self):
        """Gets the external_amount_details of this InstallmentPlanSetupContexts.  # noqa: E501


        :return: The external_amount_details of this InstallmentPlanSetupContexts.  # noqa: E501
        :rtype: float
        """
        return self._external_amount_details

    @external_amount_details.setter
    def external_amount_details(self, external_amount_details):
        """Sets the external_amount_details of this InstallmentPlanSetupContexts.


        :param external_amount_details: The external_amount_details of this InstallmentPlanSetupContexts.  # noqa: E501
        :type: float
        """
        
        if external_amount_details is None:
            raise ValueError("Invalid value for `external_amount_details`, must not be `None`")  # noqa: E501

        self._external_amount_details = external_amount_details

    @property
    def external_auth_date(self):
        """Gets the external_auth_date of this InstallmentPlanSetupContexts.  # noqa: E501


        :return: The external_auth_date of this InstallmentPlanSetupContexts.  # noqa: E501
        :rtype: datetime
        """
        return self._external_auth_date

    @external_auth_date.setter
    def external_auth_date(self, external_auth_date):
        """Sets the external_auth_date of this InstallmentPlanSetupContexts.


        :param external_auth_date: The external_auth_date of this InstallmentPlanSetupContexts.  # noqa: E501
        :type: datetime
        """
        
        if external_auth_date is None:
            raise ValueError("Invalid value for `external_auth_date`, must not be `None`")  # noqa: E501

        self._external_auth_date = external_auth_date

    @property
    def external_auth_transaction_log(self):
        """Gets the external_auth_transaction_log of this InstallmentPlanSetupContexts.  # noqa: E501


        :return: The external_auth_transaction_log of this InstallmentPlanSetupContexts.  # noqa: E501
        :rtype: str
        """
        return self._external_auth_transaction_log

    @external_auth_transaction_log.setter
    def external_auth_transaction_log(self, external_auth_transaction_log):
        """Sets the external_auth_transaction_log of this InstallmentPlanSetupContexts.


        :param external_auth_transaction_log: The external_auth_transaction_log of this InstallmentPlanSetupContexts.  # noqa: E501
        :type: str
        """

        self._external_auth_transaction_log = external_auth_transaction_log

    @property
    def payment_approval_phone(self):
        """Gets the payment_approval_phone of this InstallmentPlanSetupContexts.  # noqa: E501


        :return: The payment_approval_phone of this InstallmentPlanSetupContexts.  # noqa: E501
        :rtype: str
        """
        return self._payment_approval_phone

    @payment_approval_phone.setter
    def payment_approval_phone(self, payment_approval_phone):
        """Sets the payment_approval_phone of this InstallmentPlanSetupContexts.


        :param payment_approval_phone: The payment_approval_phone of this InstallmentPlanSetupContexts.  # noqa: E501
        :type: str
        """

        self._payment_approval_phone = payment_approval_phone

    @property
    def payment_approval_email(self):
        """Gets the payment_approval_email of this InstallmentPlanSetupContexts.  # noqa: E501


        :return: The payment_approval_email of this InstallmentPlanSetupContexts.  # noqa: E501
        :rtype: str
        """
        return self._payment_approval_email

    @payment_approval_email.setter
    def payment_approval_email(self, payment_approval_email):
        """Sets the payment_approval_email of this InstallmentPlanSetupContexts.


        :param payment_approval_email: The payment_approval_email of this InstallmentPlanSetupContexts.  # noqa: E501
        :type: str
        """

        self._payment_approval_email = payment_approval_email

    @property
    def payment_message(self):
        """Gets the payment_message of this InstallmentPlanSetupContexts.  # noqa: E501


        :return: The payment_message of this InstallmentPlanSetupContexts.  # noqa: E501
        :rtype: str
        """
        return self._payment_message

    @payment_message.setter
    def payment_message(self, payment_message):
        """Sets the payment_message of this InstallmentPlanSetupContexts.


        :param payment_message: The payment_message of this InstallmentPlanSetupContexts.  # noqa: E501
        :type: str
        """

        self._payment_message = payment_message

    @property
    def terms_and_conditions_key(self):
        """Gets the terms_and_conditions_key of this InstallmentPlanSetupContexts.  # noqa: E501


        :return: The terms_and_conditions_key of this InstallmentPlanSetupContexts.  # noqa: E501
        :rtype: str
        """
        return self._terms_and_conditions_key

    @terms_and_conditions_key.setter
    def terms_and_conditions_key(self, terms_and_conditions_key):
        """Sets the terms_and_conditions_key of this InstallmentPlanSetupContexts.


        :param terms_and_conditions_key: The terms_and_conditions_key of this InstallmentPlanSetupContexts.  # noqa: E501
        :type: str
        """

        self._terms_and_conditions_key = terms_and_conditions_key

    @property
    def finger_print_id(self):
        """Gets the finger_print_id of this InstallmentPlanSetupContexts.  # noqa: E501


        :return: The finger_print_id of this InstallmentPlanSetupContexts.  # noqa: E501
        :rtype: str
        """
        return self._finger_print_id

    @finger_print_id.setter
    def finger_print_id(self, finger_print_id):
        """Sets the finger_print_id of this InstallmentPlanSetupContexts.


        :param finger_print_id: The finger_print_id of this InstallmentPlanSetupContexts.  # noqa: E501
        :type: str
        """

        self._finger_print_id = finger_print_id

    @property
    def request_update_card_phone(self):
        """Gets the request_update_card_phone of this InstallmentPlanSetupContexts.  # noqa: E501


        :return: The request_update_card_phone of this InstallmentPlanSetupContexts.  # noqa: E501
        :rtype: str
        """
        return self._request_update_card_phone

    @request_update_card_phone.setter
    def request_update_card_phone(self, request_update_card_phone):
        """Sets the request_update_card_phone of this InstallmentPlanSetupContexts.


        :param request_update_card_phone: The request_update_card_phone of this InstallmentPlanSetupContexts.  # noqa: E501
        :type: str
        """

        self._request_update_card_phone = request_update_card_phone

    @property
    def request_update_card_email(self):
        """Gets the request_update_card_email of this InstallmentPlanSetupContexts.  # noqa: E501


        :return: The request_update_card_email of this InstallmentPlanSetupContexts.  # noqa: E501
        :rtype: str
        """
        return self._request_update_card_email

    @request_update_card_email.setter
    def request_update_card_email(self, request_update_card_email):
        """Sets the request_update_card_email of this InstallmentPlanSetupContexts.


        :param request_update_card_email: The request_update_card_email of this InstallmentPlanSetupContexts.  # noqa: E501
        :type: str
        """

        self._request_update_card_email = request_update_card_email

    @property
    def request_update_card_time(self):
        """Gets the request_update_card_time of this InstallmentPlanSetupContexts.  # noqa: E501


        :return: The request_update_card_time of this InstallmentPlanSetupContexts.  # noqa: E501
        :rtype: datetime
        """
        return self._request_update_card_time

    @request_update_card_time.setter
    def request_update_card_time(self, request_update_card_time):
        """Sets the request_update_card_time of this InstallmentPlanSetupContexts.


        :param request_update_card_time: The request_update_card_time of this InstallmentPlanSetupContexts.  # noqa: E501
        :type: datetime
        """

        self._request_update_card_time = request_update_card_time

    @property
    def billing_address_first_time_populated_by(self):
        """Gets the billing_address_first_time_populated_by of this InstallmentPlanSetupContexts.  # noqa: E501


        :return: The billing_address_first_time_populated_by of this InstallmentPlanSetupContexts.  # noqa: E501
        :rtype: str
        """
        return self._billing_address_first_time_populated_by

    @billing_address_first_time_populated_by.setter
    def billing_address_first_time_populated_by(self, billing_address_first_time_populated_by):
        """Sets the billing_address_first_time_populated_by of this InstallmentPlanSetupContexts.


        :param billing_address_first_time_populated_by: The billing_address_first_time_populated_by of this InstallmentPlanSetupContexts.  # noqa: E501
        :type: str
        """

        self._billing_address_first_time_populated_by = billing_address_first_time_populated_by

    @property
    def country(self):
        """Gets the country of this InstallmentPlanSetupContexts.  # noqa: E501


        :return: The country of this InstallmentPlanSetupContexts.  # noqa: E501
        :rtype: Countries
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this InstallmentPlanSetupContexts.


        :param country: The country of this InstallmentPlanSetupContexts.  # noqa: E501
        :type: Countries
        """

        self._country = country

    @property
    def state(self):
        """Gets the state of this InstallmentPlanSetupContexts.  # noqa: E501


        :return: The state of this InstallmentPlanSetupContexts.  # noqa: E501
        :rtype: CountrySubdivisions
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this InstallmentPlanSetupContexts.


        :param state: The state of this InstallmentPlanSetupContexts.  # noqa: E501
        :type: CountrySubdivisions
        """

        self._state = state

    @property
    def ab_testing_session(self):
        """Gets the ab_testing_session of this InstallmentPlanSetupContexts.  # noqa: E501


        :return: The ab_testing_session of this InstallmentPlanSetupContexts.  # noqa: E501
        :rtype: PaymentFormTPABTestingDefinition
        """
        return self._ab_testing_session

    @ab_testing_session.setter
    def ab_testing_session(self, ab_testing_session):
        """Sets the ab_testing_session of this InstallmentPlanSetupContexts.


        :param ab_testing_session: The ab_testing_session of this InstallmentPlanSetupContexts.  # noqa: E501
        :type: PaymentFormTPABTestingDefinition
        """

        self._ab_testing_session = ab_testing_session

    @property
    def suggested_payment_tp(self):
        """Gets the suggested_payment_tp of this InstallmentPlanSetupContexts.  # noqa: E501


        :return: The suggested_payment_tp of this InstallmentPlanSetupContexts.  # noqa: E501
        :rtype: VersionedTouchPoints
        """
        return self._suggested_payment_tp

    @suggested_payment_tp.setter
    def suggested_payment_tp(self, suggested_payment_tp):
        """Sets the suggested_payment_tp of this InstallmentPlanSetupContexts.


        :param suggested_payment_tp: The suggested_payment_tp of this InstallmentPlanSetupContexts.  # noqa: E501
        :type: VersionedTouchPoints
        """

        self._suggested_payment_tp = suggested_payment_tp

    @property
    def installment_plans(self):
        """Gets the installment_plans of this InstallmentPlanSetupContexts.  # noqa: E501


        :return: The installment_plans of this InstallmentPlanSetupContexts.  # noqa: E501
        :rtype: list[InstallmentPlans]
        """
        return self._installment_plans

    @installment_plans.setter
    def installment_plans(self, installment_plans):
        """Sets the installment_plans of this InstallmentPlanSetupContexts.


        :param installment_plans: The installment_plans of this InstallmentPlanSetupContexts.  # noqa: E501
        :type: list[InstallmentPlans]
        """

        self._installment_plans = installment_plans

    @property
    def requested_strategy(self):
        """Gets the requested_strategy of this InstallmentPlanSetupContexts.  # noqa: E501


        :return: The requested_strategy of this InstallmentPlanSetupContexts.  # noqa: E501
        :rtype: PlanStrategy
        """
        return self._requested_strategy

    @requested_strategy.setter
    def requested_strategy(self, requested_strategy):
        """Sets the requested_strategy of this InstallmentPlanSetupContexts.


        :param requested_strategy: The requested_strategy of this InstallmentPlanSetupContexts.  # noqa: E501
        :type: PlanStrategy
        """

        self._requested_strategy = requested_strategy

    @property
    def billing_address(self):
        """Gets the billing_address of this InstallmentPlanSetupContexts.  # noqa: E501


        :return: The billing_address of this InstallmentPlanSetupContexts.  # noqa: E501
        :rtype: AddressData2
        """
        return self._billing_address

    @billing_address.setter
    def billing_address(self, billing_address):
        """Sets the billing_address of this InstallmentPlanSetupContexts.


        :param billing_address: The billing_address of this InstallmentPlanSetupContexts.  # noqa: E501
        :type: AddressData2
        """

        self._billing_address = billing_address

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InstallmentPlanSetupContexts, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InstallmentPlanSetupContexts):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
