# coding: utf-8

"""
    splitit-web-api-public-sdk

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class AccountUpdaterPendingCards(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'card_id': 'int',
        'export_time': 'datetime',
        'export_batch_id': 'str',
        'export_record_id': 'str',
        'import_time': 'datetime',
        'card': 'Cards',
        'account_updater': 'AccountUpdaterProvider'
    }

    attribute_map = {
        'id': 'Id',
        'card_id': 'CardId',
        'export_time': 'ExportTime',
        'export_batch_id': 'ExportBatchId',
        'export_record_id': 'ExportRecordId',
        'import_time': 'ImportTime',
        'card': 'Card',
        'account_updater': 'AccountUpdater'
    }

    def __init__(self, id=None, card_id=None, export_time=None, export_batch_id=None, export_record_id=None, import_time=None, card=None, account_updater=None):  # noqa: E501
        """AccountUpdaterPendingCards - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._card_id = None
        self._export_time = None
        self._export_batch_id = None
        self._export_record_id = None
        self._import_time = None
        self._card = None
        self._account_updater = None
        self.discriminator = None

        self._id = id
        self._card_id = card_id
        if export_time is not None:
            self._export_time = export_time
        if export_batch_id is not None:
            self._export_batch_id = export_batch_id
        if export_record_id is not None:
            self._export_record_id = export_record_id
        if import_time is not None:
            self._import_time = import_time
        if card is not None:
            self._card = card
        self._account_updater = account_updater

    @property
    def id(self):
        """Gets the id of this AccountUpdaterPendingCards.  # noqa: E501


        :return: The id of this AccountUpdaterPendingCards.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AccountUpdaterPendingCards.


        :param id: The id of this AccountUpdaterPendingCards.  # noqa: E501
        :type: int
        """
        
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def card_id(self):
        """Gets the card_id of this AccountUpdaterPendingCards.  # noqa: E501


        :return: The card_id of this AccountUpdaterPendingCards.  # noqa: E501
        :rtype: int
        """
        return self._card_id

    @card_id.setter
    def card_id(self, card_id):
        """Sets the card_id of this AccountUpdaterPendingCards.


        :param card_id: The card_id of this AccountUpdaterPendingCards.  # noqa: E501
        :type: int
        """
        
        if card_id is None:
            raise ValueError("Invalid value for `card_id`, must not be `None`")  # noqa: E501

        self._card_id = card_id

    @property
    def export_time(self):
        """Gets the export_time of this AccountUpdaterPendingCards.  # noqa: E501


        :return: The export_time of this AccountUpdaterPendingCards.  # noqa: E501
        :rtype: datetime
        """
        return self._export_time

    @export_time.setter
    def export_time(self, export_time):
        """Sets the export_time of this AccountUpdaterPendingCards.


        :param export_time: The export_time of this AccountUpdaterPendingCards.  # noqa: E501
        :type: datetime
        """

        self._export_time = export_time

    @property
    def export_batch_id(self):
        """Gets the export_batch_id of this AccountUpdaterPendingCards.  # noqa: E501


        :return: The export_batch_id of this AccountUpdaterPendingCards.  # noqa: E501
        :rtype: str
        """
        return self._export_batch_id

    @export_batch_id.setter
    def export_batch_id(self, export_batch_id):
        """Sets the export_batch_id of this AccountUpdaterPendingCards.


        :param export_batch_id: The export_batch_id of this AccountUpdaterPendingCards.  # noqa: E501
        :type: str
        """

        self._export_batch_id = export_batch_id

    @property
    def export_record_id(self):
        """Gets the export_record_id of this AccountUpdaterPendingCards.  # noqa: E501


        :return: The export_record_id of this AccountUpdaterPendingCards.  # noqa: E501
        :rtype: str
        """
        return self._export_record_id

    @export_record_id.setter
    def export_record_id(self, export_record_id):
        """Sets the export_record_id of this AccountUpdaterPendingCards.


        :param export_record_id: The export_record_id of this AccountUpdaterPendingCards.  # noqa: E501
        :type: str
        """

        self._export_record_id = export_record_id

    @property
    def import_time(self):
        """Gets the import_time of this AccountUpdaterPendingCards.  # noqa: E501


        :return: The import_time of this AccountUpdaterPendingCards.  # noqa: E501
        :rtype: datetime
        """
        return self._import_time

    @import_time.setter
    def import_time(self, import_time):
        """Sets the import_time of this AccountUpdaterPendingCards.


        :param import_time: The import_time of this AccountUpdaterPendingCards.  # noqa: E501
        :type: datetime
        """

        self._import_time = import_time

    @property
    def card(self):
        """Gets the card of this AccountUpdaterPendingCards.  # noqa: E501


        :return: The card of this AccountUpdaterPendingCards.  # noqa: E501
        :rtype: Cards
        """
        return self._card

    @card.setter
    def card(self, card):
        """Sets the card of this AccountUpdaterPendingCards.


        :param card: The card of this AccountUpdaterPendingCards.  # noqa: E501
        :type: Cards
        """

        self._card = card

    @property
    def account_updater(self):
        """Gets the account_updater of this AccountUpdaterPendingCards.  # noqa: E501


        :return: The account_updater of this AccountUpdaterPendingCards.  # noqa: E501
        :rtype: AccountUpdaterProvider
        """
        return self._account_updater

    @account_updater.setter
    def account_updater(self, account_updater):
        """Sets the account_updater of this AccountUpdaterPendingCards.


        :param account_updater: The account_updater of this AccountUpdaterPendingCards.  # noqa: E501
        :type: AccountUpdaterProvider
        """
        
        if account_updater is None:
            raise ValueError("Invalid value for `account_updater`, must not be `None`")  # noqa: E501

        self._account_updater = account_updater

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AccountUpdaterPendingCards, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccountUpdaterPendingCards):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
