# coding: utf-8

"""
    splitit-web-api-public-sdk

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SplititJobDefinitions(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'code': 'str',
        'name': 'str',
        'scope_code': 'str',
        'cron_expression': 'str',
        'parameter_group_id': 'int',
        'parameter_group': 'ParameterGroups',
        'user_job_subscriptions': 'list[UserJobSubscriptions]'
    }

    attribute_map = {
        'id': 'Id',
        'code': 'Code',
        'name': 'Name',
        'scope_code': 'ScopeCode',
        'cron_expression': 'CronExpression',
        'parameter_group_id': 'ParameterGroupId',
        'parameter_group': 'ParameterGroup',
        'user_job_subscriptions': 'UserJobSubscriptions'
    }

    def __init__(self, id=None, code=None, name=None, scope_code=None, cron_expression=None, parameter_group_id=None, parameter_group=None, user_job_subscriptions=None):  # noqa: E501
        """SplititJobDefinitions - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._code = None
        self._name = None
        self._scope_code = None
        self._cron_expression = None
        self._parameter_group_id = None
        self._parameter_group = None
        self._user_job_subscriptions = None
        self.discriminator = None

        self._id = id
        if code is not None:
            self._code = code
        if name is not None:
            self._name = name
        if scope_code is not None:
            self._scope_code = scope_code
        if cron_expression is not None:
            self._cron_expression = cron_expression
        if parameter_group_id is not None:
            self._parameter_group_id = parameter_group_id
        if parameter_group is not None:
            self._parameter_group = parameter_group
        if user_job_subscriptions is not None:
            self._user_job_subscriptions = user_job_subscriptions

    @property
    def id(self):
        """Gets the id of this SplititJobDefinitions.  # noqa: E501


        :return: The id of this SplititJobDefinitions.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SplititJobDefinitions.


        :param id: The id of this SplititJobDefinitions.  # noqa: E501
        :type: int
        """
        
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def code(self):
        """Gets the code of this SplititJobDefinitions.  # noqa: E501


        :return: The code of this SplititJobDefinitions.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this SplititJobDefinitions.


        :param code: The code of this SplititJobDefinitions.  # noqa: E501
        :type: str
        """

        self._code = code

    @property
    def name(self):
        """Gets the name of this SplititJobDefinitions.  # noqa: E501


        :return: The name of this SplititJobDefinitions.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SplititJobDefinitions.


        :param name: The name of this SplititJobDefinitions.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def scope_code(self):
        """Gets the scope_code of this SplititJobDefinitions.  # noqa: E501


        :return: The scope_code of this SplititJobDefinitions.  # noqa: E501
        :rtype: str
        """
        return self._scope_code

    @scope_code.setter
    def scope_code(self, scope_code):
        """Sets the scope_code of this SplititJobDefinitions.


        :param scope_code: The scope_code of this SplititJobDefinitions.  # noqa: E501
        :type: str
        """

        self._scope_code = scope_code

    @property
    def cron_expression(self):
        """Gets the cron_expression of this SplititJobDefinitions.  # noqa: E501


        :return: The cron_expression of this SplititJobDefinitions.  # noqa: E501
        :rtype: str
        """
        return self._cron_expression

    @cron_expression.setter
    def cron_expression(self, cron_expression):
        """Sets the cron_expression of this SplititJobDefinitions.


        :param cron_expression: The cron_expression of this SplititJobDefinitions.  # noqa: E501
        :type: str
        """

        self._cron_expression = cron_expression

    @property
    def parameter_group_id(self):
        """Gets the parameter_group_id of this SplititJobDefinitions.  # noqa: E501


        :return: The parameter_group_id of this SplititJobDefinitions.  # noqa: E501
        :rtype: int
        """
        return self._parameter_group_id

    @parameter_group_id.setter
    def parameter_group_id(self, parameter_group_id):
        """Sets the parameter_group_id of this SplititJobDefinitions.


        :param parameter_group_id: The parameter_group_id of this SplititJobDefinitions.  # noqa: E501
        :type: int
        """

        self._parameter_group_id = parameter_group_id

    @property
    def parameter_group(self):
        """Gets the parameter_group of this SplititJobDefinitions.  # noqa: E501


        :return: The parameter_group of this SplititJobDefinitions.  # noqa: E501
        :rtype: ParameterGroups
        """
        return self._parameter_group

    @parameter_group.setter
    def parameter_group(self, parameter_group):
        """Sets the parameter_group of this SplititJobDefinitions.


        :param parameter_group: The parameter_group of this SplititJobDefinitions.  # noqa: E501
        :type: ParameterGroups
        """

        self._parameter_group = parameter_group

    @property
    def user_job_subscriptions(self):
        """Gets the user_job_subscriptions of this SplititJobDefinitions.  # noqa: E501


        :return: The user_job_subscriptions of this SplititJobDefinitions.  # noqa: E501
        :rtype: list[UserJobSubscriptions]
        """
        return self._user_job_subscriptions

    @user_job_subscriptions.setter
    def user_job_subscriptions(self, user_job_subscriptions):
        """Sets the user_job_subscriptions of this SplititJobDefinitions.


        :param user_job_subscriptions: The user_job_subscriptions of this SplititJobDefinitions.  # noqa: E501
        :type: list[UserJobSubscriptions]
        """

        self._user_job_subscriptions = user_job_subscriptions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SplititJobDefinitions, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SplititJobDefinitions):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
