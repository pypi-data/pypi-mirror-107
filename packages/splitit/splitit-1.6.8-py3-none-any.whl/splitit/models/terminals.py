# coding: utf-8

"""
    splitit-web-api-public-sdk

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Terminals(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'email': 'str',
        'api_key': 'str',
        'wizard_timeout': 'int',
        'merchant_id': 'int',
        'utc_offset': 'float',
        'is_disabled': 'bool',
        'charge_before_shipping': 'bool',
        'terminal_id': 'str',
        'agent_id': 'int',
        'can_cancel_installments_plan': 'bool',
        'crm_id': 'str',
        'currency_id': 'int',
        'pending_shipment_reminder_days': 'int',
        'business_unit_id': 'int',
        'keep_non_approved_plan_live': 'int',
        'use_test_gateway': 'bool',
        'agent': 'Agents',
        'business_unit': 'BusinessUnits',
        'currency': 'Currencies',
        'merchant': 'Merchants',
        'account_updater_subscribers_scopes': 'list[AccountUpdaterSubscribersScopes]',
        'installment_plans': 'list[InstallmentPlans]',
        'reconciliation_reports': 'list[ReconciliationReports]',
        'state_limit_rule_datas': 'list[StateLimitRuleDatas]',
        'terminal_countries': 'list[TerminalCountries]',
        'terminal_gateway_datas': 'list[TerminalGatewayDatas]',
        'terminal_kvps': 'list[TerminalKvps]',
        'continue_existing_plan_with_original_gateway': 'bool',
        'active_terminal_data': 'TerminalGatewayDatas',
        'chb_default_action': 'ChbDefaultAction',
        'failure_under_frozen_installments_plan': 'FailureUnderFrozenInstallmentsPlan',
        'refund_under_cancelation': 'RefundUnderCancelation',
        'integration_type': 'IntegrationType',
        'test_mode': 'TestModes'
    }

    attribute_map = {
        'id': 'Id',
        'name': 'Name',
        'email': 'Email',
        'api_key': 'ApiKey',
        'wizard_timeout': 'WizardTimeout',
        'merchant_id': 'MerchantId',
        'utc_offset': 'UtcOffset',
        'is_disabled': 'IsDisabled',
        'charge_before_shipping': 'ChargeBeforeShipping',
        'terminal_id': 'TerminalId',
        'agent_id': 'AgentId',
        'can_cancel_installments_plan': 'CanCancelInstallmentsPlan',
        'crm_id': 'CrmId',
        'currency_id': 'CurrencyId',
        'pending_shipment_reminder_days': 'PendingShipmentReminderDays',
        'business_unit_id': 'BusinessUnitId',
        'keep_non_approved_plan_live': 'KeepNonApprovedPlanLive',
        'use_test_gateway': 'UseTestGateway',
        'agent': 'Agent',
        'business_unit': 'BusinessUnit',
        'currency': 'Currency',
        'merchant': 'Merchant',
        'account_updater_subscribers_scopes': 'AccountUpdaterSubscribersScopes',
        'installment_plans': 'InstallmentPlans',
        'reconciliation_reports': 'ReconciliationReports',
        'state_limit_rule_datas': 'StateLimitRuleDatas',
        'terminal_countries': 'TerminalCountries',
        'terminal_gateway_datas': 'TerminalGatewayDatas',
        'terminal_kvps': 'TerminalKvps',
        'continue_existing_plan_with_original_gateway': 'ContinueExistingPlanWithOriginalGateway',
        'active_terminal_data': 'ActiveTerminalData',
        'chb_default_action': 'ChbDefaultAction',
        'failure_under_frozen_installments_plan': 'FailureUnderFrozenInstallmentsPlan',
        'refund_under_cancelation': 'RefundUnderCancelation',
        'integration_type': 'IntegrationType',
        'test_mode': 'TestMode'
    }

    def __init__(self, id=None, name=None, email=None, api_key=None, wizard_timeout=None, merchant_id=None, utc_offset=None, is_disabled=None, charge_before_shipping=None, terminal_id=None, agent_id=None, can_cancel_installments_plan=None, crm_id=None, currency_id=None, pending_shipment_reminder_days=None, business_unit_id=None, keep_non_approved_plan_live=None, use_test_gateway=None, agent=None, business_unit=None, currency=None, merchant=None, account_updater_subscribers_scopes=None, installment_plans=None, reconciliation_reports=None, state_limit_rule_datas=None, terminal_countries=None, terminal_gateway_datas=None, terminal_kvps=None, continue_existing_plan_with_original_gateway=None, active_terminal_data=None, chb_default_action=None, failure_under_frozen_installments_plan=None, refund_under_cancelation=None, integration_type=None, test_mode=None):  # noqa: E501
        """Terminals - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._name = None
        self._email = None
        self._api_key = None
        self._wizard_timeout = None
        self._merchant_id = None
        self._utc_offset = None
        self._is_disabled = None
        self._charge_before_shipping = None
        self._terminal_id = None
        self._agent_id = None
        self._can_cancel_installments_plan = None
        self._crm_id = None
        self._currency_id = None
        self._pending_shipment_reminder_days = None
        self._business_unit_id = None
        self._keep_non_approved_plan_live = None
        self._use_test_gateway = None
        self._agent = None
        self._business_unit = None
        self._currency = None
        self._merchant = None
        self._account_updater_subscribers_scopes = None
        self._installment_plans = None
        self._reconciliation_reports = None
        self._state_limit_rule_datas = None
        self._terminal_countries = None
        self._terminal_gateway_datas = None
        self._terminal_kvps = None
        self._continue_existing_plan_with_original_gateway = None
        self._active_terminal_data = None
        self._chb_default_action = None
        self._failure_under_frozen_installments_plan = None
        self._refund_under_cancelation = None
        self._integration_type = None
        self._test_mode = None
        self.discriminator = None

        self._id = id
        if name is not None:
            self._name = name
        if email is not None:
            self._email = email
        if api_key is not None:
            self._api_key = api_key
        self._wizard_timeout = wizard_timeout
        self._merchant_id = merchant_id
        self._utc_offset = utc_offset
        self._is_disabled = is_disabled
        self._charge_before_shipping = charge_before_shipping
        if terminal_id is not None:
            self._terminal_id = terminal_id
        self._agent_id = agent_id
        self._can_cancel_installments_plan = can_cancel_installments_plan
        if crm_id is not None:
            self._crm_id = crm_id
        if currency_id is not None:
            self._currency_id = currency_id
        self._pending_shipment_reminder_days = pending_shipment_reminder_days
        self._business_unit_id = business_unit_id
        self._keep_non_approved_plan_live = keep_non_approved_plan_live
        self._use_test_gateway = use_test_gateway
        if agent is not None:
            self._agent = agent
        if business_unit is not None:
            self._business_unit = business_unit
        if currency is not None:
            self._currency = currency
        if merchant is not None:
            self._merchant = merchant
        if account_updater_subscribers_scopes is not None:
            self._account_updater_subscribers_scopes = account_updater_subscribers_scopes
        if installment_plans is not None:
            self._installment_plans = installment_plans
        if reconciliation_reports is not None:
            self._reconciliation_reports = reconciliation_reports
        if state_limit_rule_datas is not None:
            self._state_limit_rule_datas = state_limit_rule_datas
        if terminal_countries is not None:
            self._terminal_countries = terminal_countries
        if terminal_gateway_datas is not None:
            self._terminal_gateway_datas = terminal_gateway_datas
        if terminal_kvps is not None:
            self._terminal_kvps = terminal_kvps
        self._continue_existing_plan_with_original_gateway = continue_existing_plan_with_original_gateway
        if active_terminal_data is not None:
            self._active_terminal_data = active_terminal_data
        self._chb_default_action = chb_default_action
        self._failure_under_frozen_installments_plan = failure_under_frozen_installments_plan
        self._refund_under_cancelation = refund_under_cancelation
        self._integration_type = integration_type
        self._test_mode = test_mode

    @property
    def id(self):
        """Gets the id of this Terminals.  # noqa: E501


        :return: The id of this Terminals.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Terminals.


        :param id: The id of this Terminals.  # noqa: E501
        :type: int
        """
        
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this Terminals.  # noqa: E501


        :return: The name of this Terminals.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Terminals.


        :param name: The name of this Terminals.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def email(self):
        """Gets the email of this Terminals.  # noqa: E501


        :return: The email of this Terminals.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this Terminals.


        :param email: The email of this Terminals.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def api_key(self):
        """Gets the api_key of this Terminals.  # noqa: E501


        :return: The api_key of this Terminals.  # noqa: E501
        :rtype: str
        """
        return self._api_key

    @api_key.setter
    def api_key(self, api_key):
        """Sets the api_key of this Terminals.


        :param api_key: The api_key of this Terminals.  # noqa: E501
        :type: str
        """

        self._api_key = api_key

    @property
    def wizard_timeout(self):
        """Gets the wizard_timeout of this Terminals.  # noqa: E501


        :return: The wizard_timeout of this Terminals.  # noqa: E501
        :rtype: int
        """
        return self._wizard_timeout

    @wizard_timeout.setter
    def wizard_timeout(self, wizard_timeout):
        """Sets the wizard_timeout of this Terminals.


        :param wizard_timeout: The wizard_timeout of this Terminals.  # noqa: E501
        :type: int
        """
        
        if wizard_timeout is None:
            raise ValueError("Invalid value for `wizard_timeout`, must not be `None`")  # noqa: E501

        self._wizard_timeout = wizard_timeout

    @property
    def merchant_id(self):
        """Gets the merchant_id of this Terminals.  # noqa: E501


        :return: The merchant_id of this Terminals.  # noqa: E501
        :rtype: int
        """
        return self._merchant_id

    @merchant_id.setter
    def merchant_id(self, merchant_id):
        """Sets the merchant_id of this Terminals.


        :param merchant_id: The merchant_id of this Terminals.  # noqa: E501
        :type: int
        """
        
        if merchant_id is None:
            raise ValueError("Invalid value for `merchant_id`, must not be `None`")  # noqa: E501

        self._merchant_id = merchant_id

    @property
    def utc_offset(self):
        """Gets the utc_offset of this Terminals.  # noqa: E501


        :return: The utc_offset of this Terminals.  # noqa: E501
        :rtype: float
        """
        return self._utc_offset

    @utc_offset.setter
    def utc_offset(self, utc_offset):
        """Sets the utc_offset of this Terminals.


        :param utc_offset: The utc_offset of this Terminals.  # noqa: E501
        :type: float
        """
        
        if utc_offset is None:
            raise ValueError("Invalid value for `utc_offset`, must not be `None`")  # noqa: E501

        self._utc_offset = utc_offset

    @property
    def is_disabled(self):
        """Gets the is_disabled of this Terminals.  # noqa: E501


        :return: The is_disabled of this Terminals.  # noqa: E501
        :rtype: bool
        """
        return self._is_disabled

    @is_disabled.setter
    def is_disabled(self, is_disabled):
        """Sets the is_disabled of this Terminals.


        :param is_disabled: The is_disabled of this Terminals.  # noqa: E501
        :type: bool
        """
        is_disabled = bool(is_disabled)
        if is_disabled is None:
            raise ValueError("Invalid value for `is_disabled`, must not be `None`")  # noqa: E501

        self._is_disabled = is_disabled

    @property
    def charge_before_shipping(self):
        """Gets the charge_before_shipping of this Terminals.  # noqa: E501


        :return: The charge_before_shipping of this Terminals.  # noqa: E501
        :rtype: bool
        """
        return self._charge_before_shipping

    @charge_before_shipping.setter
    def charge_before_shipping(self, charge_before_shipping):
        """Sets the charge_before_shipping of this Terminals.


        :param charge_before_shipping: The charge_before_shipping of this Terminals.  # noqa: E501
        :type: bool
        """
        charge_before_shipping = bool(charge_before_shipping)
        if charge_before_shipping is None:
            raise ValueError("Invalid value for `charge_before_shipping`, must not be `None`")  # noqa: E501

        self._charge_before_shipping = charge_before_shipping

    @property
    def terminal_id(self):
        """Gets the terminal_id of this Terminals.  # noqa: E501


        :return: The terminal_id of this Terminals.  # noqa: E501
        :rtype: str
        """
        return self._terminal_id

    @terminal_id.setter
    def terminal_id(self, terminal_id):
        """Sets the terminal_id of this Terminals.


        :param terminal_id: The terminal_id of this Terminals.  # noqa: E501
        :type: str
        """

        self._terminal_id = terminal_id

    @property
    def agent_id(self):
        """Gets the agent_id of this Terminals.  # noqa: E501


        :return: The agent_id of this Terminals.  # noqa: E501
        :rtype: int
        """
        return self._agent_id

    @agent_id.setter
    def agent_id(self, agent_id):
        """Sets the agent_id of this Terminals.


        :param agent_id: The agent_id of this Terminals.  # noqa: E501
        :type: int
        """
        
        if agent_id is None:
            raise ValueError("Invalid value for `agent_id`, must not be `None`")  # noqa: E501

        self._agent_id = agent_id

    @property
    def can_cancel_installments_plan(self):
        """Gets the can_cancel_installments_plan of this Terminals.  # noqa: E501


        :return: The can_cancel_installments_plan of this Terminals.  # noqa: E501
        :rtype: bool
        """
        return self._can_cancel_installments_plan

    @can_cancel_installments_plan.setter
    def can_cancel_installments_plan(self, can_cancel_installments_plan):
        """Sets the can_cancel_installments_plan of this Terminals.


        :param can_cancel_installments_plan: The can_cancel_installments_plan of this Terminals.  # noqa: E501
        :type: bool
        """
        can_cancel_installments_plan = bool(can_cancel_installments_plan)
        if can_cancel_installments_plan is None:
            raise ValueError("Invalid value for `can_cancel_installments_plan`, must not be `None`")  # noqa: E501

        self._can_cancel_installments_plan = can_cancel_installments_plan

    @property
    def crm_id(self):
        """Gets the crm_id of this Terminals.  # noqa: E501


        :return: The crm_id of this Terminals.  # noqa: E501
        :rtype: str
        """
        return self._crm_id

    @crm_id.setter
    def crm_id(self, crm_id):
        """Sets the crm_id of this Terminals.


        :param crm_id: The crm_id of this Terminals.  # noqa: E501
        :type: str
        """

        self._crm_id = crm_id

    @property
    def currency_id(self):
        """Gets the currency_id of this Terminals.  # noqa: E501


        :return: The currency_id of this Terminals.  # noqa: E501
        :rtype: int
        """
        return self._currency_id

    @currency_id.setter
    def currency_id(self, currency_id):
        """Sets the currency_id of this Terminals.


        :param currency_id: The currency_id of this Terminals.  # noqa: E501
        :type: int
        """

        self._currency_id = currency_id

    @property
    def pending_shipment_reminder_days(self):
        """Gets the pending_shipment_reminder_days of this Terminals.  # noqa: E501


        :return: The pending_shipment_reminder_days of this Terminals.  # noqa: E501
        :rtype: int
        """
        return self._pending_shipment_reminder_days

    @pending_shipment_reminder_days.setter
    def pending_shipment_reminder_days(self, pending_shipment_reminder_days):
        """Sets the pending_shipment_reminder_days of this Terminals.


        :param pending_shipment_reminder_days: The pending_shipment_reminder_days of this Terminals.  # noqa: E501
        :type: int
        """
        
        if pending_shipment_reminder_days is None:
            raise ValueError("Invalid value for `pending_shipment_reminder_days`, must not be `None`")  # noqa: E501

        self._pending_shipment_reminder_days = pending_shipment_reminder_days

    @property
    def business_unit_id(self):
        """Gets the business_unit_id of this Terminals.  # noqa: E501


        :return: The business_unit_id of this Terminals.  # noqa: E501
        :rtype: int
        """
        return self._business_unit_id

    @business_unit_id.setter
    def business_unit_id(self, business_unit_id):
        """Sets the business_unit_id of this Terminals.


        :param business_unit_id: The business_unit_id of this Terminals.  # noqa: E501
        :type: int
        """
        
        if business_unit_id is None:
            raise ValueError("Invalid value for `business_unit_id`, must not be `None`")  # noqa: E501

        self._business_unit_id = business_unit_id

    @property
    def keep_non_approved_plan_live(self):
        """Gets the keep_non_approved_plan_live of this Terminals.  # noqa: E501


        :return: The keep_non_approved_plan_live of this Terminals.  # noqa: E501
        :rtype: int
        """
        return self._keep_non_approved_plan_live

    @keep_non_approved_plan_live.setter
    def keep_non_approved_plan_live(self, keep_non_approved_plan_live):
        """Sets the keep_non_approved_plan_live of this Terminals.


        :param keep_non_approved_plan_live: The keep_non_approved_plan_live of this Terminals.  # noqa: E501
        :type: int
        """
        
        if keep_non_approved_plan_live is None:
            raise ValueError("Invalid value for `keep_non_approved_plan_live`, must not be `None`")  # noqa: E501

        self._keep_non_approved_plan_live = keep_non_approved_plan_live

    @property
    def use_test_gateway(self):
        """Gets the use_test_gateway of this Terminals.  # noqa: E501


        :return: The use_test_gateway of this Terminals.  # noqa: E501
        :rtype: bool
        """
        return self._use_test_gateway

    @use_test_gateway.setter
    def use_test_gateway(self, use_test_gateway):
        """Sets the use_test_gateway of this Terminals.


        :param use_test_gateway: The use_test_gateway of this Terminals.  # noqa: E501
        :type: bool
        """
        use_test_gateway = bool(use_test_gateway)
        if use_test_gateway is None:
            raise ValueError("Invalid value for `use_test_gateway`, must not be `None`")  # noqa: E501

        self._use_test_gateway = use_test_gateway

    @property
    def agent(self):
        """Gets the agent of this Terminals.  # noqa: E501


        :return: The agent of this Terminals.  # noqa: E501
        :rtype: Agents
        """
        return self._agent

    @agent.setter
    def agent(self, agent):
        """Sets the agent of this Terminals.


        :param agent: The agent of this Terminals.  # noqa: E501
        :type: Agents
        """

        self._agent = agent

    @property
    def business_unit(self):
        """Gets the business_unit of this Terminals.  # noqa: E501


        :return: The business_unit of this Terminals.  # noqa: E501
        :rtype: BusinessUnits
        """
        return self._business_unit

    @business_unit.setter
    def business_unit(self, business_unit):
        """Sets the business_unit of this Terminals.


        :param business_unit: The business_unit of this Terminals.  # noqa: E501
        :type: BusinessUnits
        """

        self._business_unit = business_unit

    @property
    def currency(self):
        """Gets the currency of this Terminals.  # noqa: E501


        :return: The currency of this Terminals.  # noqa: E501
        :rtype: Currencies
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this Terminals.


        :param currency: The currency of this Terminals.  # noqa: E501
        :type: Currencies
        """

        self._currency = currency

    @property
    def merchant(self):
        """Gets the merchant of this Terminals.  # noqa: E501


        :return: The merchant of this Terminals.  # noqa: E501
        :rtype: Merchants
        """
        return self._merchant

    @merchant.setter
    def merchant(self, merchant):
        """Sets the merchant of this Terminals.


        :param merchant: The merchant of this Terminals.  # noqa: E501
        :type: Merchants
        """

        self._merchant = merchant

    @property
    def account_updater_subscribers_scopes(self):
        """Gets the account_updater_subscribers_scopes of this Terminals.  # noqa: E501


        :return: The account_updater_subscribers_scopes of this Terminals.  # noqa: E501
        :rtype: list[AccountUpdaterSubscribersScopes]
        """
        return self._account_updater_subscribers_scopes

    @account_updater_subscribers_scopes.setter
    def account_updater_subscribers_scopes(self, account_updater_subscribers_scopes):
        """Sets the account_updater_subscribers_scopes of this Terminals.


        :param account_updater_subscribers_scopes: The account_updater_subscribers_scopes of this Terminals.  # noqa: E501
        :type: list[AccountUpdaterSubscribersScopes]
        """

        self._account_updater_subscribers_scopes = account_updater_subscribers_scopes

    @property
    def installment_plans(self):
        """Gets the installment_plans of this Terminals.  # noqa: E501


        :return: The installment_plans of this Terminals.  # noqa: E501
        :rtype: list[InstallmentPlans]
        """
        return self._installment_plans

    @installment_plans.setter
    def installment_plans(self, installment_plans):
        """Sets the installment_plans of this Terminals.


        :param installment_plans: The installment_plans of this Terminals.  # noqa: E501
        :type: list[InstallmentPlans]
        """

        self._installment_plans = installment_plans

    @property
    def reconciliation_reports(self):
        """Gets the reconciliation_reports of this Terminals.  # noqa: E501


        :return: The reconciliation_reports of this Terminals.  # noqa: E501
        :rtype: list[ReconciliationReports]
        """
        return self._reconciliation_reports

    @reconciliation_reports.setter
    def reconciliation_reports(self, reconciliation_reports):
        """Sets the reconciliation_reports of this Terminals.


        :param reconciliation_reports: The reconciliation_reports of this Terminals.  # noqa: E501
        :type: list[ReconciliationReports]
        """

        self._reconciliation_reports = reconciliation_reports

    @property
    def state_limit_rule_datas(self):
        """Gets the state_limit_rule_datas of this Terminals.  # noqa: E501


        :return: The state_limit_rule_datas of this Terminals.  # noqa: E501
        :rtype: list[StateLimitRuleDatas]
        """
        return self._state_limit_rule_datas

    @state_limit_rule_datas.setter
    def state_limit_rule_datas(self, state_limit_rule_datas):
        """Sets the state_limit_rule_datas of this Terminals.


        :param state_limit_rule_datas: The state_limit_rule_datas of this Terminals.  # noqa: E501
        :type: list[StateLimitRuleDatas]
        """

        self._state_limit_rule_datas = state_limit_rule_datas

    @property
    def terminal_countries(self):
        """Gets the terminal_countries of this Terminals.  # noqa: E501


        :return: The terminal_countries of this Terminals.  # noqa: E501
        :rtype: list[TerminalCountries]
        """
        return self._terminal_countries

    @terminal_countries.setter
    def terminal_countries(self, terminal_countries):
        """Sets the terminal_countries of this Terminals.


        :param terminal_countries: The terminal_countries of this Terminals.  # noqa: E501
        :type: list[TerminalCountries]
        """

        self._terminal_countries = terminal_countries

    @property
    def terminal_gateway_datas(self):
        """Gets the terminal_gateway_datas of this Terminals.  # noqa: E501


        :return: The terminal_gateway_datas of this Terminals.  # noqa: E501
        :rtype: list[TerminalGatewayDatas]
        """
        return self._terminal_gateway_datas

    @terminal_gateway_datas.setter
    def terminal_gateway_datas(self, terminal_gateway_datas):
        """Sets the terminal_gateway_datas of this Terminals.


        :param terminal_gateway_datas: The terminal_gateway_datas of this Terminals.  # noqa: E501
        :type: list[TerminalGatewayDatas]
        """

        self._terminal_gateway_datas = terminal_gateway_datas

    @property
    def terminal_kvps(self):
        """Gets the terminal_kvps of this Terminals.  # noqa: E501


        :return: The terminal_kvps of this Terminals.  # noqa: E501
        :rtype: list[TerminalKvps]
        """
        return self._terminal_kvps

    @terminal_kvps.setter
    def terminal_kvps(self, terminal_kvps):
        """Sets the terminal_kvps of this Terminals.


        :param terminal_kvps: The terminal_kvps of this Terminals.  # noqa: E501
        :type: list[TerminalKvps]
        """

        self._terminal_kvps = terminal_kvps

    @property
    def continue_existing_plan_with_original_gateway(self):
        """Gets the continue_existing_plan_with_original_gateway of this Terminals.  # noqa: E501


        :return: The continue_existing_plan_with_original_gateway of this Terminals.  # noqa: E501
        :rtype: bool
        """
        return self._continue_existing_plan_with_original_gateway

    @continue_existing_plan_with_original_gateway.setter
    def continue_existing_plan_with_original_gateway(self, continue_existing_plan_with_original_gateway):
        """Sets the continue_existing_plan_with_original_gateway of this Terminals.


        :param continue_existing_plan_with_original_gateway: The continue_existing_plan_with_original_gateway of this Terminals.  # noqa: E501
        :type: bool
        """
        continue_existing_plan_with_original_gateway = bool(continue_existing_plan_with_original_gateway)
        if continue_existing_plan_with_original_gateway is None:
            raise ValueError("Invalid value for `continue_existing_plan_with_original_gateway`, must not be `None`")  # noqa: E501

        self._continue_existing_plan_with_original_gateway = continue_existing_plan_with_original_gateway

    @property
    def active_terminal_data(self):
        """Gets the active_terminal_data of this Terminals.  # noqa: E501


        :return: The active_terminal_data of this Terminals.  # noqa: E501
        :rtype: TerminalGatewayDatas
        """
        return self._active_terminal_data

    @active_terminal_data.setter
    def active_terminal_data(self, active_terminal_data):
        """Sets the active_terminal_data of this Terminals.


        :param active_terminal_data: The active_terminal_data of this Terminals.  # noqa: E501
        :type: TerminalGatewayDatas
        """

        self._active_terminal_data = active_terminal_data

    @property
    def chb_default_action(self):
        """Gets the chb_default_action of this Terminals.  # noqa: E501


        :return: The chb_default_action of this Terminals.  # noqa: E501
        :rtype: ChbDefaultAction
        """
        return self._chb_default_action

    @chb_default_action.setter
    def chb_default_action(self, chb_default_action):
        """Sets the chb_default_action of this Terminals.


        :param chb_default_action: The chb_default_action of this Terminals.  # noqa: E501
        :type: ChbDefaultAction
        """
        
        if chb_default_action is None:
            raise ValueError("Invalid value for `chb_default_action`, must not be `None`")  # noqa: E501

        self._chb_default_action = chb_default_action

    @property
    def failure_under_frozen_installments_plan(self):
        """Gets the failure_under_frozen_installments_plan of this Terminals.  # noqa: E501


        :return: The failure_under_frozen_installments_plan of this Terminals.  # noqa: E501
        :rtype: FailureUnderFrozenInstallmentsPlan
        """
        return self._failure_under_frozen_installments_plan

    @failure_under_frozen_installments_plan.setter
    def failure_under_frozen_installments_plan(self, failure_under_frozen_installments_plan):
        """Sets the failure_under_frozen_installments_plan of this Terminals.


        :param failure_under_frozen_installments_plan: The failure_under_frozen_installments_plan of this Terminals.  # noqa: E501
        :type: FailureUnderFrozenInstallmentsPlan
        """
        
        if failure_under_frozen_installments_plan is None:
            raise ValueError("Invalid value for `failure_under_frozen_installments_plan`, must not be `None`")  # noqa: E501

        self._failure_under_frozen_installments_plan = failure_under_frozen_installments_plan

    @property
    def refund_under_cancelation(self):
        """Gets the refund_under_cancelation of this Terminals.  # noqa: E501


        :return: The refund_under_cancelation of this Terminals.  # noqa: E501
        :rtype: RefundUnderCancelation
        """
        return self._refund_under_cancelation

    @refund_under_cancelation.setter
    def refund_under_cancelation(self, refund_under_cancelation):
        """Sets the refund_under_cancelation of this Terminals.


        :param refund_under_cancelation: The refund_under_cancelation of this Terminals.  # noqa: E501
        :type: RefundUnderCancelation
        """
        
        if refund_under_cancelation is None:
            raise ValueError("Invalid value for `refund_under_cancelation`, must not be `None`")  # noqa: E501

        self._refund_under_cancelation = refund_under_cancelation

    @property
    def integration_type(self):
        """Gets the integration_type of this Terminals.  # noqa: E501


        :return: The integration_type of this Terminals.  # noqa: E501
        :rtype: IntegrationType
        """
        return self._integration_type

    @integration_type.setter
    def integration_type(self, integration_type):
        """Sets the integration_type of this Terminals.


        :param integration_type: The integration_type of this Terminals.  # noqa: E501
        :type: IntegrationType
        """
        
        if integration_type is None:
            raise ValueError("Invalid value for `integration_type`, must not be `None`")  # noqa: E501

        self._integration_type = integration_type

    @property
    def test_mode(self):
        """Gets the test_mode of this Terminals.  # noqa: E501


        :return: The test_mode of this Terminals.  # noqa: E501
        :rtype: TestModes
        """
        return self._test_mode

    @test_mode.setter
    def test_mode(self, test_mode):
        """Sets the test_mode of this Terminals.


        :param test_mode: The test_mode of this Terminals.  # noqa: E501
        :type: TestModes
        """
        
        if test_mode is None:
            raise ValueError("Invalid value for `test_mode`, must not be `None`")  # noqa: E501

        self._test_mode = test_mode

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Terminals, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Terminals):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
