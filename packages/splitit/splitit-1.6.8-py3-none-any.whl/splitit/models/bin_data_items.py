# coding: utf-8

"""
    splitit-web-api-public-sdk

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class BinDataItems(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'low_bin': 'str',
        'high_bin': 'str',
        'bin_length': 'int',
        'bin_detail_pan': 'int',
        'issuer_bank_name': 'str',
        'issue_country_id': 'int',
        'detail_card_indicator': 'str',
        'issuer_update_date': 'datetime',
        'ebt_state': 'str',
        'is_debit_signature_network_participant': 'bool',
        'is_fsa': 'bool',
        'is_prepaid': 'bool',
        'product_id': 'str',
        'regulator_indicator': 'str',
        'visa_product_sub_type': 'str',
        'visa_large_ticket_indicator': 'str',
        'account_level_processing_indicator': 'str',
        'card_class': 'str',
        'pan_length_min': 'int',
        'pan_length_max': 'int',
        'token_indicator': 'str',
        'issuing_network': 'str',
        'card_holder_billing_currency': 'str',
        'money_send_indicator': 'str',
        'original_credit_money_transfer_indicator': 'str',
        'original_credit_online_gambling_indicator': 'str',
        'original_credit_transaction_indicator': 'str',
        'fast_funds': 'str',
        'reserved_field': 'str',
        'issue_country': 'Countries',
        'card_brand': 'CardBrand',
        'card_type': 'CardType'
    }

    attribute_map = {
        'id': 'Id',
        'low_bin': 'LowBin',
        'high_bin': 'HighBin',
        'bin_length': 'BinLength',
        'bin_detail_pan': 'BinDetailPan',
        'issuer_bank_name': 'IssuerBankName',
        'issue_country_id': 'IssueCountryId',
        'detail_card_indicator': 'DetailCardIndicator',
        'issuer_update_date': 'IssuerUpdateDate',
        'ebt_state': 'EbtState',
        'is_debit_signature_network_participant': 'IsDebitSignatureNetworkParticipant',
        'is_fsa': 'IsFsa',
        'is_prepaid': 'IsPrepaid',
        'product_id': 'ProductId',
        'regulator_indicator': 'RegulatorIndicator',
        'visa_product_sub_type': 'VisaProductSubType',
        'visa_large_ticket_indicator': 'VisaLargeTicketIndicator',
        'account_level_processing_indicator': 'AccountLevelProcessingIndicator',
        'card_class': 'CardClass',
        'pan_length_min': 'PanLengthMin',
        'pan_length_max': 'PanLengthMax',
        'token_indicator': 'TokenIndicator',
        'issuing_network': 'IssuingNetwork',
        'card_holder_billing_currency': 'CardHolderBillingCurrency',
        'money_send_indicator': 'MoneySendIndicator',
        'original_credit_money_transfer_indicator': 'OriginalCreditMoneyTransferIndicator',
        'original_credit_online_gambling_indicator': 'OriginalCreditOnlineGamblingIndicator',
        'original_credit_transaction_indicator': 'OriginalCreditTransactionIndicator',
        'fast_funds': 'FastFunds',
        'reserved_field': 'ReservedField',
        'issue_country': 'IssueCountry',
        'card_brand': 'CardBrand',
        'card_type': 'CardType'
    }

    def __init__(self, id=None, low_bin=None, high_bin=None, bin_length=None, bin_detail_pan=None, issuer_bank_name=None, issue_country_id=None, detail_card_indicator=None, issuer_update_date=None, ebt_state=None, is_debit_signature_network_participant=None, is_fsa=None, is_prepaid=None, product_id=None, regulator_indicator=None, visa_product_sub_type=None, visa_large_ticket_indicator=None, account_level_processing_indicator=None, card_class=None, pan_length_min=None, pan_length_max=None, token_indicator=None, issuing_network=None, card_holder_billing_currency=None, money_send_indicator=None, original_credit_money_transfer_indicator=None, original_credit_online_gambling_indicator=None, original_credit_transaction_indicator=None, fast_funds=None, reserved_field=None, issue_country=None, card_brand=None, card_type=None):  # noqa: E501
        """BinDataItems - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._low_bin = None
        self._high_bin = None
        self._bin_length = None
        self._bin_detail_pan = None
        self._issuer_bank_name = None
        self._issue_country_id = None
        self._detail_card_indicator = None
        self._issuer_update_date = None
        self._ebt_state = None
        self._is_debit_signature_network_participant = None
        self._is_fsa = None
        self._is_prepaid = None
        self._product_id = None
        self._regulator_indicator = None
        self._visa_product_sub_type = None
        self._visa_large_ticket_indicator = None
        self._account_level_processing_indicator = None
        self._card_class = None
        self._pan_length_min = None
        self._pan_length_max = None
        self._token_indicator = None
        self._issuing_network = None
        self._card_holder_billing_currency = None
        self._money_send_indicator = None
        self._original_credit_money_transfer_indicator = None
        self._original_credit_online_gambling_indicator = None
        self._original_credit_transaction_indicator = None
        self._fast_funds = None
        self._reserved_field = None
        self._issue_country = None
        self._card_brand = None
        self._card_type = None
        self.discriminator = None

        self._id = id
        if low_bin is not None:
            self._low_bin = low_bin
        if high_bin is not None:
            self._high_bin = high_bin
        self._bin_length = bin_length
        self._bin_detail_pan = bin_detail_pan
        if issuer_bank_name is not None:
            self._issuer_bank_name = issuer_bank_name
        if issue_country_id is not None:
            self._issue_country_id = issue_country_id
        if detail_card_indicator is not None:
            self._detail_card_indicator = detail_card_indicator
        self._issuer_update_date = issuer_update_date
        if ebt_state is not None:
            self._ebt_state = ebt_state
        self._is_debit_signature_network_participant = is_debit_signature_network_participant
        self._is_fsa = is_fsa
        self._is_prepaid = is_prepaid
        if product_id is not None:
            self._product_id = product_id
        if regulator_indicator is not None:
            self._regulator_indicator = regulator_indicator
        if visa_product_sub_type is not None:
            self._visa_product_sub_type = visa_product_sub_type
        if visa_large_ticket_indicator is not None:
            self._visa_large_ticket_indicator = visa_large_ticket_indicator
        if account_level_processing_indicator is not None:
            self._account_level_processing_indicator = account_level_processing_indicator
        if card_class is not None:
            self._card_class = card_class
        self._pan_length_min = pan_length_min
        self._pan_length_max = pan_length_max
        if token_indicator is not None:
            self._token_indicator = token_indicator
        if issuing_network is not None:
            self._issuing_network = issuing_network
        if card_holder_billing_currency is not None:
            self._card_holder_billing_currency = card_holder_billing_currency
        if money_send_indicator is not None:
            self._money_send_indicator = money_send_indicator
        if original_credit_money_transfer_indicator is not None:
            self._original_credit_money_transfer_indicator = original_credit_money_transfer_indicator
        if original_credit_online_gambling_indicator is not None:
            self._original_credit_online_gambling_indicator = original_credit_online_gambling_indicator
        if original_credit_transaction_indicator is not None:
            self._original_credit_transaction_indicator = original_credit_transaction_indicator
        if fast_funds is not None:
            self._fast_funds = fast_funds
        if reserved_field is not None:
            self._reserved_field = reserved_field
        if issue_country is not None:
            self._issue_country = issue_country
        self._card_brand = card_brand
        self._card_type = card_type

    @property
    def id(self):
        """Gets the id of this BinDataItems.  # noqa: E501


        :return: The id of this BinDataItems.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BinDataItems.


        :param id: The id of this BinDataItems.  # noqa: E501
        :type: int
        """
        
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def low_bin(self):
        """Gets the low_bin of this BinDataItems.  # noqa: E501


        :return: The low_bin of this BinDataItems.  # noqa: E501
        :rtype: str
        """
        return self._low_bin

    @low_bin.setter
    def low_bin(self, low_bin):
        """Sets the low_bin of this BinDataItems.


        :param low_bin: The low_bin of this BinDataItems.  # noqa: E501
        :type: str
        """

        self._low_bin = low_bin

    @property
    def high_bin(self):
        """Gets the high_bin of this BinDataItems.  # noqa: E501


        :return: The high_bin of this BinDataItems.  # noqa: E501
        :rtype: str
        """
        return self._high_bin

    @high_bin.setter
    def high_bin(self, high_bin):
        """Sets the high_bin of this BinDataItems.


        :param high_bin: The high_bin of this BinDataItems.  # noqa: E501
        :type: str
        """

        self._high_bin = high_bin

    @property
    def bin_length(self):
        """Gets the bin_length of this BinDataItems.  # noqa: E501


        :return: The bin_length of this BinDataItems.  # noqa: E501
        :rtype: int
        """
        return self._bin_length

    @bin_length.setter
    def bin_length(self, bin_length):
        """Sets the bin_length of this BinDataItems.


        :param bin_length: The bin_length of this BinDataItems.  # noqa: E501
        :type: int
        """
        
        if bin_length is None:
            raise ValueError("Invalid value for `bin_length`, must not be `None`")  # noqa: E501

        self._bin_length = bin_length

    @property
    def bin_detail_pan(self):
        """Gets the bin_detail_pan of this BinDataItems.  # noqa: E501


        :return: The bin_detail_pan of this BinDataItems.  # noqa: E501
        :rtype: int
        """
        return self._bin_detail_pan

    @bin_detail_pan.setter
    def bin_detail_pan(self, bin_detail_pan):
        """Sets the bin_detail_pan of this BinDataItems.


        :param bin_detail_pan: The bin_detail_pan of this BinDataItems.  # noqa: E501
        :type: int
        """
        
        if bin_detail_pan is None:
            raise ValueError("Invalid value for `bin_detail_pan`, must not be `None`")  # noqa: E501

        self._bin_detail_pan = bin_detail_pan

    @property
    def issuer_bank_name(self):
        """Gets the issuer_bank_name of this BinDataItems.  # noqa: E501


        :return: The issuer_bank_name of this BinDataItems.  # noqa: E501
        :rtype: str
        """
        return self._issuer_bank_name

    @issuer_bank_name.setter
    def issuer_bank_name(self, issuer_bank_name):
        """Sets the issuer_bank_name of this BinDataItems.


        :param issuer_bank_name: The issuer_bank_name of this BinDataItems.  # noqa: E501
        :type: str
        """

        self._issuer_bank_name = issuer_bank_name

    @property
    def issue_country_id(self):
        """Gets the issue_country_id of this BinDataItems.  # noqa: E501


        :return: The issue_country_id of this BinDataItems.  # noqa: E501
        :rtype: int
        """
        return self._issue_country_id

    @issue_country_id.setter
    def issue_country_id(self, issue_country_id):
        """Sets the issue_country_id of this BinDataItems.


        :param issue_country_id: The issue_country_id of this BinDataItems.  # noqa: E501
        :type: int
        """

        self._issue_country_id = issue_country_id

    @property
    def detail_card_indicator(self):
        """Gets the detail_card_indicator of this BinDataItems.  # noqa: E501


        :return: The detail_card_indicator of this BinDataItems.  # noqa: E501
        :rtype: str
        """
        return self._detail_card_indicator

    @detail_card_indicator.setter
    def detail_card_indicator(self, detail_card_indicator):
        """Sets the detail_card_indicator of this BinDataItems.


        :param detail_card_indicator: The detail_card_indicator of this BinDataItems.  # noqa: E501
        :type: str
        """

        self._detail_card_indicator = detail_card_indicator

    @property
    def issuer_update_date(self):
        """Gets the issuer_update_date of this BinDataItems.  # noqa: E501


        :return: The issuer_update_date of this BinDataItems.  # noqa: E501
        :rtype: datetime
        """
        return self._issuer_update_date

    @issuer_update_date.setter
    def issuer_update_date(self, issuer_update_date):
        """Sets the issuer_update_date of this BinDataItems.


        :param issuer_update_date: The issuer_update_date of this BinDataItems.  # noqa: E501
        :type: datetime
        """
        
        if issuer_update_date is None:
            raise ValueError("Invalid value for `issuer_update_date`, must not be `None`")  # noqa: E501

        self._issuer_update_date = issuer_update_date

    @property
    def ebt_state(self):
        """Gets the ebt_state of this BinDataItems.  # noqa: E501


        :return: The ebt_state of this BinDataItems.  # noqa: E501
        :rtype: str
        """
        return self._ebt_state

    @ebt_state.setter
    def ebt_state(self, ebt_state):
        """Sets the ebt_state of this BinDataItems.


        :param ebt_state: The ebt_state of this BinDataItems.  # noqa: E501
        :type: str
        """

        self._ebt_state = ebt_state

    @property
    def is_debit_signature_network_participant(self):
        """Gets the is_debit_signature_network_participant of this BinDataItems.  # noqa: E501


        :return: The is_debit_signature_network_participant of this BinDataItems.  # noqa: E501
        :rtype: bool
        """
        return self._is_debit_signature_network_participant

    @is_debit_signature_network_participant.setter
    def is_debit_signature_network_participant(self, is_debit_signature_network_participant):
        """Sets the is_debit_signature_network_participant of this BinDataItems.


        :param is_debit_signature_network_participant: The is_debit_signature_network_participant of this BinDataItems.  # noqa: E501
        :type: bool
        """
        is_debit_signature_network_participant = bool(is_debit_signature_network_participant)
        if is_debit_signature_network_participant is None:
            raise ValueError("Invalid value for `is_debit_signature_network_participant`, must not be `None`")  # noqa: E501

        self._is_debit_signature_network_participant = is_debit_signature_network_participant

    @property
    def is_fsa(self):
        """Gets the is_fsa of this BinDataItems.  # noqa: E501


        :return: The is_fsa of this BinDataItems.  # noqa: E501
        :rtype: bool
        """
        return self._is_fsa

    @is_fsa.setter
    def is_fsa(self, is_fsa):
        """Sets the is_fsa of this BinDataItems.


        :param is_fsa: The is_fsa of this BinDataItems.  # noqa: E501
        :type: bool
        """
        is_fsa = bool(is_fsa)
        if is_fsa is None:
            raise ValueError("Invalid value for `is_fsa`, must not be `None`")  # noqa: E501

        self._is_fsa = is_fsa

    @property
    def is_prepaid(self):
        """Gets the is_prepaid of this BinDataItems.  # noqa: E501


        :return: The is_prepaid of this BinDataItems.  # noqa: E501
        :rtype: bool
        """
        return self._is_prepaid

    @is_prepaid.setter
    def is_prepaid(self, is_prepaid):
        """Sets the is_prepaid of this BinDataItems.


        :param is_prepaid: The is_prepaid of this BinDataItems.  # noqa: E501
        :type: bool
        """
        is_prepaid = bool(is_prepaid)
        if is_prepaid is None:
            raise ValueError("Invalid value for `is_prepaid`, must not be `None`")  # noqa: E501

        self._is_prepaid = is_prepaid

    @property
    def product_id(self):
        """Gets the product_id of this BinDataItems.  # noqa: E501


        :return: The product_id of this BinDataItems.  # noqa: E501
        :rtype: str
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """Sets the product_id of this BinDataItems.


        :param product_id: The product_id of this BinDataItems.  # noqa: E501
        :type: str
        """

        self._product_id = product_id

    @property
    def regulator_indicator(self):
        """Gets the regulator_indicator of this BinDataItems.  # noqa: E501


        :return: The regulator_indicator of this BinDataItems.  # noqa: E501
        :rtype: str
        """
        return self._regulator_indicator

    @regulator_indicator.setter
    def regulator_indicator(self, regulator_indicator):
        """Sets the regulator_indicator of this BinDataItems.


        :param regulator_indicator: The regulator_indicator of this BinDataItems.  # noqa: E501
        :type: str
        """

        self._regulator_indicator = regulator_indicator

    @property
    def visa_product_sub_type(self):
        """Gets the visa_product_sub_type of this BinDataItems.  # noqa: E501


        :return: The visa_product_sub_type of this BinDataItems.  # noqa: E501
        :rtype: str
        """
        return self._visa_product_sub_type

    @visa_product_sub_type.setter
    def visa_product_sub_type(self, visa_product_sub_type):
        """Sets the visa_product_sub_type of this BinDataItems.


        :param visa_product_sub_type: The visa_product_sub_type of this BinDataItems.  # noqa: E501
        :type: str
        """

        self._visa_product_sub_type = visa_product_sub_type

    @property
    def visa_large_ticket_indicator(self):
        """Gets the visa_large_ticket_indicator of this BinDataItems.  # noqa: E501


        :return: The visa_large_ticket_indicator of this BinDataItems.  # noqa: E501
        :rtype: str
        """
        return self._visa_large_ticket_indicator

    @visa_large_ticket_indicator.setter
    def visa_large_ticket_indicator(self, visa_large_ticket_indicator):
        """Sets the visa_large_ticket_indicator of this BinDataItems.


        :param visa_large_ticket_indicator: The visa_large_ticket_indicator of this BinDataItems.  # noqa: E501
        :type: str
        """

        self._visa_large_ticket_indicator = visa_large_ticket_indicator

    @property
    def account_level_processing_indicator(self):
        """Gets the account_level_processing_indicator of this BinDataItems.  # noqa: E501


        :return: The account_level_processing_indicator of this BinDataItems.  # noqa: E501
        :rtype: str
        """
        return self._account_level_processing_indicator

    @account_level_processing_indicator.setter
    def account_level_processing_indicator(self, account_level_processing_indicator):
        """Sets the account_level_processing_indicator of this BinDataItems.


        :param account_level_processing_indicator: The account_level_processing_indicator of this BinDataItems.  # noqa: E501
        :type: str
        """

        self._account_level_processing_indicator = account_level_processing_indicator

    @property
    def card_class(self):
        """Gets the card_class of this BinDataItems.  # noqa: E501


        :return: The card_class of this BinDataItems.  # noqa: E501
        :rtype: str
        """
        return self._card_class

    @card_class.setter
    def card_class(self, card_class):
        """Sets the card_class of this BinDataItems.


        :param card_class: The card_class of this BinDataItems.  # noqa: E501
        :type: str
        """

        self._card_class = card_class

    @property
    def pan_length_min(self):
        """Gets the pan_length_min of this BinDataItems.  # noqa: E501


        :return: The pan_length_min of this BinDataItems.  # noqa: E501
        :rtype: int
        """
        return self._pan_length_min

    @pan_length_min.setter
    def pan_length_min(self, pan_length_min):
        """Sets the pan_length_min of this BinDataItems.


        :param pan_length_min: The pan_length_min of this BinDataItems.  # noqa: E501
        :type: int
        """
        
        if pan_length_min is None:
            raise ValueError("Invalid value for `pan_length_min`, must not be `None`")  # noqa: E501

        self._pan_length_min = pan_length_min

    @property
    def pan_length_max(self):
        """Gets the pan_length_max of this BinDataItems.  # noqa: E501


        :return: The pan_length_max of this BinDataItems.  # noqa: E501
        :rtype: int
        """
        return self._pan_length_max

    @pan_length_max.setter
    def pan_length_max(self, pan_length_max):
        """Sets the pan_length_max of this BinDataItems.


        :param pan_length_max: The pan_length_max of this BinDataItems.  # noqa: E501
        :type: int
        """
        
        if pan_length_max is None:
            raise ValueError("Invalid value for `pan_length_max`, must not be `None`")  # noqa: E501

        self._pan_length_max = pan_length_max

    @property
    def token_indicator(self):
        """Gets the token_indicator of this BinDataItems.  # noqa: E501


        :return: The token_indicator of this BinDataItems.  # noqa: E501
        :rtype: str
        """
        return self._token_indicator

    @token_indicator.setter
    def token_indicator(self, token_indicator):
        """Sets the token_indicator of this BinDataItems.


        :param token_indicator: The token_indicator of this BinDataItems.  # noqa: E501
        :type: str
        """

        self._token_indicator = token_indicator

    @property
    def issuing_network(self):
        """Gets the issuing_network of this BinDataItems.  # noqa: E501


        :return: The issuing_network of this BinDataItems.  # noqa: E501
        :rtype: str
        """
        return self._issuing_network

    @issuing_network.setter
    def issuing_network(self, issuing_network):
        """Sets the issuing_network of this BinDataItems.


        :param issuing_network: The issuing_network of this BinDataItems.  # noqa: E501
        :type: str
        """

        self._issuing_network = issuing_network

    @property
    def card_holder_billing_currency(self):
        """Gets the card_holder_billing_currency of this BinDataItems.  # noqa: E501


        :return: The card_holder_billing_currency of this BinDataItems.  # noqa: E501
        :rtype: str
        """
        return self._card_holder_billing_currency

    @card_holder_billing_currency.setter
    def card_holder_billing_currency(self, card_holder_billing_currency):
        """Sets the card_holder_billing_currency of this BinDataItems.


        :param card_holder_billing_currency: The card_holder_billing_currency of this BinDataItems.  # noqa: E501
        :type: str
        """

        self._card_holder_billing_currency = card_holder_billing_currency

    @property
    def money_send_indicator(self):
        """Gets the money_send_indicator of this BinDataItems.  # noqa: E501


        :return: The money_send_indicator of this BinDataItems.  # noqa: E501
        :rtype: str
        """
        return self._money_send_indicator

    @money_send_indicator.setter
    def money_send_indicator(self, money_send_indicator):
        """Sets the money_send_indicator of this BinDataItems.


        :param money_send_indicator: The money_send_indicator of this BinDataItems.  # noqa: E501
        :type: str
        """

        self._money_send_indicator = money_send_indicator

    @property
    def original_credit_money_transfer_indicator(self):
        """Gets the original_credit_money_transfer_indicator of this BinDataItems.  # noqa: E501


        :return: The original_credit_money_transfer_indicator of this BinDataItems.  # noqa: E501
        :rtype: str
        """
        return self._original_credit_money_transfer_indicator

    @original_credit_money_transfer_indicator.setter
    def original_credit_money_transfer_indicator(self, original_credit_money_transfer_indicator):
        """Sets the original_credit_money_transfer_indicator of this BinDataItems.


        :param original_credit_money_transfer_indicator: The original_credit_money_transfer_indicator of this BinDataItems.  # noqa: E501
        :type: str
        """

        self._original_credit_money_transfer_indicator = original_credit_money_transfer_indicator

    @property
    def original_credit_online_gambling_indicator(self):
        """Gets the original_credit_online_gambling_indicator of this BinDataItems.  # noqa: E501


        :return: The original_credit_online_gambling_indicator of this BinDataItems.  # noqa: E501
        :rtype: str
        """
        return self._original_credit_online_gambling_indicator

    @original_credit_online_gambling_indicator.setter
    def original_credit_online_gambling_indicator(self, original_credit_online_gambling_indicator):
        """Sets the original_credit_online_gambling_indicator of this BinDataItems.


        :param original_credit_online_gambling_indicator: The original_credit_online_gambling_indicator of this BinDataItems.  # noqa: E501
        :type: str
        """

        self._original_credit_online_gambling_indicator = original_credit_online_gambling_indicator

    @property
    def original_credit_transaction_indicator(self):
        """Gets the original_credit_transaction_indicator of this BinDataItems.  # noqa: E501


        :return: The original_credit_transaction_indicator of this BinDataItems.  # noqa: E501
        :rtype: str
        """
        return self._original_credit_transaction_indicator

    @original_credit_transaction_indicator.setter
    def original_credit_transaction_indicator(self, original_credit_transaction_indicator):
        """Sets the original_credit_transaction_indicator of this BinDataItems.


        :param original_credit_transaction_indicator: The original_credit_transaction_indicator of this BinDataItems.  # noqa: E501
        :type: str
        """

        self._original_credit_transaction_indicator = original_credit_transaction_indicator

    @property
    def fast_funds(self):
        """Gets the fast_funds of this BinDataItems.  # noqa: E501


        :return: The fast_funds of this BinDataItems.  # noqa: E501
        :rtype: str
        """
        return self._fast_funds

    @fast_funds.setter
    def fast_funds(self, fast_funds):
        """Sets the fast_funds of this BinDataItems.


        :param fast_funds: The fast_funds of this BinDataItems.  # noqa: E501
        :type: str
        """

        self._fast_funds = fast_funds

    @property
    def reserved_field(self):
        """Gets the reserved_field of this BinDataItems.  # noqa: E501


        :return: The reserved_field of this BinDataItems.  # noqa: E501
        :rtype: str
        """
        return self._reserved_field

    @reserved_field.setter
    def reserved_field(self, reserved_field):
        """Sets the reserved_field of this BinDataItems.


        :param reserved_field: The reserved_field of this BinDataItems.  # noqa: E501
        :type: str
        """

        self._reserved_field = reserved_field

    @property
    def issue_country(self):
        """Gets the issue_country of this BinDataItems.  # noqa: E501


        :return: The issue_country of this BinDataItems.  # noqa: E501
        :rtype: Countries
        """
        return self._issue_country

    @issue_country.setter
    def issue_country(self, issue_country):
        """Sets the issue_country of this BinDataItems.


        :param issue_country: The issue_country of this BinDataItems.  # noqa: E501
        :type: Countries
        """

        self._issue_country = issue_country

    @property
    def card_brand(self):
        """Gets the card_brand of this BinDataItems.  # noqa: E501


        :return: The card_brand of this BinDataItems.  # noqa: E501
        :rtype: CardBrand
        """
        return self._card_brand

    @card_brand.setter
    def card_brand(self, card_brand):
        """Sets the card_brand of this BinDataItems.


        :param card_brand: The card_brand of this BinDataItems.  # noqa: E501
        :type: CardBrand
        """
        
        if card_brand is None:
            raise ValueError("Invalid value for `card_brand`, must not be `None`")  # noqa: E501

        self._card_brand = card_brand

    @property
    def card_type(self):
        """Gets the card_type of this BinDataItems.  # noqa: E501


        :return: The card_type of this BinDataItems.  # noqa: E501
        :rtype: CardType
        """
        return self._card_type

    @card_type.setter
    def card_type(self, card_type):
        """Sets the card_type of this BinDataItems.


        :param card_type: The card_type of this BinDataItems.  # noqa: E501
        :type: CardType
        """
        
        if card_type is None:
            raise ValueError("Invalid value for `card_type`, must not be `None`")  # noqa: E501

        self._card_type = card_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BinDataItems, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BinDataItems):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
