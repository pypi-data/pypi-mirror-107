# coding: utf-8

"""
    splitit-web-api-public-sdk

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ZipAddressDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'country_subdivision_id': 'int',
        'zip': 'str',
        'country_subdivision': 'CountrySubdivisions'
    }

    attribute_map = {
        'id': 'Id',
        'country_subdivision_id': 'CountrySubdivisionId',
        'zip': 'Zip',
        'country_subdivision': 'CountrySubdivision'
    }

    def __init__(self, id=None, country_subdivision_id=None, zip=None, country_subdivision=None):  # noqa: E501
        """ZipAddressDetails - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._country_subdivision_id = None
        self._zip = None
        self._country_subdivision = None
        self.discriminator = None

        self._id = id
        self._country_subdivision_id = country_subdivision_id
        if zip is not None:
            self._zip = zip
        if country_subdivision is not None:
            self._country_subdivision = country_subdivision

    @property
    def id(self):
        """Gets the id of this ZipAddressDetails.  # noqa: E501


        :return: The id of this ZipAddressDetails.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ZipAddressDetails.


        :param id: The id of this ZipAddressDetails.  # noqa: E501
        :type: int
        """
        
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def country_subdivision_id(self):
        """Gets the country_subdivision_id of this ZipAddressDetails.  # noqa: E501


        :return: The country_subdivision_id of this ZipAddressDetails.  # noqa: E501
        :rtype: int
        """
        return self._country_subdivision_id

    @country_subdivision_id.setter
    def country_subdivision_id(self, country_subdivision_id):
        """Sets the country_subdivision_id of this ZipAddressDetails.


        :param country_subdivision_id: The country_subdivision_id of this ZipAddressDetails.  # noqa: E501
        :type: int
        """
        
        if country_subdivision_id is None:
            raise ValueError("Invalid value for `country_subdivision_id`, must not be `None`")  # noqa: E501

        self._country_subdivision_id = country_subdivision_id

    @property
    def zip(self):
        """Gets the zip of this ZipAddressDetails.  # noqa: E501


        :return: The zip of this ZipAddressDetails.  # noqa: E501
        :rtype: str
        """
        return self._zip

    @zip.setter
    def zip(self, zip):
        """Sets the zip of this ZipAddressDetails.


        :param zip: The zip of this ZipAddressDetails.  # noqa: E501
        :type: str
        """

        self._zip = zip

    @property
    def country_subdivision(self):
        """Gets the country_subdivision of this ZipAddressDetails.  # noqa: E501


        :return: The country_subdivision of this ZipAddressDetails.  # noqa: E501
        :rtype: CountrySubdivisions
        """
        return self._country_subdivision

    @country_subdivision.setter
    def country_subdivision(self, country_subdivision):
        """Sets the country_subdivision of this ZipAddressDetails.


        :param country_subdivision: The country_subdivision of this ZipAddressDetails.  # noqa: E501
        :type: CountrySubdivisions
        """

        self._country_subdivision = country_subdivision

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ZipAddressDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ZipAddressDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
