# coding: utf-8

"""
    splitit-web-api-public-sdk

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class PaymentFormTPABTestingDefinition(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'is_active': 'bool',
        'ab_test_name': 'str',
        'pf_version_a_id': 'int',
        'pf_version_b_id': 'int',
        'ab_test_description': 'str',
        'pf_version_a_percentage': 'int',
        'pf_version_b_percentage': 'int',
        'pf_version_a': 'VersionedTouchPoints',
        'pf_version_b': 'VersionedTouchPoints'
    }

    attribute_map = {
        'id': 'Id',
        'is_active': 'IsActive',
        'ab_test_name': 'AbTestName',
        'pf_version_a_id': 'PFVersionAId',
        'pf_version_b_id': 'PFVersionBId',
        'ab_test_description': 'AbTestDescription',
        'pf_version_a_percentage': 'PFVersionAPercentage',
        'pf_version_b_percentage': 'PFVersionBPercentage',
        'pf_version_a': 'PFVersionA',
        'pf_version_b': 'PFVersionB'
    }

    def __init__(self, id=None, is_active=None, ab_test_name=None, pf_version_a_id=None, pf_version_b_id=None, ab_test_description=None, pf_version_a_percentage=None, pf_version_b_percentage=None, pf_version_a=None, pf_version_b=None):  # noqa: E501
        """PaymentFormTPABTestingDefinition - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._is_active = None
        self._ab_test_name = None
        self._pf_version_a_id = None
        self._pf_version_b_id = None
        self._ab_test_description = None
        self._pf_version_a_percentage = None
        self._pf_version_b_percentage = None
        self._pf_version_a = None
        self._pf_version_b = None
        self.discriminator = None

        self._id = id
        self._is_active = is_active
        if ab_test_name is not None:
            self._ab_test_name = ab_test_name
        if pf_version_a_id is not None:
            self._pf_version_a_id = pf_version_a_id
        if pf_version_b_id is not None:
            self._pf_version_b_id = pf_version_b_id
        if ab_test_description is not None:
            self._ab_test_description = ab_test_description
        self._pf_version_a_percentage = pf_version_a_percentage
        self._pf_version_b_percentage = pf_version_b_percentage
        if pf_version_a is not None:
            self._pf_version_a = pf_version_a
        if pf_version_b is not None:
            self._pf_version_b = pf_version_b

    @property
    def id(self):
        """Gets the id of this PaymentFormTPABTestingDefinition.  # noqa: E501


        :return: The id of this PaymentFormTPABTestingDefinition.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PaymentFormTPABTestingDefinition.


        :param id: The id of this PaymentFormTPABTestingDefinition.  # noqa: E501
        :type: int
        """
        
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def is_active(self):
        """Gets the is_active of this PaymentFormTPABTestingDefinition.  # noqa: E501


        :return: The is_active of this PaymentFormTPABTestingDefinition.  # noqa: E501
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this PaymentFormTPABTestingDefinition.


        :param is_active: The is_active of this PaymentFormTPABTestingDefinition.  # noqa: E501
        :type: bool
        """
        is_active = bool(is_active)
        if is_active is None:
            raise ValueError("Invalid value for `is_active`, must not be `None`")  # noqa: E501

        self._is_active = is_active

    @property
    def ab_test_name(self):
        """Gets the ab_test_name of this PaymentFormTPABTestingDefinition.  # noqa: E501


        :return: The ab_test_name of this PaymentFormTPABTestingDefinition.  # noqa: E501
        :rtype: str
        """
        return self._ab_test_name

    @ab_test_name.setter
    def ab_test_name(self, ab_test_name):
        """Sets the ab_test_name of this PaymentFormTPABTestingDefinition.


        :param ab_test_name: The ab_test_name of this PaymentFormTPABTestingDefinition.  # noqa: E501
        :type: str
        """

        self._ab_test_name = ab_test_name

    @property
    def pf_version_a_id(self):
        """Gets the pf_version_a_id of this PaymentFormTPABTestingDefinition.  # noqa: E501


        :return: The pf_version_a_id of this PaymentFormTPABTestingDefinition.  # noqa: E501
        :rtype: int
        """
        return self._pf_version_a_id

    @pf_version_a_id.setter
    def pf_version_a_id(self, pf_version_a_id):
        """Sets the pf_version_a_id of this PaymentFormTPABTestingDefinition.


        :param pf_version_a_id: The pf_version_a_id of this PaymentFormTPABTestingDefinition.  # noqa: E501
        :type: int
        """

        self._pf_version_a_id = pf_version_a_id

    @property
    def pf_version_b_id(self):
        """Gets the pf_version_b_id of this PaymentFormTPABTestingDefinition.  # noqa: E501


        :return: The pf_version_b_id of this PaymentFormTPABTestingDefinition.  # noqa: E501
        :rtype: int
        """
        return self._pf_version_b_id

    @pf_version_b_id.setter
    def pf_version_b_id(self, pf_version_b_id):
        """Sets the pf_version_b_id of this PaymentFormTPABTestingDefinition.


        :param pf_version_b_id: The pf_version_b_id of this PaymentFormTPABTestingDefinition.  # noqa: E501
        :type: int
        """

        self._pf_version_b_id = pf_version_b_id

    @property
    def ab_test_description(self):
        """Gets the ab_test_description of this PaymentFormTPABTestingDefinition.  # noqa: E501


        :return: The ab_test_description of this PaymentFormTPABTestingDefinition.  # noqa: E501
        :rtype: str
        """
        return self._ab_test_description

    @ab_test_description.setter
    def ab_test_description(self, ab_test_description):
        """Sets the ab_test_description of this PaymentFormTPABTestingDefinition.


        :param ab_test_description: The ab_test_description of this PaymentFormTPABTestingDefinition.  # noqa: E501
        :type: str
        """

        self._ab_test_description = ab_test_description

    @property
    def pf_version_a_percentage(self):
        """Gets the pf_version_a_percentage of this PaymentFormTPABTestingDefinition.  # noqa: E501


        :return: The pf_version_a_percentage of this PaymentFormTPABTestingDefinition.  # noqa: E501
        :rtype: int
        """
        return self._pf_version_a_percentage

    @pf_version_a_percentage.setter
    def pf_version_a_percentage(self, pf_version_a_percentage):
        """Sets the pf_version_a_percentage of this PaymentFormTPABTestingDefinition.


        :param pf_version_a_percentage: The pf_version_a_percentage of this PaymentFormTPABTestingDefinition.  # noqa: E501
        :type: int
        """
        
        if pf_version_a_percentage is None:
            raise ValueError("Invalid value for `pf_version_a_percentage`, must not be `None`")  # noqa: E501

        self._pf_version_a_percentage = pf_version_a_percentage

    @property
    def pf_version_b_percentage(self):
        """Gets the pf_version_b_percentage of this PaymentFormTPABTestingDefinition.  # noqa: E501


        :return: The pf_version_b_percentage of this PaymentFormTPABTestingDefinition.  # noqa: E501
        :rtype: int
        """
        return self._pf_version_b_percentage

    @pf_version_b_percentage.setter
    def pf_version_b_percentage(self, pf_version_b_percentage):
        """Sets the pf_version_b_percentage of this PaymentFormTPABTestingDefinition.


        :param pf_version_b_percentage: The pf_version_b_percentage of this PaymentFormTPABTestingDefinition.  # noqa: E501
        :type: int
        """
        
        if pf_version_b_percentage is None:
            raise ValueError("Invalid value for `pf_version_b_percentage`, must not be `None`")  # noqa: E501

        self._pf_version_b_percentage = pf_version_b_percentage

    @property
    def pf_version_a(self):
        """Gets the pf_version_a of this PaymentFormTPABTestingDefinition.  # noqa: E501


        :return: The pf_version_a of this PaymentFormTPABTestingDefinition.  # noqa: E501
        :rtype: VersionedTouchPoints
        """
        return self._pf_version_a

    @pf_version_a.setter
    def pf_version_a(self, pf_version_a):
        """Sets the pf_version_a of this PaymentFormTPABTestingDefinition.


        :param pf_version_a: The pf_version_a of this PaymentFormTPABTestingDefinition.  # noqa: E501
        :type: VersionedTouchPoints
        """

        self._pf_version_a = pf_version_a

    @property
    def pf_version_b(self):
        """Gets the pf_version_b of this PaymentFormTPABTestingDefinition.  # noqa: E501


        :return: The pf_version_b of this PaymentFormTPABTestingDefinition.  # noqa: E501
        :rtype: VersionedTouchPoints
        """
        return self._pf_version_b

    @pf_version_b.setter
    def pf_version_b(self, pf_version_b):
        """Sets the pf_version_b of this PaymentFormTPABTestingDefinition.


        :param pf_version_b: The pf_version_b of this PaymentFormTPABTestingDefinition.  # noqa: E501
        :type: VersionedTouchPoints
        """

        self._pf_version_b = pf_version_b

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PaymentFormTPABTestingDefinition, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PaymentFormTPABTestingDefinition):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
