# coding: utf-8

"""
    splitit-web-api-public-sdk

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ApiUsers(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'culture': 'str',
        'user_full_name': 'str',
        'phone_number': 'str',
        'role': 'Roles',
        'user_name': 'str',
        'unique_id': 'str',
        'login_attempt': 'int',
        'max_invalid_login_attempts': 'int',
        'status': 'UserStatus',
        'is_locked': 'bool',
        'email': 'str',
        'culture_name': 'str',
        'role_id': 'int',
        'login_user_name': 'str',
        'crm_id': 'str',
        'merchant': 'Merchants',
        'api_user_password_histories': 'list[ApiUserPasswordHistories]',
        'merchant_id': 'int',
        'merchant_name': 'str',
        'password': 'IUserPasswordHistory'
    }

    attribute_map = {
        'id': 'Id',
        'culture': 'Culture',
        'user_full_name': 'UserFullName',
        'phone_number': 'PhoneNumber',
        'role': 'Role',
        'user_name': 'UserName',
        'unique_id': 'UniqueId',
        'login_attempt': 'LoginAttempt',
        'max_invalid_login_attempts': 'MaxInvalidLoginAttempts',
        'status': 'Status',
        'is_locked': 'IsLocked',
        'email': 'Email',
        'culture_name': 'CultureName',
        'role_id': 'RoleId',
        'login_user_name': 'LoginUserName',
        'crm_id': 'CrmId',
        'merchant': 'Merchant',
        'api_user_password_histories': 'ApiUserPasswordHistories',
        'merchant_id': 'MerchantId',
        'merchant_name': 'MerchantName',
        'password': 'Password'
    }

    def __init__(self, id=None, culture=None, user_full_name=None, phone_number=None, role=None, user_name=None, unique_id=None, login_attempt=None, max_invalid_login_attempts=None, status=None, is_locked=None, email=None, culture_name=None, role_id=None, login_user_name=None, crm_id=None, merchant=None, api_user_password_histories=None, merchant_id=None, merchant_name=None, password=None):  # noqa: E501
        """ApiUsers - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._culture = None
        self._user_full_name = None
        self._phone_number = None
        self._role = None
        self._user_name = None
        self._unique_id = None
        self._login_attempt = None
        self._max_invalid_login_attempts = None
        self._status = None
        self._is_locked = None
        self._email = None
        self._culture_name = None
        self._role_id = None
        self._login_user_name = None
        self._crm_id = None
        self._merchant = None
        self._api_user_password_histories = None
        self._merchant_id = None
        self._merchant_name = None
        self._password = None
        self.discriminator = None

        self._id = id
        if culture is not None:
            self._culture = culture
        if user_full_name is not None:
            self._user_full_name = user_full_name
        if phone_number is not None:
            self._phone_number = phone_number
        if role is not None:
            self._role = role
        if user_name is not None:
            self._user_name = user_name
        if unique_id is not None:
            self._unique_id = unique_id
        self._login_attempt = login_attempt
        self._max_invalid_login_attempts = max_invalid_login_attempts
        self._status = status
        self._is_locked = is_locked
        if email is not None:
            self._email = email
        if culture_name is not None:
            self._culture_name = culture_name
        self._role_id = role_id
        if login_user_name is not None:
            self._login_user_name = login_user_name
        if crm_id is not None:
            self._crm_id = crm_id
        if merchant is not None:
            self._merchant = merchant
        if api_user_password_histories is not None:
            self._api_user_password_histories = api_user_password_histories
        self._merchant_id = merchant_id
        if merchant_name is not None:
            self._merchant_name = merchant_name
        if password is not None:
            self._password = password

    @property
    def id(self):
        """Gets the id of this ApiUsers.  # noqa: E501


        :return: The id of this ApiUsers.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ApiUsers.


        :param id: The id of this ApiUsers.  # noqa: E501
        :type: int
        """
        
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def culture(self):
        """Gets the culture of this ApiUsers.  # noqa: E501


        :return: The culture of this ApiUsers.  # noqa: E501
        :rtype: str
        """
        return self._culture

    @culture.setter
    def culture(self, culture):
        """Sets the culture of this ApiUsers.


        :param culture: The culture of this ApiUsers.  # noqa: E501
        :type: str
        """

        self._culture = culture

    @property
    def user_full_name(self):
        """Gets the user_full_name of this ApiUsers.  # noqa: E501


        :return: The user_full_name of this ApiUsers.  # noqa: E501
        :rtype: str
        """
        return self._user_full_name

    @user_full_name.setter
    def user_full_name(self, user_full_name):
        """Sets the user_full_name of this ApiUsers.


        :param user_full_name: The user_full_name of this ApiUsers.  # noqa: E501
        :type: str
        """

        self._user_full_name = user_full_name

    @property
    def phone_number(self):
        """Gets the phone_number of this ApiUsers.  # noqa: E501


        :return: The phone_number of this ApiUsers.  # noqa: E501
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this ApiUsers.


        :param phone_number: The phone_number of this ApiUsers.  # noqa: E501
        :type: str
        """
        if phone_number is not None and len(phone_number) > 150:
            raise ValueError("Invalid value for `phone_number`, length must be less than or equal to `150`")  # noqa: E501
        if phone_number is not None and len(phone_number) < 0:
            raise ValueError("Invalid value for `phone_number`, length must be greater than or equal to `0`")  # noqa: E501

        self._phone_number = phone_number

    @property
    def role(self):
        """Gets the role of this ApiUsers.  # noqa: E501


        :return: The role of this ApiUsers.  # noqa: E501
        :rtype: Roles
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this ApiUsers.


        :param role: The role of this ApiUsers.  # noqa: E501
        :type: Roles
        """

        self._role = role

    @property
    def user_name(self):
        """Gets the user_name of this ApiUsers.  # noqa: E501


        :return: The user_name of this ApiUsers.  # noqa: E501
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this ApiUsers.


        :param user_name: The user_name of this ApiUsers.  # noqa: E501
        :type: str
        """
        if user_name is not None and len(user_name) > 150:
            raise ValueError("Invalid value for `user_name`, length must be less than or equal to `150`")  # noqa: E501
        if user_name is not None and len(user_name) < 0:
            raise ValueError("Invalid value for `user_name`, length must be greater than or equal to `0`")  # noqa: E501

        self._user_name = user_name

    @property
    def unique_id(self):
        """Gets the unique_id of this ApiUsers.  # noqa: E501


        :return: The unique_id of this ApiUsers.  # noqa: E501
        :rtype: str
        """
        return self._unique_id

    @unique_id.setter
    def unique_id(self, unique_id):
        """Sets the unique_id of this ApiUsers.


        :param unique_id: The unique_id of this ApiUsers.  # noqa: E501
        :type: str
        """
        if unique_id is not None and len(unique_id) > 100:
            raise ValueError("Invalid value for `unique_id`, length must be less than or equal to `100`")  # noqa: E501
        if unique_id is not None and len(unique_id) < 0:
            raise ValueError("Invalid value for `unique_id`, length must be greater than or equal to `0`")  # noqa: E501

        self._unique_id = unique_id

    @property
    def login_attempt(self):
        """Gets the login_attempt of this ApiUsers.  # noqa: E501


        :return: The login_attempt of this ApiUsers.  # noqa: E501
        :rtype: int
        """
        return self._login_attempt

    @login_attempt.setter
    def login_attempt(self, login_attempt):
        """Sets the login_attempt of this ApiUsers.


        :param login_attempt: The login_attempt of this ApiUsers.  # noqa: E501
        :type: int
        """
        
        if login_attempt is None:
            raise ValueError("Invalid value for `login_attempt`, must not be `None`")  # noqa: E501

        self._login_attempt = login_attempt

    @property
    def max_invalid_login_attempts(self):
        """Gets the max_invalid_login_attempts of this ApiUsers.  # noqa: E501


        :return: The max_invalid_login_attempts of this ApiUsers.  # noqa: E501
        :rtype: int
        """
        return self._max_invalid_login_attempts

    @max_invalid_login_attempts.setter
    def max_invalid_login_attempts(self, max_invalid_login_attempts):
        """Sets the max_invalid_login_attempts of this ApiUsers.


        :param max_invalid_login_attempts: The max_invalid_login_attempts of this ApiUsers.  # noqa: E501
        :type: int
        """
        
        if max_invalid_login_attempts is None:
            raise ValueError("Invalid value for `max_invalid_login_attempts`, must not be `None`")  # noqa: E501

        self._max_invalid_login_attempts = max_invalid_login_attempts

    @property
    def status(self):
        """Gets the status of this ApiUsers.  # noqa: E501


        :return: The status of this ApiUsers.  # noqa: E501
        :rtype: UserStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ApiUsers.


        :param status: The status of this ApiUsers.  # noqa: E501
        :type: UserStatus
        """
        
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def is_locked(self):
        """Gets the is_locked of this ApiUsers.  # noqa: E501


        :return: The is_locked of this ApiUsers.  # noqa: E501
        :rtype: bool
        """
        return self._is_locked

    @is_locked.setter
    def is_locked(self, is_locked):
        """Sets the is_locked of this ApiUsers.


        :param is_locked: The is_locked of this ApiUsers.  # noqa: E501
        :type: bool
        """
        is_locked = bool(is_locked)
        if is_locked is None:
            raise ValueError("Invalid value for `is_locked`, must not be `None`")  # noqa: E501

        self._is_locked = is_locked

    @property
    def email(self):
        """Gets the email of this ApiUsers.  # noqa: E501


        :return: The email of this ApiUsers.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this ApiUsers.


        :param email: The email of this ApiUsers.  # noqa: E501
        :type: str
        """
        if email is not None and len(email) > 150:
            raise ValueError("Invalid value for `email`, length must be less than or equal to `150`")  # noqa: E501
        if email is not None and len(email) < 0:
            raise ValueError("Invalid value for `email`, length must be greater than or equal to `0`")  # noqa: E501

        self._email = email

    @property
    def culture_name(self):
        """Gets the culture_name of this ApiUsers.  # noqa: E501


        :return: The culture_name of this ApiUsers.  # noqa: E501
        :rtype: str
        """
        return self._culture_name

    @culture_name.setter
    def culture_name(self, culture_name):
        """Sets the culture_name of this ApiUsers.


        :param culture_name: The culture_name of this ApiUsers.  # noqa: E501
        :type: str
        """

        self._culture_name = culture_name

    @property
    def role_id(self):
        """Gets the role_id of this ApiUsers.  # noqa: E501


        :return: The role_id of this ApiUsers.  # noqa: E501
        :rtype: int
        """
        return self._role_id

    @role_id.setter
    def role_id(self, role_id):
        """Sets the role_id of this ApiUsers.


        :param role_id: The role_id of this ApiUsers.  # noqa: E501
        :type: int
        """
        
        if role_id is None:
            raise ValueError("Invalid value for `role_id`, must not be `None`")  # noqa: E501

        self._role_id = role_id

    @property
    def login_user_name(self):
        """Gets the login_user_name of this ApiUsers.  # noqa: E501


        :return: The login_user_name of this ApiUsers.  # noqa: E501
        :rtype: str
        """
        return self._login_user_name

    @login_user_name.setter
    def login_user_name(self, login_user_name):
        """Sets the login_user_name of this ApiUsers.


        :param login_user_name: The login_user_name of this ApiUsers.  # noqa: E501
        :type: str
        """

        self._login_user_name = login_user_name

    @property
    def crm_id(self):
        """Gets the crm_id of this ApiUsers.  # noqa: E501


        :return: The crm_id of this ApiUsers.  # noqa: E501
        :rtype: str
        """
        return self._crm_id

    @crm_id.setter
    def crm_id(self, crm_id):
        """Sets the crm_id of this ApiUsers.


        :param crm_id: The crm_id of this ApiUsers.  # noqa: E501
        :type: str
        """

        self._crm_id = crm_id

    @property
    def merchant(self):
        """Gets the merchant of this ApiUsers.  # noqa: E501


        :return: The merchant of this ApiUsers.  # noqa: E501
        :rtype: Merchants
        """
        return self._merchant

    @merchant.setter
    def merchant(self, merchant):
        """Sets the merchant of this ApiUsers.


        :param merchant: The merchant of this ApiUsers.  # noqa: E501
        :type: Merchants
        """

        self._merchant = merchant

    @property
    def api_user_password_histories(self):
        """Gets the api_user_password_histories of this ApiUsers.  # noqa: E501


        :return: The api_user_password_histories of this ApiUsers.  # noqa: E501
        :rtype: list[ApiUserPasswordHistories]
        """
        return self._api_user_password_histories

    @api_user_password_histories.setter
    def api_user_password_histories(self, api_user_password_histories):
        """Sets the api_user_password_histories of this ApiUsers.


        :param api_user_password_histories: The api_user_password_histories of this ApiUsers.  # noqa: E501
        :type: list[ApiUserPasswordHistories]
        """

        self._api_user_password_histories = api_user_password_histories

    @property
    def merchant_id(self):
        """Gets the merchant_id of this ApiUsers.  # noqa: E501


        :return: The merchant_id of this ApiUsers.  # noqa: E501
        :rtype: int
        """
        return self._merchant_id

    @merchant_id.setter
    def merchant_id(self, merchant_id):
        """Sets the merchant_id of this ApiUsers.


        :param merchant_id: The merchant_id of this ApiUsers.  # noqa: E501
        :type: int
        """
        
        if merchant_id is None:
            raise ValueError("Invalid value for `merchant_id`, must not be `None`")  # noqa: E501

        self._merchant_id = merchant_id

    @property
    def merchant_name(self):
        """Gets the merchant_name of this ApiUsers.  # noqa: E501


        :return: The merchant_name of this ApiUsers.  # noqa: E501
        :rtype: str
        """
        return self._merchant_name

    @merchant_name.setter
    def merchant_name(self, merchant_name):
        """Sets the merchant_name of this ApiUsers.


        :param merchant_name: The merchant_name of this ApiUsers.  # noqa: E501
        :type: str
        """

        self._merchant_name = merchant_name

    @property
    def password(self):
        """Gets the password of this ApiUsers.  # noqa: E501


        :return: The password of this ApiUsers.  # noqa: E501
        :rtype: IUserPasswordHistory
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this ApiUsers.


        :param password: The password of this ApiUsers.  # noqa: E501
        :type: IUserPasswordHistory
        """

        self._password = password

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ApiUsers, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApiUsers):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
