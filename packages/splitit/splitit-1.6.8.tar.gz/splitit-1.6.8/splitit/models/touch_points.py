# coding: utf-8

"""
    splitit-web-api-public-sdk

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class TouchPoints(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'code': 'str',
        'default_color_values_id': 'int',
        'logo_supported': 'bool',
        'owner': 'str',
        'url': 'str',
        'business_party': 'BusinessParty',
        'config_keys': 'list[ConfigKeys]',
        'versioned_touch_points': 'list[VersionedTouchPoints]'
    }

    attribute_map = {
        'id': 'Id',
        'name': 'Name',
        'code': 'Code',
        'default_color_values_id': 'DefaultColorValuesId',
        'logo_supported': 'LogoSupported',
        'owner': 'Owner',
        'url': 'Url',
        'business_party': 'BusinessParty',
        'config_keys': 'ConfigKeys',
        'versioned_touch_points': 'VersionedTouchPoints'
    }

    def __init__(self, id=None, name=None, code=None, default_color_values_id=None, logo_supported=None, owner=None, url=None, business_party=None, config_keys=None, versioned_touch_points=None):  # noqa: E501
        """TouchPoints - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._name = None
        self._code = None
        self._default_color_values_id = None
        self._logo_supported = None
        self._owner = None
        self._url = None
        self._business_party = None
        self._config_keys = None
        self._versioned_touch_points = None
        self.discriminator = None

        self._id = id
        if name is not None:
            self._name = name
        if code is not None:
            self._code = code
        self._default_color_values_id = default_color_values_id
        self._logo_supported = logo_supported
        if owner is not None:
            self._owner = owner
        if url is not None:
            self._url = url
        if business_party is not None:
            self._business_party = business_party
        if config_keys is not None:
            self._config_keys = config_keys
        if versioned_touch_points is not None:
            self._versioned_touch_points = versioned_touch_points

    @property
    def id(self):
        """Gets the id of this TouchPoints.  # noqa: E501


        :return: The id of this TouchPoints.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TouchPoints.


        :param id: The id of this TouchPoints.  # noqa: E501
        :type: int
        """
        
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this TouchPoints.  # noqa: E501


        :return: The name of this TouchPoints.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TouchPoints.


        :param name: The name of this TouchPoints.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def code(self):
        """Gets the code of this TouchPoints.  # noqa: E501


        :return: The code of this TouchPoints.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this TouchPoints.


        :param code: The code of this TouchPoints.  # noqa: E501
        :type: str
        """

        self._code = code

    @property
    def default_color_values_id(self):
        """Gets the default_color_values_id of this TouchPoints.  # noqa: E501


        :return: The default_color_values_id of this TouchPoints.  # noqa: E501
        :rtype: int
        """
        return self._default_color_values_id

    @default_color_values_id.setter
    def default_color_values_id(self, default_color_values_id):
        """Sets the default_color_values_id of this TouchPoints.


        :param default_color_values_id: The default_color_values_id of this TouchPoints.  # noqa: E501
        :type: int
        """
        
        if default_color_values_id is None:
            raise ValueError("Invalid value for `default_color_values_id`, must not be `None`")  # noqa: E501

        self._default_color_values_id = default_color_values_id

    @property
    def logo_supported(self):
        """Gets the logo_supported of this TouchPoints.  # noqa: E501


        :return: The logo_supported of this TouchPoints.  # noqa: E501
        :rtype: bool
        """
        return self._logo_supported

    @logo_supported.setter
    def logo_supported(self, logo_supported):
        """Sets the logo_supported of this TouchPoints.


        :param logo_supported: The logo_supported of this TouchPoints.  # noqa: E501
        :type: bool
        """
        logo_supported = bool(logo_supported)
        if logo_supported is None:
            raise ValueError("Invalid value for `logo_supported`, must not be `None`")  # noqa: E501

        self._logo_supported = logo_supported

    @property
    def owner(self):
        """Gets the owner of this TouchPoints.  # noqa: E501


        :return: The owner of this TouchPoints.  # noqa: E501
        :rtype: str
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this TouchPoints.


        :param owner: The owner of this TouchPoints.  # noqa: E501
        :type: str
        """

        self._owner = owner

    @property
    def url(self):
        """Gets the url of this TouchPoints.  # noqa: E501


        :return: The url of this TouchPoints.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this TouchPoints.


        :param url: The url of this TouchPoints.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def business_party(self):
        """Gets the business_party of this TouchPoints.  # noqa: E501


        :return: The business_party of this TouchPoints.  # noqa: E501
        :rtype: BusinessParty
        """
        return self._business_party

    @business_party.setter
    def business_party(self, business_party):
        """Sets the business_party of this TouchPoints.


        :param business_party: The business_party of this TouchPoints.  # noqa: E501
        :type: BusinessParty
        """

        self._business_party = business_party

    @property
    def config_keys(self):
        """Gets the config_keys of this TouchPoints.  # noqa: E501


        :return: The config_keys of this TouchPoints.  # noqa: E501
        :rtype: list[ConfigKeys]
        """
        return self._config_keys

    @config_keys.setter
    def config_keys(self, config_keys):
        """Sets the config_keys of this TouchPoints.


        :param config_keys: The config_keys of this TouchPoints.  # noqa: E501
        :type: list[ConfigKeys]
        """

        self._config_keys = config_keys

    @property
    def versioned_touch_points(self):
        """Gets the versioned_touch_points of this TouchPoints.  # noqa: E501


        :return: The versioned_touch_points of this TouchPoints.  # noqa: E501
        :rtype: list[VersionedTouchPoints]
        """
        return self._versioned_touch_points

    @versioned_touch_points.setter
    def versioned_touch_points(self, versioned_touch_points):
        """Sets the versioned_touch_points of this TouchPoints.


        :param versioned_touch_points: The versioned_touch_points of this TouchPoints.  # noqa: E501
        :type: list[VersionedTouchPoints]
        """

        self._versioned_touch_points = versioned_touch_points

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TouchPoints, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TouchPoints):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
