# coding: utf-8

"""
    splitit-web-api-public-sdk

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ApiUserPasswordHistories(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'password': 'str',
        'password_hash': 'str',
        'api_user_id': 'int',
        'api_user': 'ApiUsers'
    }

    attribute_map = {
        'id': 'Id',
        'password': 'Password',
        'password_hash': 'PasswordHash',
        'api_user_id': 'ApiUserId',
        'api_user': 'ApiUser'
    }

    def __init__(self, id=None, password=None, password_hash=None, api_user_id=None, api_user=None):  # noqa: E501
        """ApiUserPasswordHistories - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._password = None
        self._password_hash = None
        self._api_user_id = None
        self._api_user = None
        self.discriminator = None

        self._id = id
        if password is not None:
            self._password = password
        if password_hash is not None:
            self._password_hash = password_hash
        self._api_user_id = api_user_id
        if api_user is not None:
            self._api_user = api_user

    @property
    def id(self):
        """Gets the id of this ApiUserPasswordHistories.  # noqa: E501


        :return: The id of this ApiUserPasswordHistories.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ApiUserPasswordHistories.


        :param id: The id of this ApiUserPasswordHistories.  # noqa: E501
        :type: int
        """
        
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def password(self):
        """Gets the password of this ApiUserPasswordHistories.  # noqa: E501


        :return: The password of this ApiUserPasswordHistories.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this ApiUserPasswordHistories.


        :param password: The password of this ApiUserPasswordHistories.  # noqa: E501
        :type: str
        """

        self._password = password

    @property
    def password_hash(self):
        """Gets the password_hash of this ApiUserPasswordHistories.  # noqa: E501


        :return: The password_hash of this ApiUserPasswordHistories.  # noqa: E501
        :rtype: str
        """
        return self._password_hash

    @password_hash.setter
    def password_hash(self, password_hash):
        """Sets the password_hash of this ApiUserPasswordHistories.


        :param password_hash: The password_hash of this ApiUserPasswordHistories.  # noqa: E501
        :type: str
        """

        self._password_hash = password_hash

    @property
    def api_user_id(self):
        """Gets the api_user_id of this ApiUserPasswordHistories.  # noqa: E501


        :return: The api_user_id of this ApiUserPasswordHistories.  # noqa: E501
        :rtype: int
        """
        return self._api_user_id

    @api_user_id.setter
    def api_user_id(self, api_user_id):
        """Sets the api_user_id of this ApiUserPasswordHistories.


        :param api_user_id: The api_user_id of this ApiUserPasswordHistories.  # noqa: E501
        :type: int
        """
        
        if api_user_id is None:
            raise ValueError("Invalid value for `api_user_id`, must not be `None`")  # noqa: E501

        self._api_user_id = api_user_id

    @property
    def api_user(self):
        """Gets the api_user of this ApiUserPasswordHistories.  # noqa: E501


        :return: The api_user of this ApiUserPasswordHistories.  # noqa: E501
        :rtype: ApiUsers
        """
        return self._api_user

    @api_user.setter
    def api_user(self, api_user):
        """Sets the api_user of this ApiUserPasswordHistories.


        :param api_user: The api_user of this ApiUserPasswordHistories.  # noqa: E501
        :type: ApiUsers
        """

        self._api_user = api_user

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ApiUserPasswordHistories, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApiUserPasswordHistories):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
