# coding: utf-8

"""
    splitit-web-api-public-sdk

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class FeesRuleDatas(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'accounting_currency_id': 'int',
        'accounting_currency': 'Currencies',
        'business_unit_id': 'int',
        'business_unit': 'BusinessUnits',
        'pos_setup_percentage': 'float',
        'refund_fee': 'float',
        'cancellation_fee': 'float',
        'chb_fee': 'float',
        'monthly_subscription_amount': 'float',
        'fraud_check': 'float',
        'fixed_non_funded_secure': 'FeeRateCollections',
        'variable_non_funded_secure': 'FeeRateCollections',
        'fixed_non_funded_non_secure': 'FeeRateCollections',
        'variable_non_funded_non_secure': 'FeeRateCollections',
        'fixed_funded_secure': 'FeeRateCollections',
        'fixed_funded_non_secure': 'FeeRateCollections',
        'variable_funded_secure': 'FeeRateCollections',
        'variable_funded_non_secure': 'FeeRateCollections',
        'variable_funded_non_secure_id': 'int',
        'variable_funded_secure_id': 'int',
        'variable_non_funded_non_secure_id': 'int',
        'variable_non_funded_secure_id': 'int',
        'fixed_funded_non_secure_id': 'int',
        'fixed_funded_secure_id': 'int',
        'fixed_non_funded_non_secure_id': 'int',
        'fixed_non_funded_secure_id': 'int',
        'installment_plan_terminal_datas': 'list[InstallmentPlanTerminalDatas]'
    }

    attribute_map = {
        'id': 'Id',
        'accounting_currency_id': 'AccountingCurrencyId',
        'accounting_currency': 'AccountingCurrency',
        'business_unit_id': 'BusinessUnitId',
        'business_unit': 'BusinessUnit',
        'pos_setup_percentage': 'PosSetupPercentage',
        'refund_fee': 'RefundFee',
        'cancellation_fee': 'CancellationFee',
        'chb_fee': 'ChbFee',
        'monthly_subscription_amount': 'MonthlySubscriptionAmount',
        'fraud_check': 'FraudCheck',
        'fixed_non_funded_secure': 'FixedNonFundedSecure',
        'variable_non_funded_secure': 'VariableNonFundedSecure',
        'fixed_non_funded_non_secure': 'FixedNonFundedNonSecure',
        'variable_non_funded_non_secure': 'VariableNonFundedNonSecure',
        'fixed_funded_secure': 'FixedFundedSecure',
        'fixed_funded_non_secure': 'FixedFundedNonSecure',
        'variable_funded_secure': 'VariableFundedSecure',
        'variable_funded_non_secure': 'VariableFundedNonSecure',
        'variable_funded_non_secure_id': 'VariableFundedNonSecureId',
        'variable_funded_secure_id': 'VariableFundedSecureId',
        'variable_non_funded_non_secure_id': 'VariableNonFundedNonSecureId',
        'variable_non_funded_secure_id': 'VariableNonFundedSecureId',
        'fixed_funded_non_secure_id': 'FixedFundedNonSecureId',
        'fixed_funded_secure_id': 'FixedFundedSecureId',
        'fixed_non_funded_non_secure_id': 'FixedNonFundedNonSecureId',
        'fixed_non_funded_secure_id': 'FixedNonFundedSecureId',
        'installment_plan_terminal_datas': 'InstallmentPlanTerminalDatas'
    }

    def __init__(self, id=None, accounting_currency_id=None, accounting_currency=None, business_unit_id=None, business_unit=None, pos_setup_percentage=None, refund_fee=None, cancellation_fee=None, chb_fee=None, monthly_subscription_amount=None, fraud_check=None, fixed_non_funded_secure=None, variable_non_funded_secure=None, fixed_non_funded_non_secure=None, variable_non_funded_non_secure=None, fixed_funded_secure=None, fixed_funded_non_secure=None, variable_funded_secure=None, variable_funded_non_secure=None, variable_funded_non_secure_id=None, variable_funded_secure_id=None, variable_non_funded_non_secure_id=None, variable_non_funded_secure_id=None, fixed_funded_non_secure_id=None, fixed_funded_secure_id=None, fixed_non_funded_non_secure_id=None, fixed_non_funded_secure_id=None, installment_plan_terminal_datas=None):  # noqa: E501
        """FeesRuleDatas - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._accounting_currency_id = None
        self._accounting_currency = None
        self._business_unit_id = None
        self._business_unit = None
        self._pos_setup_percentage = None
        self._refund_fee = None
        self._cancellation_fee = None
        self._chb_fee = None
        self._monthly_subscription_amount = None
        self._fraud_check = None
        self._fixed_non_funded_secure = None
        self._variable_non_funded_secure = None
        self._fixed_non_funded_non_secure = None
        self._variable_non_funded_non_secure = None
        self._fixed_funded_secure = None
        self._fixed_funded_non_secure = None
        self._variable_funded_secure = None
        self._variable_funded_non_secure = None
        self._variable_funded_non_secure_id = None
        self._variable_funded_secure_id = None
        self._variable_non_funded_non_secure_id = None
        self._variable_non_funded_secure_id = None
        self._fixed_funded_non_secure_id = None
        self._fixed_funded_secure_id = None
        self._fixed_non_funded_non_secure_id = None
        self._fixed_non_funded_secure_id = None
        self._installment_plan_terminal_datas = None
        self.discriminator = None

        self._id = id
        self._accounting_currency_id = accounting_currency_id
        if accounting_currency is not None:
            self._accounting_currency = accounting_currency
        self._business_unit_id = business_unit_id
        if business_unit is not None:
            self._business_unit = business_unit
        self._pos_setup_percentage = pos_setup_percentage
        self._refund_fee = refund_fee
        self._cancellation_fee = cancellation_fee
        self._chb_fee = chb_fee
        self._monthly_subscription_amount = monthly_subscription_amount
        self._fraud_check = fraud_check
        if fixed_non_funded_secure is not None:
            self._fixed_non_funded_secure = fixed_non_funded_secure
        if variable_non_funded_secure is not None:
            self._variable_non_funded_secure = variable_non_funded_secure
        if fixed_non_funded_non_secure is not None:
            self._fixed_non_funded_non_secure = fixed_non_funded_non_secure
        if variable_non_funded_non_secure is not None:
            self._variable_non_funded_non_secure = variable_non_funded_non_secure
        if fixed_funded_secure is not None:
            self._fixed_funded_secure = fixed_funded_secure
        if fixed_funded_non_secure is not None:
            self._fixed_funded_non_secure = fixed_funded_non_secure
        if variable_funded_secure is not None:
            self._variable_funded_secure = variable_funded_secure
        if variable_funded_non_secure is not None:
            self._variable_funded_non_secure = variable_funded_non_secure
        if variable_funded_non_secure_id is not None:
            self._variable_funded_non_secure_id = variable_funded_non_secure_id
        if variable_funded_secure_id is not None:
            self._variable_funded_secure_id = variable_funded_secure_id
        if variable_non_funded_non_secure_id is not None:
            self._variable_non_funded_non_secure_id = variable_non_funded_non_secure_id
        if variable_non_funded_secure_id is not None:
            self._variable_non_funded_secure_id = variable_non_funded_secure_id
        if fixed_funded_non_secure_id is not None:
            self._fixed_funded_non_secure_id = fixed_funded_non_secure_id
        if fixed_funded_secure_id is not None:
            self._fixed_funded_secure_id = fixed_funded_secure_id
        if fixed_non_funded_non_secure_id is not None:
            self._fixed_non_funded_non_secure_id = fixed_non_funded_non_secure_id
        if fixed_non_funded_secure_id is not None:
            self._fixed_non_funded_secure_id = fixed_non_funded_secure_id
        if installment_plan_terminal_datas is not None:
            self._installment_plan_terminal_datas = installment_plan_terminal_datas

    @property
    def id(self):
        """Gets the id of this FeesRuleDatas.  # noqa: E501


        :return: The id of this FeesRuleDatas.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this FeesRuleDatas.


        :param id: The id of this FeesRuleDatas.  # noqa: E501
        :type: int
        """
        
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def accounting_currency_id(self):
        """Gets the accounting_currency_id of this FeesRuleDatas.  # noqa: E501


        :return: The accounting_currency_id of this FeesRuleDatas.  # noqa: E501
        :rtype: int
        """
        return self._accounting_currency_id

    @accounting_currency_id.setter
    def accounting_currency_id(self, accounting_currency_id):
        """Sets the accounting_currency_id of this FeesRuleDatas.


        :param accounting_currency_id: The accounting_currency_id of this FeesRuleDatas.  # noqa: E501
        :type: int
        """
        
        if accounting_currency_id is None:
            raise ValueError("Invalid value for `accounting_currency_id`, must not be `None`")  # noqa: E501

        self._accounting_currency_id = accounting_currency_id

    @property
    def accounting_currency(self):
        """Gets the accounting_currency of this FeesRuleDatas.  # noqa: E501


        :return: The accounting_currency of this FeesRuleDatas.  # noqa: E501
        :rtype: Currencies
        """
        return self._accounting_currency

    @accounting_currency.setter
    def accounting_currency(self, accounting_currency):
        """Sets the accounting_currency of this FeesRuleDatas.


        :param accounting_currency: The accounting_currency of this FeesRuleDatas.  # noqa: E501
        :type: Currencies
        """

        self._accounting_currency = accounting_currency

    @property
    def business_unit_id(self):
        """Gets the business_unit_id of this FeesRuleDatas.  # noqa: E501


        :return: The business_unit_id of this FeesRuleDatas.  # noqa: E501
        :rtype: int
        """
        return self._business_unit_id

    @business_unit_id.setter
    def business_unit_id(self, business_unit_id):
        """Sets the business_unit_id of this FeesRuleDatas.


        :param business_unit_id: The business_unit_id of this FeesRuleDatas.  # noqa: E501
        :type: int
        """
        
        if business_unit_id is None:
            raise ValueError("Invalid value for `business_unit_id`, must not be `None`")  # noqa: E501

        self._business_unit_id = business_unit_id

    @property
    def business_unit(self):
        """Gets the business_unit of this FeesRuleDatas.  # noqa: E501


        :return: The business_unit of this FeesRuleDatas.  # noqa: E501
        :rtype: BusinessUnits
        """
        return self._business_unit

    @business_unit.setter
    def business_unit(self, business_unit):
        """Sets the business_unit of this FeesRuleDatas.


        :param business_unit: The business_unit of this FeesRuleDatas.  # noqa: E501
        :type: BusinessUnits
        """

        self._business_unit = business_unit

    @property
    def pos_setup_percentage(self):
        """Gets the pos_setup_percentage of this FeesRuleDatas.  # noqa: E501


        :return: The pos_setup_percentage of this FeesRuleDatas.  # noqa: E501
        :rtype: float
        """
        return self._pos_setup_percentage

    @pos_setup_percentage.setter
    def pos_setup_percentage(self, pos_setup_percentage):
        """Sets the pos_setup_percentage of this FeesRuleDatas.


        :param pos_setup_percentage: The pos_setup_percentage of this FeesRuleDatas.  # noqa: E501
        :type: float
        """
        
        if pos_setup_percentage is None:
            raise ValueError("Invalid value for `pos_setup_percentage`, must not be `None`")  # noqa: E501

        self._pos_setup_percentage = pos_setup_percentage

    @property
    def refund_fee(self):
        """Gets the refund_fee of this FeesRuleDatas.  # noqa: E501


        :return: The refund_fee of this FeesRuleDatas.  # noqa: E501
        :rtype: float
        """
        return self._refund_fee

    @refund_fee.setter
    def refund_fee(self, refund_fee):
        """Sets the refund_fee of this FeesRuleDatas.


        :param refund_fee: The refund_fee of this FeesRuleDatas.  # noqa: E501
        :type: float
        """
        
        if refund_fee is None:
            raise ValueError("Invalid value for `refund_fee`, must not be `None`")  # noqa: E501

        self._refund_fee = refund_fee

    @property
    def cancellation_fee(self):
        """Gets the cancellation_fee of this FeesRuleDatas.  # noqa: E501


        :return: The cancellation_fee of this FeesRuleDatas.  # noqa: E501
        :rtype: float
        """
        return self._cancellation_fee

    @cancellation_fee.setter
    def cancellation_fee(self, cancellation_fee):
        """Sets the cancellation_fee of this FeesRuleDatas.


        :param cancellation_fee: The cancellation_fee of this FeesRuleDatas.  # noqa: E501
        :type: float
        """
        
        if cancellation_fee is None:
            raise ValueError("Invalid value for `cancellation_fee`, must not be `None`")  # noqa: E501

        self._cancellation_fee = cancellation_fee

    @property
    def chb_fee(self):
        """Gets the chb_fee of this FeesRuleDatas.  # noqa: E501


        :return: The chb_fee of this FeesRuleDatas.  # noqa: E501
        :rtype: float
        """
        return self._chb_fee

    @chb_fee.setter
    def chb_fee(self, chb_fee):
        """Sets the chb_fee of this FeesRuleDatas.


        :param chb_fee: The chb_fee of this FeesRuleDatas.  # noqa: E501
        :type: float
        """
        
        if chb_fee is None:
            raise ValueError("Invalid value for `chb_fee`, must not be `None`")  # noqa: E501

        self._chb_fee = chb_fee

    @property
    def monthly_subscription_amount(self):
        """Gets the monthly_subscription_amount of this FeesRuleDatas.  # noqa: E501


        :return: The monthly_subscription_amount of this FeesRuleDatas.  # noqa: E501
        :rtype: float
        """
        return self._monthly_subscription_amount

    @monthly_subscription_amount.setter
    def monthly_subscription_amount(self, monthly_subscription_amount):
        """Sets the monthly_subscription_amount of this FeesRuleDatas.


        :param monthly_subscription_amount: The monthly_subscription_amount of this FeesRuleDatas.  # noqa: E501
        :type: float
        """
        
        if monthly_subscription_amount is None:
            raise ValueError("Invalid value for `monthly_subscription_amount`, must not be `None`")  # noqa: E501

        self._monthly_subscription_amount = monthly_subscription_amount

    @property
    def fraud_check(self):
        """Gets the fraud_check of this FeesRuleDatas.  # noqa: E501


        :return: The fraud_check of this FeesRuleDatas.  # noqa: E501
        :rtype: float
        """
        return self._fraud_check

    @fraud_check.setter
    def fraud_check(self, fraud_check):
        """Sets the fraud_check of this FeesRuleDatas.


        :param fraud_check: The fraud_check of this FeesRuleDatas.  # noqa: E501
        :type: float
        """
        
        if fraud_check is None:
            raise ValueError("Invalid value for `fraud_check`, must not be `None`")  # noqa: E501

        self._fraud_check = fraud_check

    @property
    def fixed_non_funded_secure(self):
        """Gets the fixed_non_funded_secure of this FeesRuleDatas.  # noqa: E501


        :return: The fixed_non_funded_secure of this FeesRuleDatas.  # noqa: E501
        :rtype: FeeRateCollections
        """
        return self._fixed_non_funded_secure

    @fixed_non_funded_secure.setter
    def fixed_non_funded_secure(self, fixed_non_funded_secure):
        """Sets the fixed_non_funded_secure of this FeesRuleDatas.


        :param fixed_non_funded_secure: The fixed_non_funded_secure of this FeesRuleDatas.  # noqa: E501
        :type: FeeRateCollections
        """

        self._fixed_non_funded_secure = fixed_non_funded_secure

    @property
    def variable_non_funded_secure(self):
        """Gets the variable_non_funded_secure of this FeesRuleDatas.  # noqa: E501


        :return: The variable_non_funded_secure of this FeesRuleDatas.  # noqa: E501
        :rtype: FeeRateCollections
        """
        return self._variable_non_funded_secure

    @variable_non_funded_secure.setter
    def variable_non_funded_secure(self, variable_non_funded_secure):
        """Sets the variable_non_funded_secure of this FeesRuleDatas.


        :param variable_non_funded_secure: The variable_non_funded_secure of this FeesRuleDatas.  # noqa: E501
        :type: FeeRateCollections
        """

        self._variable_non_funded_secure = variable_non_funded_secure

    @property
    def fixed_non_funded_non_secure(self):
        """Gets the fixed_non_funded_non_secure of this FeesRuleDatas.  # noqa: E501


        :return: The fixed_non_funded_non_secure of this FeesRuleDatas.  # noqa: E501
        :rtype: FeeRateCollections
        """
        return self._fixed_non_funded_non_secure

    @fixed_non_funded_non_secure.setter
    def fixed_non_funded_non_secure(self, fixed_non_funded_non_secure):
        """Sets the fixed_non_funded_non_secure of this FeesRuleDatas.


        :param fixed_non_funded_non_secure: The fixed_non_funded_non_secure of this FeesRuleDatas.  # noqa: E501
        :type: FeeRateCollections
        """

        self._fixed_non_funded_non_secure = fixed_non_funded_non_secure

    @property
    def variable_non_funded_non_secure(self):
        """Gets the variable_non_funded_non_secure of this FeesRuleDatas.  # noqa: E501


        :return: The variable_non_funded_non_secure of this FeesRuleDatas.  # noqa: E501
        :rtype: FeeRateCollections
        """
        return self._variable_non_funded_non_secure

    @variable_non_funded_non_secure.setter
    def variable_non_funded_non_secure(self, variable_non_funded_non_secure):
        """Sets the variable_non_funded_non_secure of this FeesRuleDatas.


        :param variable_non_funded_non_secure: The variable_non_funded_non_secure of this FeesRuleDatas.  # noqa: E501
        :type: FeeRateCollections
        """

        self._variable_non_funded_non_secure = variable_non_funded_non_secure

    @property
    def fixed_funded_secure(self):
        """Gets the fixed_funded_secure of this FeesRuleDatas.  # noqa: E501


        :return: The fixed_funded_secure of this FeesRuleDatas.  # noqa: E501
        :rtype: FeeRateCollections
        """
        return self._fixed_funded_secure

    @fixed_funded_secure.setter
    def fixed_funded_secure(self, fixed_funded_secure):
        """Sets the fixed_funded_secure of this FeesRuleDatas.


        :param fixed_funded_secure: The fixed_funded_secure of this FeesRuleDatas.  # noqa: E501
        :type: FeeRateCollections
        """

        self._fixed_funded_secure = fixed_funded_secure

    @property
    def fixed_funded_non_secure(self):
        """Gets the fixed_funded_non_secure of this FeesRuleDatas.  # noqa: E501


        :return: The fixed_funded_non_secure of this FeesRuleDatas.  # noqa: E501
        :rtype: FeeRateCollections
        """
        return self._fixed_funded_non_secure

    @fixed_funded_non_secure.setter
    def fixed_funded_non_secure(self, fixed_funded_non_secure):
        """Sets the fixed_funded_non_secure of this FeesRuleDatas.


        :param fixed_funded_non_secure: The fixed_funded_non_secure of this FeesRuleDatas.  # noqa: E501
        :type: FeeRateCollections
        """

        self._fixed_funded_non_secure = fixed_funded_non_secure

    @property
    def variable_funded_secure(self):
        """Gets the variable_funded_secure of this FeesRuleDatas.  # noqa: E501


        :return: The variable_funded_secure of this FeesRuleDatas.  # noqa: E501
        :rtype: FeeRateCollections
        """
        return self._variable_funded_secure

    @variable_funded_secure.setter
    def variable_funded_secure(self, variable_funded_secure):
        """Sets the variable_funded_secure of this FeesRuleDatas.


        :param variable_funded_secure: The variable_funded_secure of this FeesRuleDatas.  # noqa: E501
        :type: FeeRateCollections
        """

        self._variable_funded_secure = variable_funded_secure

    @property
    def variable_funded_non_secure(self):
        """Gets the variable_funded_non_secure of this FeesRuleDatas.  # noqa: E501


        :return: The variable_funded_non_secure of this FeesRuleDatas.  # noqa: E501
        :rtype: FeeRateCollections
        """
        return self._variable_funded_non_secure

    @variable_funded_non_secure.setter
    def variable_funded_non_secure(self, variable_funded_non_secure):
        """Sets the variable_funded_non_secure of this FeesRuleDatas.


        :param variable_funded_non_secure: The variable_funded_non_secure of this FeesRuleDatas.  # noqa: E501
        :type: FeeRateCollections
        """

        self._variable_funded_non_secure = variable_funded_non_secure

    @property
    def variable_funded_non_secure_id(self):
        """Gets the variable_funded_non_secure_id of this FeesRuleDatas.  # noqa: E501


        :return: The variable_funded_non_secure_id of this FeesRuleDatas.  # noqa: E501
        :rtype: int
        """
        return self._variable_funded_non_secure_id

    @variable_funded_non_secure_id.setter
    def variable_funded_non_secure_id(self, variable_funded_non_secure_id):
        """Sets the variable_funded_non_secure_id of this FeesRuleDatas.


        :param variable_funded_non_secure_id: The variable_funded_non_secure_id of this FeesRuleDatas.  # noqa: E501
        :type: int
        """

        self._variable_funded_non_secure_id = variable_funded_non_secure_id

    @property
    def variable_funded_secure_id(self):
        """Gets the variable_funded_secure_id of this FeesRuleDatas.  # noqa: E501


        :return: The variable_funded_secure_id of this FeesRuleDatas.  # noqa: E501
        :rtype: int
        """
        return self._variable_funded_secure_id

    @variable_funded_secure_id.setter
    def variable_funded_secure_id(self, variable_funded_secure_id):
        """Sets the variable_funded_secure_id of this FeesRuleDatas.


        :param variable_funded_secure_id: The variable_funded_secure_id of this FeesRuleDatas.  # noqa: E501
        :type: int
        """

        self._variable_funded_secure_id = variable_funded_secure_id

    @property
    def variable_non_funded_non_secure_id(self):
        """Gets the variable_non_funded_non_secure_id of this FeesRuleDatas.  # noqa: E501


        :return: The variable_non_funded_non_secure_id of this FeesRuleDatas.  # noqa: E501
        :rtype: int
        """
        return self._variable_non_funded_non_secure_id

    @variable_non_funded_non_secure_id.setter
    def variable_non_funded_non_secure_id(self, variable_non_funded_non_secure_id):
        """Sets the variable_non_funded_non_secure_id of this FeesRuleDatas.


        :param variable_non_funded_non_secure_id: The variable_non_funded_non_secure_id of this FeesRuleDatas.  # noqa: E501
        :type: int
        """

        self._variable_non_funded_non_secure_id = variable_non_funded_non_secure_id

    @property
    def variable_non_funded_secure_id(self):
        """Gets the variable_non_funded_secure_id of this FeesRuleDatas.  # noqa: E501


        :return: The variable_non_funded_secure_id of this FeesRuleDatas.  # noqa: E501
        :rtype: int
        """
        return self._variable_non_funded_secure_id

    @variable_non_funded_secure_id.setter
    def variable_non_funded_secure_id(self, variable_non_funded_secure_id):
        """Sets the variable_non_funded_secure_id of this FeesRuleDatas.


        :param variable_non_funded_secure_id: The variable_non_funded_secure_id of this FeesRuleDatas.  # noqa: E501
        :type: int
        """

        self._variable_non_funded_secure_id = variable_non_funded_secure_id

    @property
    def fixed_funded_non_secure_id(self):
        """Gets the fixed_funded_non_secure_id of this FeesRuleDatas.  # noqa: E501


        :return: The fixed_funded_non_secure_id of this FeesRuleDatas.  # noqa: E501
        :rtype: int
        """
        return self._fixed_funded_non_secure_id

    @fixed_funded_non_secure_id.setter
    def fixed_funded_non_secure_id(self, fixed_funded_non_secure_id):
        """Sets the fixed_funded_non_secure_id of this FeesRuleDatas.


        :param fixed_funded_non_secure_id: The fixed_funded_non_secure_id of this FeesRuleDatas.  # noqa: E501
        :type: int
        """

        self._fixed_funded_non_secure_id = fixed_funded_non_secure_id

    @property
    def fixed_funded_secure_id(self):
        """Gets the fixed_funded_secure_id of this FeesRuleDatas.  # noqa: E501


        :return: The fixed_funded_secure_id of this FeesRuleDatas.  # noqa: E501
        :rtype: int
        """
        return self._fixed_funded_secure_id

    @fixed_funded_secure_id.setter
    def fixed_funded_secure_id(self, fixed_funded_secure_id):
        """Sets the fixed_funded_secure_id of this FeesRuleDatas.


        :param fixed_funded_secure_id: The fixed_funded_secure_id of this FeesRuleDatas.  # noqa: E501
        :type: int
        """

        self._fixed_funded_secure_id = fixed_funded_secure_id

    @property
    def fixed_non_funded_non_secure_id(self):
        """Gets the fixed_non_funded_non_secure_id of this FeesRuleDatas.  # noqa: E501


        :return: The fixed_non_funded_non_secure_id of this FeesRuleDatas.  # noqa: E501
        :rtype: int
        """
        return self._fixed_non_funded_non_secure_id

    @fixed_non_funded_non_secure_id.setter
    def fixed_non_funded_non_secure_id(self, fixed_non_funded_non_secure_id):
        """Sets the fixed_non_funded_non_secure_id of this FeesRuleDatas.


        :param fixed_non_funded_non_secure_id: The fixed_non_funded_non_secure_id of this FeesRuleDatas.  # noqa: E501
        :type: int
        """

        self._fixed_non_funded_non_secure_id = fixed_non_funded_non_secure_id

    @property
    def fixed_non_funded_secure_id(self):
        """Gets the fixed_non_funded_secure_id of this FeesRuleDatas.  # noqa: E501


        :return: The fixed_non_funded_secure_id of this FeesRuleDatas.  # noqa: E501
        :rtype: int
        """
        return self._fixed_non_funded_secure_id

    @fixed_non_funded_secure_id.setter
    def fixed_non_funded_secure_id(self, fixed_non_funded_secure_id):
        """Sets the fixed_non_funded_secure_id of this FeesRuleDatas.


        :param fixed_non_funded_secure_id: The fixed_non_funded_secure_id of this FeesRuleDatas.  # noqa: E501
        :type: int
        """

        self._fixed_non_funded_secure_id = fixed_non_funded_secure_id

    @property
    def installment_plan_terminal_datas(self):
        """Gets the installment_plan_terminal_datas of this FeesRuleDatas.  # noqa: E501


        :return: The installment_plan_terminal_datas of this FeesRuleDatas.  # noqa: E501
        :rtype: list[InstallmentPlanTerminalDatas]
        """
        return self._installment_plan_terminal_datas

    @installment_plan_terminal_datas.setter
    def installment_plan_terminal_datas(self, installment_plan_terminal_datas):
        """Sets the installment_plan_terminal_datas of this FeesRuleDatas.


        :param installment_plan_terminal_datas: The installment_plan_terminal_datas of this FeesRuleDatas.  # noqa: E501
        :type: list[InstallmentPlanTerminalDatas]
        """

        self._installment_plan_terminal_datas = installment_plan_terminal_datas

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FeesRuleDatas, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FeesRuleDatas):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
