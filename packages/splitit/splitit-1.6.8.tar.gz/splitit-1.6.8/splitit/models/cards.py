# coding: utf-8

"""
    splitit-web-api-public-sdk

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Cards(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'kek_id': 'int',
        'bin_bin_number': 'str',
        'bin_issuing_country_iso_number': 'str',
        'bin_id': 'int',
        'expiration_month': 'int',
        'expiration_year': 'int',
        'address_data_address_line': 'str',
        'address_data_zip': 'str',
        'is_deleted': 'bool',
        'version': 'int',
        'pis_member_unique_id': 'str',
        'pis_member_id': 'int',
        'address_data_address_line2': 'str',
        'address_data_city': 'str',
        'address_data_country_id': 'int',
        'address_data_state_id': 'int',
        'address_data_legacy_full_address_line': 'str',
        'bin_is_prepaid': 'bool',
        'token': 'str',
        'kek': 'Keks',
        'card_class': 'str',
        'product_id': 'str',
        'issuer_bank_name': 'str',
        'dek_data_id': 'int',
        'dek_data': 'DEKData',
        'pis_member': 'object',
        'account_updater_pending_cards': 'list[AccountUpdaterPendingCards]',
        'card_state_logs': 'list[CardStateLogs]',
        'fraud_detection_logs': 'list[FraudDetectionLogs]',
        'installment_plan_audit_logs': 'list[InstallmentPlanAuditLogs]',
        'installment_plans': 'list[InstallmentPlans]',
        'address_data': 'AddressData2',
        'encrypted_number': 'str',
        'dek': 'str',
        'masked_number': 'str',
        'card_holder_name': 'str',
        'bin_card_brand': 'CardBrand',
        'bin_card_type': 'CardType',
        'cvv': 'str',
        'bin': 'BinData',
        'country': 'Countries',
        'state': 'CountrySubdivisions'
    }

    attribute_map = {
        'id': 'Id',
        'kek_id': 'KekId',
        'bin_bin_number': 'BinBinNumber',
        'bin_issuing_country_iso_number': 'BinIssuingCountryIsoNumber',
        'bin_id': 'BinId',
        'expiration_month': 'ExpirationMonth',
        'expiration_year': 'ExpirationYear',
        'address_data_address_line': 'AddressDataAddressLine',
        'address_data_zip': 'AddressDataZip',
        'is_deleted': 'IsDeleted',
        'version': 'Version',
        'pis_member_unique_id': 'PisMemberUniqueId',
        'pis_member_id': 'PisMemberId',
        'address_data_address_line2': 'AddressDataAddressLine2',
        'address_data_city': 'AddressDataCity',
        'address_data_country_id': 'AddressDataCountryId',
        'address_data_state_id': 'AddressDataStateId',
        'address_data_legacy_full_address_line': 'AddressDataLegacyFullAddressLine',
        'bin_is_prepaid': 'BinIsPrepaid',
        'token': 'Token',
        'kek': 'Kek',
        'card_class': 'CardClass',
        'product_id': 'ProductId',
        'issuer_bank_name': 'IssuerBankName',
        'dek_data_id': 'DekDataId',
        'dek_data': 'DekData',
        'pis_member': 'PisMember',
        'account_updater_pending_cards': 'AccountUpdaterPendingCards',
        'card_state_logs': 'CardStateLogs',
        'fraud_detection_logs': 'FraudDetectionLogs',
        'installment_plan_audit_logs': 'InstallmentPlanAuditLogs',
        'installment_plans': 'InstallmentPlans',
        'address_data': 'AddressData',
        'encrypted_number': 'EncryptedNumber',
        'dek': 'Dek',
        'masked_number': 'MaskedNumber',
        'card_holder_name': 'CardHolderName',
        'bin_card_brand': 'BinCardBrand',
        'bin_card_type': 'BinCardType',
        'cvv': 'Cvv',
        'bin': 'Bin',
        'country': 'Country',
        'state': 'State'
    }

    def __init__(self, id=None, kek_id=None, bin_bin_number=None, bin_issuing_country_iso_number=None, bin_id=None, expiration_month=None, expiration_year=None, address_data_address_line=None, address_data_zip=None, is_deleted=None, version=None, pis_member_unique_id=None, pis_member_id=None, address_data_address_line2=None, address_data_city=None, address_data_country_id=None, address_data_state_id=None, address_data_legacy_full_address_line=None, bin_is_prepaid=None, token=None, kek=None, card_class=None, product_id=None, issuer_bank_name=None, dek_data_id=None, dek_data=None, pis_member=None, account_updater_pending_cards=None, card_state_logs=None, fraud_detection_logs=None, installment_plan_audit_logs=None, installment_plans=None, address_data=None, encrypted_number=None, dek=None, masked_number=None, card_holder_name=None, bin_card_brand=None, bin_card_type=None, cvv=None, bin=None, country=None, state=None):  # noqa: E501
        """Cards - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._kek_id = None
        self._bin_bin_number = None
        self._bin_issuing_country_iso_number = None
        self._bin_id = None
        self._expiration_month = None
        self._expiration_year = None
        self._address_data_address_line = None
        self._address_data_zip = None
        self._is_deleted = None
        self._version = None
        self._pis_member_unique_id = None
        self._pis_member_id = None
        self._address_data_address_line2 = None
        self._address_data_city = None
        self._address_data_country_id = None
        self._address_data_state_id = None
        self._address_data_legacy_full_address_line = None
        self._bin_is_prepaid = None
        self._token = None
        self._kek = None
        self._card_class = None
        self._product_id = None
        self._issuer_bank_name = None
        self._dek_data_id = None
        self._dek_data = None
        self._pis_member = None
        self._account_updater_pending_cards = None
        self._card_state_logs = None
        self._fraud_detection_logs = None
        self._installment_plan_audit_logs = None
        self._installment_plans = None
        self._address_data = None
        self._encrypted_number = None
        self._dek = None
        self._masked_number = None
        self._card_holder_name = None
        self._bin_card_brand = None
        self._bin_card_type = None
        self._cvv = None
        self._bin = None
        self._country = None
        self._state = None
        self.discriminator = None

        self._id = id
        self._kek_id = kek_id
        if bin_bin_number is not None:
            self._bin_bin_number = bin_bin_number
        if bin_issuing_country_iso_number is not None:
            self._bin_issuing_country_iso_number = bin_issuing_country_iso_number
        self._bin_id = bin_id
        self._expiration_month = expiration_month
        self._expiration_year = expiration_year
        if address_data_address_line is not None:
            self._address_data_address_line = address_data_address_line
        if address_data_zip is not None:
            self._address_data_zip = address_data_zip
        self._is_deleted = is_deleted
        self._version = version
        if pis_member_unique_id is not None:
            self._pis_member_unique_id = pis_member_unique_id
        if pis_member_id is not None:
            self._pis_member_id = pis_member_id
        if address_data_address_line2 is not None:
            self._address_data_address_line2 = address_data_address_line2
        if address_data_city is not None:
            self._address_data_city = address_data_city
        if address_data_country_id is not None:
            self._address_data_country_id = address_data_country_id
        if address_data_state_id is not None:
            self._address_data_state_id = address_data_state_id
        if address_data_legacy_full_address_line is not None:
            self._address_data_legacy_full_address_line = address_data_legacy_full_address_line
        if bin_is_prepaid is not None:
            self._bin_is_prepaid = bin_is_prepaid
        if token is not None:
            self._token = token
        if kek is not None:
            self._kek = kek
        if card_class is not None:
            self._card_class = card_class
        if product_id is not None:
            self._product_id = product_id
        if issuer_bank_name is not None:
            self._issuer_bank_name = issuer_bank_name
        if dek_data_id is not None:
            self._dek_data_id = dek_data_id
        if dek_data is not None:
            self._dek_data = dek_data
        if pis_member is not None:
            self._pis_member = pis_member
        if account_updater_pending_cards is not None:
            self._account_updater_pending_cards = account_updater_pending_cards
        if card_state_logs is not None:
            self._card_state_logs = card_state_logs
        if fraud_detection_logs is not None:
            self._fraud_detection_logs = fraud_detection_logs
        if installment_plan_audit_logs is not None:
            self._installment_plan_audit_logs = installment_plan_audit_logs
        if installment_plans is not None:
            self._installment_plans = installment_plans
        if address_data is not None:
            self._address_data = address_data
        if encrypted_number is not None:
            self._encrypted_number = encrypted_number
        if dek is not None:
            self._dek = dek
        if masked_number is not None:
            self._masked_number = masked_number
        if card_holder_name is not None:
            self._card_holder_name = card_holder_name
        self._bin_card_brand = bin_card_brand
        self._bin_card_type = bin_card_type
        if cvv is not None:
            self._cvv = cvv
        if bin is not None:
            self._bin = bin
        if country is not None:
            self._country = country
        if state is not None:
            self._state = state

    @property
    def id(self):
        """Gets the id of this Cards.  # noqa: E501


        :return: The id of this Cards.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Cards.


        :param id: The id of this Cards.  # noqa: E501
        :type: int
        """
        
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def kek_id(self):
        """Gets the kek_id of this Cards.  # noqa: E501


        :return: The kek_id of this Cards.  # noqa: E501
        :rtype: int
        """
        return self._kek_id

    @kek_id.setter
    def kek_id(self, kek_id):
        """Sets the kek_id of this Cards.


        :param kek_id: The kek_id of this Cards.  # noqa: E501
        :type: int
        """
        
        if kek_id is None:
            raise ValueError("Invalid value for `kek_id`, must not be `None`")  # noqa: E501

        self._kek_id = kek_id

    @property
    def bin_bin_number(self):
        """Gets the bin_bin_number of this Cards.  # noqa: E501


        :return: The bin_bin_number of this Cards.  # noqa: E501
        :rtype: str
        """
        return self._bin_bin_number

    @bin_bin_number.setter
    def bin_bin_number(self, bin_bin_number):
        """Sets the bin_bin_number of this Cards.


        :param bin_bin_number: The bin_bin_number of this Cards.  # noqa: E501
        :type: str
        """

        self._bin_bin_number = bin_bin_number

    @property
    def bin_issuing_country_iso_number(self):
        """Gets the bin_issuing_country_iso_number of this Cards.  # noqa: E501


        :return: The bin_issuing_country_iso_number of this Cards.  # noqa: E501
        :rtype: str
        """
        return self._bin_issuing_country_iso_number

    @bin_issuing_country_iso_number.setter
    def bin_issuing_country_iso_number(self, bin_issuing_country_iso_number):
        """Sets the bin_issuing_country_iso_number of this Cards.


        :param bin_issuing_country_iso_number: The bin_issuing_country_iso_number of this Cards.  # noqa: E501
        :type: str
        """

        self._bin_issuing_country_iso_number = bin_issuing_country_iso_number

    @property
    def bin_id(self):
        """Gets the bin_id of this Cards.  # noqa: E501


        :return: The bin_id of this Cards.  # noqa: E501
        :rtype: int
        """
        return self._bin_id

    @bin_id.setter
    def bin_id(self, bin_id):
        """Sets the bin_id of this Cards.


        :param bin_id: The bin_id of this Cards.  # noqa: E501
        :type: int
        """
        
        if bin_id is None:
            raise ValueError("Invalid value for `bin_id`, must not be `None`")  # noqa: E501

        self._bin_id = bin_id

    @property
    def expiration_month(self):
        """Gets the expiration_month of this Cards.  # noqa: E501


        :return: The expiration_month of this Cards.  # noqa: E501
        :rtype: int
        """
        return self._expiration_month

    @expiration_month.setter
    def expiration_month(self, expiration_month):
        """Sets the expiration_month of this Cards.


        :param expiration_month: The expiration_month of this Cards.  # noqa: E501
        :type: int
        """
        
        if expiration_month is None:
            raise ValueError("Invalid value for `expiration_month`, must not be `None`")  # noqa: E501

        self._expiration_month = expiration_month

    @property
    def expiration_year(self):
        """Gets the expiration_year of this Cards.  # noqa: E501


        :return: The expiration_year of this Cards.  # noqa: E501
        :rtype: int
        """
        return self._expiration_year

    @expiration_year.setter
    def expiration_year(self, expiration_year):
        """Sets the expiration_year of this Cards.


        :param expiration_year: The expiration_year of this Cards.  # noqa: E501
        :type: int
        """
        
        if expiration_year is None:
            raise ValueError("Invalid value for `expiration_year`, must not be `None`")  # noqa: E501

        self._expiration_year = expiration_year

    @property
    def address_data_address_line(self):
        """Gets the address_data_address_line of this Cards.  # noqa: E501


        :return: The address_data_address_line of this Cards.  # noqa: E501
        :rtype: str
        """
        return self._address_data_address_line

    @address_data_address_line.setter
    def address_data_address_line(self, address_data_address_line):
        """Sets the address_data_address_line of this Cards.


        :param address_data_address_line: The address_data_address_line of this Cards.  # noqa: E501
        :type: str
        """

        self._address_data_address_line = address_data_address_line

    @property
    def address_data_zip(self):
        """Gets the address_data_zip of this Cards.  # noqa: E501


        :return: The address_data_zip of this Cards.  # noqa: E501
        :rtype: str
        """
        return self._address_data_zip

    @address_data_zip.setter
    def address_data_zip(self, address_data_zip):
        """Sets the address_data_zip of this Cards.


        :param address_data_zip: The address_data_zip of this Cards.  # noqa: E501
        :type: str
        """

        self._address_data_zip = address_data_zip

    @property
    def is_deleted(self):
        """Gets the is_deleted of this Cards.  # noqa: E501


        :return: The is_deleted of this Cards.  # noqa: E501
        :rtype: bool
        """
        return self._is_deleted

    @is_deleted.setter
    def is_deleted(self, is_deleted):
        """Sets the is_deleted of this Cards.


        :param is_deleted: The is_deleted of this Cards.  # noqa: E501
        :type: bool
        """
        is_deleted = bool(is_deleted)
        if is_deleted is None:
            raise ValueError("Invalid value for `is_deleted`, must not be `None`")  # noqa: E501

        self._is_deleted = is_deleted

    @property
    def version(self):
        """Gets the version of this Cards.  # noqa: E501


        :return: The version of this Cards.  # noqa: E501
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this Cards.


        :param version: The version of this Cards.  # noqa: E501
        :type: int
        """
        
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")  # noqa: E501

        self._version = version

    @property
    def pis_member_unique_id(self):
        """Gets the pis_member_unique_id of this Cards.  # noqa: E501


        :return: The pis_member_unique_id of this Cards.  # noqa: E501
        :rtype: str
        """
        return self._pis_member_unique_id

    @pis_member_unique_id.setter
    def pis_member_unique_id(self, pis_member_unique_id):
        """Sets the pis_member_unique_id of this Cards.


        :param pis_member_unique_id: The pis_member_unique_id of this Cards.  # noqa: E501
        :type: str
        """

        self._pis_member_unique_id = pis_member_unique_id

    @property
    def pis_member_id(self):
        """Gets the pis_member_id of this Cards.  # noqa: E501


        :return: The pis_member_id of this Cards.  # noqa: E501
        :rtype: int
        """
        return self._pis_member_id

    @pis_member_id.setter
    def pis_member_id(self, pis_member_id):
        """Sets the pis_member_id of this Cards.


        :param pis_member_id: The pis_member_id of this Cards.  # noqa: E501
        :type: int
        """

        self._pis_member_id = pis_member_id

    @property
    def address_data_address_line2(self):
        """Gets the address_data_address_line2 of this Cards.  # noqa: E501


        :return: The address_data_address_line2 of this Cards.  # noqa: E501
        :rtype: str
        """
        return self._address_data_address_line2

    @address_data_address_line2.setter
    def address_data_address_line2(self, address_data_address_line2):
        """Sets the address_data_address_line2 of this Cards.


        :param address_data_address_line2: The address_data_address_line2 of this Cards.  # noqa: E501
        :type: str
        """

        self._address_data_address_line2 = address_data_address_line2

    @property
    def address_data_city(self):
        """Gets the address_data_city of this Cards.  # noqa: E501


        :return: The address_data_city of this Cards.  # noqa: E501
        :rtype: str
        """
        return self._address_data_city

    @address_data_city.setter
    def address_data_city(self, address_data_city):
        """Sets the address_data_city of this Cards.


        :param address_data_city: The address_data_city of this Cards.  # noqa: E501
        :type: str
        """

        self._address_data_city = address_data_city

    @property
    def address_data_country_id(self):
        """Gets the address_data_country_id of this Cards.  # noqa: E501


        :return: The address_data_country_id of this Cards.  # noqa: E501
        :rtype: int
        """
        return self._address_data_country_id

    @address_data_country_id.setter
    def address_data_country_id(self, address_data_country_id):
        """Sets the address_data_country_id of this Cards.


        :param address_data_country_id: The address_data_country_id of this Cards.  # noqa: E501
        :type: int
        """

        self._address_data_country_id = address_data_country_id

    @property
    def address_data_state_id(self):
        """Gets the address_data_state_id of this Cards.  # noqa: E501


        :return: The address_data_state_id of this Cards.  # noqa: E501
        :rtype: int
        """
        return self._address_data_state_id

    @address_data_state_id.setter
    def address_data_state_id(self, address_data_state_id):
        """Sets the address_data_state_id of this Cards.


        :param address_data_state_id: The address_data_state_id of this Cards.  # noqa: E501
        :type: int
        """

        self._address_data_state_id = address_data_state_id

    @property
    def address_data_legacy_full_address_line(self):
        """Gets the address_data_legacy_full_address_line of this Cards.  # noqa: E501


        :return: The address_data_legacy_full_address_line of this Cards.  # noqa: E501
        :rtype: str
        """
        return self._address_data_legacy_full_address_line

    @address_data_legacy_full_address_line.setter
    def address_data_legacy_full_address_line(self, address_data_legacy_full_address_line):
        """Sets the address_data_legacy_full_address_line of this Cards.


        :param address_data_legacy_full_address_line: The address_data_legacy_full_address_line of this Cards.  # noqa: E501
        :type: str
        """

        self._address_data_legacy_full_address_line = address_data_legacy_full_address_line

    @property
    def bin_is_prepaid(self):
        """Gets the bin_is_prepaid of this Cards.  # noqa: E501


        :return: The bin_is_prepaid of this Cards.  # noqa: E501
        :rtype: bool
        """
        return self._bin_is_prepaid

    @bin_is_prepaid.setter
    def bin_is_prepaid(self, bin_is_prepaid):
        """Sets the bin_is_prepaid of this Cards.


        :param bin_is_prepaid: The bin_is_prepaid of this Cards.  # noqa: E501
        :type: bool
        """

        self._bin_is_prepaid = bin_is_prepaid

    @property
    def token(self):
        """Gets the token of this Cards.  # noqa: E501


        :return: The token of this Cards.  # noqa: E501
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this Cards.


        :param token: The token of this Cards.  # noqa: E501
        :type: str
        """

        self._token = token

    @property
    def kek(self):
        """Gets the kek of this Cards.  # noqa: E501


        :return: The kek of this Cards.  # noqa: E501
        :rtype: Keks
        """
        return self._kek

    @kek.setter
    def kek(self, kek):
        """Sets the kek of this Cards.


        :param kek: The kek of this Cards.  # noqa: E501
        :type: Keks
        """

        self._kek = kek

    @property
    def card_class(self):
        """Gets the card_class of this Cards.  # noqa: E501


        :return: The card_class of this Cards.  # noqa: E501
        :rtype: str
        """
        return self._card_class

    @card_class.setter
    def card_class(self, card_class):
        """Sets the card_class of this Cards.


        :param card_class: The card_class of this Cards.  # noqa: E501
        :type: str
        """

        self._card_class = card_class

    @property
    def product_id(self):
        """Gets the product_id of this Cards.  # noqa: E501


        :return: The product_id of this Cards.  # noqa: E501
        :rtype: str
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """Sets the product_id of this Cards.


        :param product_id: The product_id of this Cards.  # noqa: E501
        :type: str
        """

        self._product_id = product_id

    @property
    def issuer_bank_name(self):
        """Gets the issuer_bank_name of this Cards.  # noqa: E501


        :return: The issuer_bank_name of this Cards.  # noqa: E501
        :rtype: str
        """
        return self._issuer_bank_name

    @issuer_bank_name.setter
    def issuer_bank_name(self, issuer_bank_name):
        """Sets the issuer_bank_name of this Cards.


        :param issuer_bank_name: The issuer_bank_name of this Cards.  # noqa: E501
        :type: str
        """

        self._issuer_bank_name = issuer_bank_name

    @property
    def dek_data_id(self):
        """Gets the dek_data_id of this Cards.  # noqa: E501


        :return: The dek_data_id of this Cards.  # noqa: E501
        :rtype: int
        """
        return self._dek_data_id

    @dek_data_id.setter
    def dek_data_id(self, dek_data_id):
        """Sets the dek_data_id of this Cards.


        :param dek_data_id: The dek_data_id of this Cards.  # noqa: E501
        :type: int
        """

        self._dek_data_id = dek_data_id

    @property
    def dek_data(self):
        """Gets the dek_data of this Cards.  # noqa: E501


        :return: The dek_data of this Cards.  # noqa: E501
        :rtype: DEKData
        """
        return self._dek_data

    @dek_data.setter
    def dek_data(self, dek_data):
        """Sets the dek_data of this Cards.


        :param dek_data: The dek_data of this Cards.  # noqa: E501
        :type: DEKData
        """

        self._dek_data = dek_data

    @property
    def pis_member(self):
        """Gets the pis_member of this Cards.  # noqa: E501


        :return: The pis_member of this Cards.  # noqa: E501
        :rtype: object
        """
        return self._pis_member

    @pis_member.setter
    def pis_member(self, pis_member):
        """Sets the pis_member of this Cards.


        :param pis_member: The pis_member of this Cards.  # noqa: E501
        :type: object
        """

        self._pis_member = pis_member

    @property
    def account_updater_pending_cards(self):
        """Gets the account_updater_pending_cards of this Cards.  # noqa: E501


        :return: The account_updater_pending_cards of this Cards.  # noqa: E501
        :rtype: list[AccountUpdaterPendingCards]
        """
        return self._account_updater_pending_cards

    @account_updater_pending_cards.setter
    def account_updater_pending_cards(self, account_updater_pending_cards):
        """Sets the account_updater_pending_cards of this Cards.


        :param account_updater_pending_cards: The account_updater_pending_cards of this Cards.  # noqa: E501
        :type: list[AccountUpdaterPendingCards]
        """

        self._account_updater_pending_cards = account_updater_pending_cards

    @property
    def card_state_logs(self):
        """Gets the card_state_logs of this Cards.  # noqa: E501


        :return: The card_state_logs of this Cards.  # noqa: E501
        :rtype: list[CardStateLogs]
        """
        return self._card_state_logs

    @card_state_logs.setter
    def card_state_logs(self, card_state_logs):
        """Sets the card_state_logs of this Cards.


        :param card_state_logs: The card_state_logs of this Cards.  # noqa: E501
        :type: list[CardStateLogs]
        """

        self._card_state_logs = card_state_logs

    @property
    def fraud_detection_logs(self):
        """Gets the fraud_detection_logs of this Cards.  # noqa: E501


        :return: The fraud_detection_logs of this Cards.  # noqa: E501
        :rtype: list[FraudDetectionLogs]
        """
        return self._fraud_detection_logs

    @fraud_detection_logs.setter
    def fraud_detection_logs(self, fraud_detection_logs):
        """Sets the fraud_detection_logs of this Cards.


        :param fraud_detection_logs: The fraud_detection_logs of this Cards.  # noqa: E501
        :type: list[FraudDetectionLogs]
        """

        self._fraud_detection_logs = fraud_detection_logs

    @property
    def installment_plan_audit_logs(self):
        """Gets the installment_plan_audit_logs of this Cards.  # noqa: E501


        :return: The installment_plan_audit_logs of this Cards.  # noqa: E501
        :rtype: list[InstallmentPlanAuditLogs]
        """
        return self._installment_plan_audit_logs

    @installment_plan_audit_logs.setter
    def installment_plan_audit_logs(self, installment_plan_audit_logs):
        """Sets the installment_plan_audit_logs of this Cards.


        :param installment_plan_audit_logs: The installment_plan_audit_logs of this Cards.  # noqa: E501
        :type: list[InstallmentPlanAuditLogs]
        """

        self._installment_plan_audit_logs = installment_plan_audit_logs

    @property
    def installment_plans(self):
        """Gets the installment_plans of this Cards.  # noqa: E501


        :return: The installment_plans of this Cards.  # noqa: E501
        :rtype: list[InstallmentPlans]
        """
        return self._installment_plans

    @installment_plans.setter
    def installment_plans(self, installment_plans):
        """Sets the installment_plans of this Cards.


        :param installment_plans: The installment_plans of this Cards.  # noqa: E501
        :type: list[InstallmentPlans]
        """

        self._installment_plans = installment_plans

    @property
    def address_data(self):
        """Gets the address_data of this Cards.  # noqa: E501


        :return: The address_data of this Cards.  # noqa: E501
        :rtype: AddressData2
        """
        return self._address_data

    @address_data.setter
    def address_data(self, address_data):
        """Sets the address_data of this Cards.


        :param address_data: The address_data of this Cards.  # noqa: E501
        :type: AddressData2
        """

        self._address_data = address_data

    @property
    def encrypted_number(self):
        """Gets the encrypted_number of this Cards.  # noqa: E501


        :return: The encrypted_number of this Cards.  # noqa: E501
        :rtype: str
        """
        return self._encrypted_number

    @encrypted_number.setter
    def encrypted_number(self, encrypted_number):
        """Sets the encrypted_number of this Cards.


        :param encrypted_number: The encrypted_number of this Cards.  # noqa: E501
        :type: str
        """

        self._encrypted_number = encrypted_number

    @property
    def dek(self):
        """Gets the dek of this Cards.  # noqa: E501


        :return: The dek of this Cards.  # noqa: E501
        :rtype: str
        """
        return self._dek

    @dek.setter
    def dek(self, dek):
        """Sets the dek of this Cards.


        :param dek: The dek of this Cards.  # noqa: E501
        :type: str
        """

        self._dek = dek

    @property
    def masked_number(self):
        """Gets the masked_number of this Cards.  # noqa: E501


        :return: The masked_number of this Cards.  # noqa: E501
        :rtype: str
        """
        return self._masked_number

    @masked_number.setter
    def masked_number(self, masked_number):
        """Sets the masked_number of this Cards.


        :param masked_number: The masked_number of this Cards.  # noqa: E501
        :type: str
        """

        self._masked_number = masked_number

    @property
    def card_holder_name(self):
        """Gets the card_holder_name of this Cards.  # noqa: E501


        :return: The card_holder_name of this Cards.  # noqa: E501
        :rtype: str
        """
        return self._card_holder_name

    @card_holder_name.setter
    def card_holder_name(self, card_holder_name):
        """Sets the card_holder_name of this Cards.


        :param card_holder_name: The card_holder_name of this Cards.  # noqa: E501
        :type: str
        """

        self._card_holder_name = card_holder_name

    @property
    def bin_card_brand(self):
        """Gets the bin_card_brand of this Cards.  # noqa: E501


        :return: The bin_card_brand of this Cards.  # noqa: E501
        :rtype: CardBrand
        """
        return self._bin_card_brand

    @bin_card_brand.setter
    def bin_card_brand(self, bin_card_brand):
        """Sets the bin_card_brand of this Cards.


        :param bin_card_brand: The bin_card_brand of this Cards.  # noqa: E501
        :type: CardBrand
        """
        
        if bin_card_brand is None:
            raise ValueError("Invalid value for `bin_card_brand`, must not be `None`")  # noqa: E501

        self._bin_card_brand = bin_card_brand

    @property
    def bin_card_type(self):
        """Gets the bin_card_type of this Cards.  # noqa: E501


        :return: The bin_card_type of this Cards.  # noqa: E501
        :rtype: CardType
        """
        return self._bin_card_type

    @bin_card_type.setter
    def bin_card_type(self, bin_card_type):
        """Sets the bin_card_type of this Cards.


        :param bin_card_type: The bin_card_type of this Cards.  # noqa: E501
        :type: CardType
        """
        
        if bin_card_type is None:
            raise ValueError("Invalid value for `bin_card_type`, must not be `None`")  # noqa: E501

        self._bin_card_type = bin_card_type

    @property
    def cvv(self):
        """Gets the cvv of this Cards.  # noqa: E501


        :return: The cvv of this Cards.  # noqa: E501
        :rtype: str
        """
        return self._cvv

    @cvv.setter
    def cvv(self, cvv):
        """Sets the cvv of this Cards.


        :param cvv: The cvv of this Cards.  # noqa: E501
        :type: str
        """

        self._cvv = cvv

    @property
    def bin(self):
        """Gets the bin of this Cards.  # noqa: E501


        :return: The bin of this Cards.  # noqa: E501
        :rtype: BinData
        """
        return self._bin

    @bin.setter
    def bin(self, bin):
        """Sets the bin of this Cards.


        :param bin: The bin of this Cards.  # noqa: E501
        :type: BinData
        """

        self._bin = bin

    @property
    def country(self):
        """Gets the country of this Cards.  # noqa: E501


        :return: The country of this Cards.  # noqa: E501
        :rtype: Countries
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this Cards.


        :param country: The country of this Cards.  # noqa: E501
        :type: Countries
        """

        self._country = country

    @property
    def state(self):
        """Gets the state of this Cards.  # noqa: E501


        :return: The state of this Cards.  # noqa: E501
        :rtype: CountrySubdivisions
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Cards.


        :param state: The state of this Cards.  # noqa: E501
        :type: CountrySubdivisions
        """

        self._state = state

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Cards, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Cards):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
