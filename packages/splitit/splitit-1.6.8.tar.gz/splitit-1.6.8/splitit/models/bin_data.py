# coding: utf-8

"""
    splitit-web-api-public-sdk

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class BinData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'bin_number': 'str',
        'card_brand': 'CardBrand',
        'issuing_country_iso_number': 'str',
        'card_type': 'CardType',
        'is_prepaid': 'bool',
        'card_class': 'str',
        'product_id': 'str',
        'issuer_bank_name': 'str'
    }

    attribute_map = {
        'bin_number': 'BinNumber',
        'card_brand': 'CardBrand',
        'issuing_country_iso_number': 'IssuingCountryIsoNumber',
        'card_type': 'CardType',
        'is_prepaid': 'IsPrepaid',
        'card_class': 'CardClass',
        'product_id': 'ProductId',
        'issuer_bank_name': 'IssuerBankName'
    }

    def __init__(self, bin_number=None, card_brand=None, issuing_country_iso_number=None, card_type=None, is_prepaid=None, card_class=None, product_id=None, issuer_bank_name=None):  # noqa: E501
        """BinData - a model defined in Swagger"""  # noqa: E501

        self._bin_number = None
        self._card_brand = None
        self._issuing_country_iso_number = None
        self._card_type = None
        self._is_prepaid = None
        self._card_class = None
        self._product_id = None
        self._issuer_bank_name = None
        self.discriminator = None

        if bin_number is not None:
            self._bin_number = bin_number
        self._card_brand = card_brand
        if issuing_country_iso_number is not None:
            self._issuing_country_iso_number = issuing_country_iso_number
        self._card_type = card_type
        self._is_prepaid = is_prepaid
        if card_class is not None:
            self._card_class = card_class
        if product_id is not None:
            self._product_id = product_id
        if issuer_bank_name is not None:
            self._issuer_bank_name = issuer_bank_name

    @property
    def bin_number(self):
        """Gets the bin_number of this BinData.  # noqa: E501


        :return: The bin_number of this BinData.  # noqa: E501
        :rtype: str
        """
        return self._bin_number

    @bin_number.setter
    def bin_number(self, bin_number):
        """Sets the bin_number of this BinData.


        :param bin_number: The bin_number of this BinData.  # noqa: E501
        :type: str
        """

        self._bin_number = bin_number

    @property
    def card_brand(self):
        """Gets the card_brand of this BinData.  # noqa: E501


        :return: The card_brand of this BinData.  # noqa: E501
        :rtype: CardBrand
        """
        return self._card_brand

    @card_brand.setter
    def card_brand(self, card_brand):
        """Sets the card_brand of this BinData.


        :param card_brand: The card_brand of this BinData.  # noqa: E501
        :type: CardBrand
        """
        
        if card_brand is None:
            raise ValueError("Invalid value for `card_brand`, must not be `None`")  # noqa: E501

        self._card_brand = card_brand

    @property
    def issuing_country_iso_number(self):
        """Gets the issuing_country_iso_number of this BinData.  # noqa: E501


        :return: The issuing_country_iso_number of this BinData.  # noqa: E501
        :rtype: str
        """
        return self._issuing_country_iso_number

    @issuing_country_iso_number.setter
    def issuing_country_iso_number(self, issuing_country_iso_number):
        """Sets the issuing_country_iso_number of this BinData.


        :param issuing_country_iso_number: The issuing_country_iso_number of this BinData.  # noqa: E501
        :type: str
        """

        self._issuing_country_iso_number = issuing_country_iso_number

    @property
    def card_type(self):
        """Gets the card_type of this BinData.  # noqa: E501


        :return: The card_type of this BinData.  # noqa: E501
        :rtype: CardType
        """
        return self._card_type

    @card_type.setter
    def card_type(self, card_type):
        """Sets the card_type of this BinData.


        :param card_type: The card_type of this BinData.  # noqa: E501
        :type: CardType
        """
        
        if card_type is None:
            raise ValueError("Invalid value for `card_type`, must not be `None`")  # noqa: E501

        self._card_type = card_type

    @property
    def is_prepaid(self):
        """Gets the is_prepaid of this BinData.  # noqa: E501


        :return: The is_prepaid of this BinData.  # noqa: E501
        :rtype: bool
        """
        return self._is_prepaid

    @is_prepaid.setter
    def is_prepaid(self, is_prepaid):
        """Sets the is_prepaid of this BinData.


        :param is_prepaid: The is_prepaid of this BinData.  # noqa: E501
        :type: bool
        """
        is_prepaid = bool(is_prepaid)
        if is_prepaid is None:
            raise ValueError("Invalid value for `is_prepaid`, must not be `None`")  # noqa: E501

        self._is_prepaid = is_prepaid

    @property
    def card_class(self):
        """Gets the card_class of this BinData.  # noqa: E501


        :return: The card_class of this BinData.  # noqa: E501
        :rtype: str
        """
        return self._card_class

    @card_class.setter
    def card_class(self, card_class):
        """Sets the card_class of this BinData.


        :param card_class: The card_class of this BinData.  # noqa: E501
        :type: str
        """

        self._card_class = card_class

    @property
    def product_id(self):
        """Gets the product_id of this BinData.  # noqa: E501


        :return: The product_id of this BinData.  # noqa: E501
        :rtype: str
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """Sets the product_id of this BinData.


        :param product_id: The product_id of this BinData.  # noqa: E501
        :type: str
        """

        self._product_id = product_id

    @property
    def issuer_bank_name(self):
        """Gets the issuer_bank_name of this BinData.  # noqa: E501


        :return: The issuer_bank_name of this BinData.  # noqa: E501
        :rtype: str
        """
        return self._issuer_bank_name

    @issuer_bank_name.setter
    def issuer_bank_name(self, issuer_bank_name):
        """Sets the issuer_bank_name of this BinData.


        :param issuer_bank_name: The issuer_bank_name of this BinData.  # noqa: E501
        :type: str
        """

        self._issuer_bank_name = issuer_bank_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BinData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BinData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
