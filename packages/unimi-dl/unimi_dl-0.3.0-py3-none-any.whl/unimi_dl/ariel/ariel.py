# Copyright (C) 2021 Alessandro Clerici Lorenzini and Zhifan Chen.
#
# This file is part of unimi-dl.
#
# unimi-dl is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# unimi-dl is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with unimi-dl.  If not, see <https://www.gnu.org/licenses/>.


from __future__ import annotations
from unimi_dl.downloader.interface_downloader import Downloader as DownloaderInterface
from os import path
from sys import stdout
import logging
import re
import requests
import youtube_dl


class ArielDownloader(DownloaderInterface):
    def __init__(self, email: str, password: str, stdout_loglevel: int) -> None:
        self.logger = logging.getLogger("ariel")
        stdout_handler = logging.StreamHandler(stdout)
        stdout_handler.setLevel(stdout_loglevel)
        self.logger.addHandler(stdout_handler)
        super().__init__(email, password)

    def get_videos_page(self, url: str) -> str:
        with requests.Session() as s:
            login_url = 'https://elearning.unimi.it/authentication/skin/portaleariel/login.aspx?url=https://ariel.unimi.it/'

            # login
            payload = {'hdnSilent': 'true'}
            payload['tbLogin'] = self.email
            payload['tbPassword'] = self.password

            self.logger.info("Logging in")
            s.post(login_url, data=payload)
            return s.get(url).text

    def get_videos(self, url: str) -> list[str]:
        self.logger.info("Looking for manifests")
        manifest_regex = re.compile(r"https://.*/manifest\.m3u8")
        match = manifest_regex.findall(self.get_videos_page(url))
        return match

    def download(self, url: str, dst: str) -> None:
        """ Downloads the file associated with {manifest_url} in {dst_dir}/{filename}
            Filename is autogenerated by removing prefix and suffix from {manifest_url}
            Look at the code for more informations about the prefix and suffix removed."""
        _, _, filename = url.partition(
            "https://videolectures.unimi.it/vod/mp4:")
        filename, _, _ = filename.rpartition("/manifest.m3u8")
        #  filename = url.removeprefix("https://videolectures.unimi.it/vod/mp4:")   // python >= 3.9
        #  filename = filename.removesuffix("/manifest.m3u8")                       // python >= 3.9
        filename = filename.replace("%", "%%")  # escaping % for youtube-dl
        filename = path.join(dst, filename)
        self.logger.info(f"Downloading {url} as {filename}")

        ydl_opts = {
            "v": "true",
            "nocheckcertificate": "true",
            "restrictfilenames": "true",
            "outtmpl": filename,
            "logger": logging.getLogger("youtube-dl")
        }
        with youtube_dl.YoutubeDL(ydl_opts) as ydl:
            ydl.download([url])
