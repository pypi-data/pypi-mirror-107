# coding: utf-8

"""
    splitit-web-api-public-sdk

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ConfigValues(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'value': 'str',
        'config_key_id': 'int',
        'touch_point_color_values_id': 'int',
        'config_key': 'ConfigKeys',
        'touch_point_color_values': 'TouchPointColorValues'
    }

    attribute_map = {
        'id': 'Id',
        'value': 'Value',
        'config_key_id': 'ConfigKeyId',
        'touch_point_color_values_id': 'TouchPointColorValuesId',
        'config_key': 'ConfigKey',
        'touch_point_color_values': 'TouchPointColorValues'
    }

    def __init__(self, id=None, value=None, config_key_id=None, touch_point_color_values_id=None, config_key=None, touch_point_color_values=None):  # noqa: E501
        """ConfigValues - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._value = None
        self._config_key_id = None
        self._touch_point_color_values_id = None
        self._config_key = None
        self._touch_point_color_values = None
        self.discriminator = None

        self._id = id
        if value is not None:
            self._value = value
        self._config_key_id = config_key_id
        if touch_point_color_values_id is not None:
            self._touch_point_color_values_id = touch_point_color_values_id
        if config_key is not None:
            self._config_key = config_key
        if touch_point_color_values is not None:
            self._touch_point_color_values = touch_point_color_values

    @property
    def id(self):
        """Gets the id of this ConfigValues.  # noqa: E501


        :return: The id of this ConfigValues.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ConfigValues.


        :param id: The id of this ConfigValues.  # noqa: E501
        :type: int
        """
        
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def value(self):
        """Gets the value of this ConfigValues.  # noqa: E501


        :return: The value of this ConfigValues.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this ConfigValues.


        :param value: The value of this ConfigValues.  # noqa: E501
        :type: str
        """

        self._value = value

    @property
    def config_key_id(self):
        """Gets the config_key_id of this ConfigValues.  # noqa: E501


        :return: The config_key_id of this ConfigValues.  # noqa: E501
        :rtype: int
        """
        return self._config_key_id

    @config_key_id.setter
    def config_key_id(self, config_key_id):
        """Sets the config_key_id of this ConfigValues.


        :param config_key_id: The config_key_id of this ConfigValues.  # noqa: E501
        :type: int
        """
        
        if config_key_id is None:
            raise ValueError("Invalid value for `config_key_id`, must not be `None`")  # noqa: E501

        self._config_key_id = config_key_id

    @property
    def touch_point_color_values_id(self):
        """Gets the touch_point_color_values_id of this ConfigValues.  # noqa: E501


        :return: The touch_point_color_values_id of this ConfigValues.  # noqa: E501
        :rtype: int
        """
        return self._touch_point_color_values_id

    @touch_point_color_values_id.setter
    def touch_point_color_values_id(self, touch_point_color_values_id):
        """Sets the touch_point_color_values_id of this ConfigValues.


        :param touch_point_color_values_id: The touch_point_color_values_id of this ConfigValues.  # noqa: E501
        :type: int
        """

        self._touch_point_color_values_id = touch_point_color_values_id

    @property
    def config_key(self):
        """Gets the config_key of this ConfigValues.  # noqa: E501


        :return: The config_key of this ConfigValues.  # noqa: E501
        :rtype: ConfigKeys
        """
        return self._config_key

    @config_key.setter
    def config_key(self, config_key):
        """Sets the config_key of this ConfigValues.


        :param config_key: The config_key of this ConfigValues.  # noqa: E501
        :type: ConfigKeys
        """

        self._config_key = config_key

    @property
    def touch_point_color_values(self):
        """Gets the touch_point_color_values of this ConfigValues.  # noqa: E501


        :return: The touch_point_color_values of this ConfigValues.  # noqa: E501
        :rtype: TouchPointColorValues
        """
        return self._touch_point_color_values

    @touch_point_color_values.setter
    def touch_point_color_values(self, touch_point_color_values):
        """Sets the touch_point_color_values of this ConfigValues.


        :param touch_point_color_values: The touch_point_color_values of this ConfigValues.  # noqa: E501
        :type: TouchPointColorValues
        """

        self._touch_point_color_values = touch_point_color_values

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigValues, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigValues):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
