# coding: utf-8

"""
    splitit-web-api-public-sdk

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DEKData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'ciphertext_blob': 'str',
        'is_active': 'bool',
        'dek_cards': 'list[Cards]'
    }

    attribute_map = {
        'id': 'Id',
        'ciphertext_blob': 'CiphertextBlob',
        'is_active': 'IsActive',
        'dek_cards': 'DekCards'
    }

    def __init__(self, id=None, ciphertext_blob=None, is_active=None, dek_cards=None):  # noqa: E501
        """DEKData - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._ciphertext_blob = None
        self._is_active = None
        self._dek_cards = None
        self.discriminator = None

        self._id = id
        if ciphertext_blob is not None:
            self._ciphertext_blob = ciphertext_blob
        self._is_active = is_active
        if dek_cards is not None:
            self._dek_cards = dek_cards

    @property
    def id(self):
        """Gets the id of this DEKData.  # noqa: E501


        :return: The id of this DEKData.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DEKData.


        :param id: The id of this DEKData.  # noqa: E501
        :type: int
        """
        
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def ciphertext_blob(self):
        """Gets the ciphertext_blob of this DEKData.  # noqa: E501


        :return: The ciphertext_blob of this DEKData.  # noqa: E501
        :rtype: str
        """
        return self._ciphertext_blob

    @ciphertext_blob.setter
    def ciphertext_blob(self, ciphertext_blob):
        """Sets the ciphertext_blob of this DEKData.


        :param ciphertext_blob: The ciphertext_blob of this DEKData.  # noqa: E501
        :type: str
        """

        self._ciphertext_blob = ciphertext_blob

    @property
    def is_active(self):
        """Gets the is_active of this DEKData.  # noqa: E501


        :return: The is_active of this DEKData.  # noqa: E501
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this DEKData.


        :param is_active: The is_active of this DEKData.  # noqa: E501
        :type: bool
        """
        is_active = bool(is_active)
        if is_active is None:
            raise ValueError("Invalid value for `is_active`, must not be `None`")  # noqa: E501

        self._is_active = is_active

    @property
    def dek_cards(self):
        """Gets the dek_cards of this DEKData.  # noqa: E501


        :return: The dek_cards of this DEKData.  # noqa: E501
        :rtype: list[Cards]
        """
        return self._dek_cards

    @dek_cards.setter
    def dek_cards(self, dek_cards):
        """Sets the dek_cards of this DEKData.


        :param dek_cards: The dek_cards of this DEKData.  # noqa: E501
        :type: list[Cards]
        """

        self._dek_cards = dek_cards

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DEKData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DEKData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
