# coding: utf-8

"""
    splitit-web-api-public-sdk

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class BusinessActivity(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    allowed enum values
    """
    INSTALLMENTPLANCREATE = "InstallmentPlanCreate"
    INSTALLMENTPLANUPDATE = "InstallmentPlanUpdate"
    INSTALLMENTPLANAPPROVE = "InstallmentPlanApprove"
    INSTALLMENTPLANDELETE = "InstallmentPlanDelete"
    INSTALLMENTPLANSTARTINSTALLMENTS = "InstallmentPlanStartInstallments"
    INSTALLMENTPLANUPDATEPAYMENTDATA = "InstallmentPlanUpdatePaymentData"
    INSTALLMENTPLANCANCEL = "InstallmentPlanCancel"
    INSTALLMENTPLANAUTHORIZE = "InstallmentPlanAuthorize"
    INSTALLMENTPLANCHARGE = "InstallmentPlanCharge"
    INSTALLMENTPLANGET = "InstallmentPlanGet"
    INSTALLMENTPLANSTOP = "InstallmentPlanStop"
    INSTALLMENTPLANRETRY = "InstallmentPlanRetry"
    INSTALLMENTPLANFULLCAPTURE = "InstallmentPlanFullCapture"
    CONSUMERSGET = "ConsumersGet"
    RECEIPTGET = "ReceiptGet"
    EXPOSEFULLCCNUMBER = "ExposeFullCcNumber"
    REQUESTAPPROVE = "RequestApprove"
    USERUPDATE = "UserUpdate"
    INSTALLMENTSUPDATE = "InstallmentsUpdate"
    REFUND = "Refund"
    CHANGEPASSWORD = "ChangePassword"
    RESETPASSWORD = "ResetPassword"
    GETUSERPROFILE = "GetUserProfile"
    GETRESOURCES = "GetResources"
    GETSUPPORTEDCULTURES = "GetSupportedCultures"
    MERCHANTSAVE = "MerchantSave"
    MERCHANTGET = "MerchantGet"
    INSTALLMENTPLANSENDEVENT = "InstallmentPlanSendEvent"
    BULKCARDSUPDATE = "BulkCardsUpdate"
    CARDSRETRIEVAL = "CardsRetrieval"
    SIMULATEINSTALLMENTPLANCREATE = "SimulateInstallmentPlanCreate"
    INSTALLMENTPLANHOLDCHARGES = "InstallmentPlanHoldCharges"
    INSTALLMENTPLANRELEASEHOLDCHARGES = "InstallmentPlanReleaseHoldCharges"
    TERMINALGET = "TerminalGet"
    INSTALLMENTPLANAUTORETRY = "InstallmentPlanAutoRetry"
    INSTALLMENTPLANINITIATE = "InstallmentPlanInitiate"
    GETVALIDNUMBEROFINSTALLMENTS = "GetValidNumberOfInstallments"
    GETINITIATEDINSTALLMENTPLAN = "GetInitiatedInstallmentPlan"
    GETTERMINALPAIRTOKEN = "GetTerminalPairToken"
    SAVEROLE = "SaveRole"
    SETROLEBUSINESSACTIVITIES = "SetRoleBusinessActivities"
    GATEWAYTRANSACTIONUPDATE = "GatewayTransactionUpdate"
    GATEWAYTRANSACTIONSGET = "GatewayTransactionsGet"
    TRANSFORMPLANTOFUNDED = "TransformPlanToFunded"
    TRANSFORMPLANTONONFUNDED = "TransformPlanToNonFunded"
    TERMSANDCONDITIONSGET = "TermsAndConditionsGet"
    RECALCULATEFEES = "ReCalculateFees"
    GATEWAYTRANSACTIONSTEST = "GatewayTransactionsTest"
    BINSAVE = "BinSave"
    MARKPLANFUNDINGTRANFERDONE = "MarkPlanFundingTranferDone"
    INSTALLMENTPLANMARKASTEST = "InstallmentPlanMarkAsTest"
    USERUNLOCK = "UserUnlock"
    GETUSERS = "GetUsers"
    GETSYSTEMEMAILS = "GetSystemEmails"
    INSTALLMENTPLANCHANGESTRATEGY = "InstallmentPlanChangeStrategy"
    INSTALLMENTPLANSPLITPAY = "InstallmentPlanSplitPay"
    GET3DSECUREPARAMETERS = "Get3DSecureParameters"
    FINALIZE3DSECURE = "Finalize3DSecure"
    EXECSTOREDPROCEDURE = "ExecStoredProcedure"
    GETJOBS = "GetJobs"
    ADDJOBDEFINITION = "AddJobDefinition"
    RUNJOB = "RunJob"
    SCHEDULEJOB = "ScheduleJob"
    CREATEUSER = "CreateUser"
    DELETEUSER = "DeleteUser"
    MARKPLANRESERVERETURNDONE = "MarkPlanReserveReturnDone"
    INSTALLMENTPLANSETDELAYRESOLUTION = "InstallmentPlanSetDelayResolution"
    INSTALLMENTPLANAPPROVEBANKTRANSFER = "InstallmentPlanApproveBankTransfer"
    GETAUDITLOG = "GetAuditLog"
    LOADTRANSLATION = "LoadTranslation"
    SETDATAPRIVACYRESTRICTION = "SetDataPrivacyRestriction"
    VERIFYPAYMENT = "VerifyPayment"
    INSTALLMENTPLANVERIFYPAID = "InstallmentPlanVerifyPaid"
    SETEMAILRULES = "SetEmailRules"
    SETMERCHANTEVENTSUBSCRIPTION = "SetMerchantEventSubscription"
    GETMERCHANTEVENTSUBSCRIPTIONS = "GetMerchantEventSubscriptions"
    GETRECONCILIATIONREPORT = "GetReconciliationReport"
    GETOUTSTANDINGAMOUNTSREPORT = "GetOutstandingAmountsReport"
    GETNEWPLANSREPORT = "GetNewPlansReport"
    UPDATETERMINAL = "UpdateTerminal"
    FINANCEFUNDING = "FinanceFunding"
    GETLENDERS = "GetLenders"
    INSTALLMENTPLANCHANGELENDER = "InstallmentPlanChangeLender"
    GETMERCHANTFUNDINGRULES = "GetMerchantFundingRules"
    FEERULEDATAGET = "FeeRuleDataGet"
    SAVEFEERULEDATA = "SaveFeeRuleData"
    GETMERCHANTSTATEMENTS = "GetMerchantStatements"
    CONFIRMMERCHANTSTATEMENTS = "ConfirmMerchantStatements"
    SAVEMERCHANTFUNDINGRULES = "SaveMerchantFundingRules"
    GETMERCHANTSETTINGS = "GetMerchantSettings"
    SAVEMERCHANTSETTINGS = "SaveMerchantSettings"
    INSTALLMENTPLANCAPTURE = "InstallmentPlanCapture"
    DELETEAGENTS = "DeleteAgents"
    GETAGENTS = "GetAgents"
    DELETEAPICREDENTIALS = "DeleteApiCredentials"
    GETAPICREDENTIALS = "GetApiCredentials"
    UNLOCKAPICREDENTIALS = "UnlockApiCredentials"
    SAVEAPICREDENTIALS = "SaveApiCredentials"
    INSTALLMENTPLANVOID = "InstallmentPlanVoid"
    CREATEBUSINESSUNIT = "CreateBusinessUnit"
    INSTALLMENTPLANREQUESTPAYMENT = "InstallmentPlanRequestPayment"
    CHARGEBACK = "Chargeback"
    VOIDAUTH = "VoidAuth"
    UPDATETERMINALPARAMETERS = "UpdateTerminalParameters"
    GETTOUCHPOINT = "GetTouchpoint"
    ONBOARDINGREGISTRATION = "OnBoardingRegistration"
    INSTALLMENTPLANINITIATEBYREFPLAN = "InstallmentPlanInitiateByRefPlan"
    CREATEPUBLICTOKEN = "CreatePublicToken"
    LEARNMOREDETAILS = "LearnMoreDetails"
    CREATEPAYFACBANKACCOUNT = "CreatePayfacBankAccount"
    GETINSTALLMENTSCHEDULES = "GetInstallmentSchedules"
    SAVEMERCHANTLENDERAGREEMENT = "SaveMerchantLenderAgreement"
    GETFRAUDSTATUSDISPLAY = "GetFraudStatusDisplay"
    SAVELENDER = "SaveLender"
    REFRESHFUTUREJOBS = "RefreshFutureJobs"
    TESTCARD = "TestCard"
    REQUESTUPDATECARD = "RequestUpdateCard"
    FORCEAUTHORIZEOUTSTANDINGAMOUNT = "ForceAuthorizeOutstandingAmount"
    SAVE3DSRESOURCES = "Save3DSResources"
    PRECHALLENGE3DS2 = "PreChallenge3DS2"
    GETPROCESSORS = "GetProcessors"
    UPDATEPROCESSORS = "UpdateProcessors"
    CREATEPROCESSORS = "CreateProcessors"
    DELETEPROCESSORS = "DeleteProcessors"
    REFUNDRECEIVED = "RefundReceived"
    REFUNDUPDATED = "RefundUpdated"
    SALESFORCE = "SalesForce"

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
    }

    attribute_map = {
    }

    def __init__(self):  # noqa: E501
        """BusinessActivity - a model defined in Swagger"""  # noqa: E501
        self.discriminator = None

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BusinessActivity, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BusinessActivity):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
