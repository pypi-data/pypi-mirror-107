# coding: utf-8

"""
    splitit-web-api-public-sdk

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class EmailAuditLogs(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'installment_plan_id': 'int',
        'user_unique_id': 'str',
        'user_id': 'int',
        'email_address': 'str',
        'external_identifier': 'str',
        'installment_plan': 'InstallmentPlans',
        'user_type': 'UserType',
        'email_type': 'SystemEmailsTypes',
        'email_html_body_filename': 'str'
    }

    attribute_map = {
        'id': 'Id',
        'installment_plan_id': 'InstallmentPlanId',
        'user_unique_id': 'UserUniqueId',
        'user_id': 'UserId',
        'email_address': 'EmailAddress',
        'external_identifier': 'ExternalIdentifier',
        'installment_plan': 'InstallmentPlan',
        'user_type': 'UserType',
        'email_type': 'EmailType',
        'email_html_body_filename': 'EmailHtmlBodyFilename'
    }

    def __init__(self, id=None, installment_plan_id=None, user_unique_id=None, user_id=None, email_address=None, external_identifier=None, installment_plan=None, user_type=None, email_type=None, email_html_body_filename=None):  # noqa: E501
        """EmailAuditLogs - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._installment_plan_id = None
        self._user_unique_id = None
        self._user_id = None
        self._email_address = None
        self._external_identifier = None
        self._installment_plan = None
        self._user_type = None
        self._email_type = None
        self._email_html_body_filename = None
        self.discriminator = None

        self._id = id
        if installment_plan_id is not None:
            self._installment_plan_id = installment_plan_id
        if user_unique_id is not None:
            self._user_unique_id = user_unique_id
        if user_id is not None:
            self._user_id = user_id
        if email_address is not None:
            self._email_address = email_address
        if external_identifier is not None:
            self._external_identifier = external_identifier
        if installment_plan is not None:
            self._installment_plan = installment_plan
        if user_type is not None:
            self._user_type = user_type
        self._email_type = email_type
        if email_html_body_filename is not None:
            self._email_html_body_filename = email_html_body_filename

    @property
    def id(self):
        """Gets the id of this EmailAuditLogs.  # noqa: E501


        :return: The id of this EmailAuditLogs.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EmailAuditLogs.


        :param id: The id of this EmailAuditLogs.  # noqa: E501
        :type: int
        """
        
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def installment_plan_id(self):
        """Gets the installment_plan_id of this EmailAuditLogs.  # noqa: E501


        :return: The installment_plan_id of this EmailAuditLogs.  # noqa: E501
        :rtype: int
        """
        return self._installment_plan_id

    @installment_plan_id.setter
    def installment_plan_id(self, installment_plan_id):
        """Sets the installment_plan_id of this EmailAuditLogs.


        :param installment_plan_id: The installment_plan_id of this EmailAuditLogs.  # noqa: E501
        :type: int
        """

        self._installment_plan_id = installment_plan_id

    @property
    def user_unique_id(self):
        """Gets the user_unique_id of this EmailAuditLogs.  # noqa: E501


        :return: The user_unique_id of this EmailAuditLogs.  # noqa: E501
        :rtype: str
        """
        return self._user_unique_id

    @user_unique_id.setter
    def user_unique_id(self, user_unique_id):
        """Sets the user_unique_id of this EmailAuditLogs.


        :param user_unique_id: The user_unique_id of this EmailAuditLogs.  # noqa: E501
        :type: str
        """

        self._user_unique_id = user_unique_id

    @property
    def user_id(self):
        """Gets the user_id of this EmailAuditLogs.  # noqa: E501


        :return: The user_id of this EmailAuditLogs.  # noqa: E501
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this EmailAuditLogs.


        :param user_id: The user_id of this EmailAuditLogs.  # noqa: E501
        :type: int
        """

        self._user_id = user_id

    @property
    def email_address(self):
        """Gets the email_address of this EmailAuditLogs.  # noqa: E501


        :return: The email_address of this EmailAuditLogs.  # noqa: E501
        :rtype: str
        """
        return self._email_address

    @email_address.setter
    def email_address(self, email_address):
        """Sets the email_address of this EmailAuditLogs.


        :param email_address: The email_address of this EmailAuditLogs.  # noqa: E501
        :type: str
        """

        self._email_address = email_address

    @property
    def external_identifier(self):
        """Gets the external_identifier of this EmailAuditLogs.  # noqa: E501


        :return: The external_identifier of this EmailAuditLogs.  # noqa: E501
        :rtype: str
        """
        return self._external_identifier

    @external_identifier.setter
    def external_identifier(self, external_identifier):
        """Sets the external_identifier of this EmailAuditLogs.


        :param external_identifier: The external_identifier of this EmailAuditLogs.  # noqa: E501
        :type: str
        """

        self._external_identifier = external_identifier

    @property
    def installment_plan(self):
        """Gets the installment_plan of this EmailAuditLogs.  # noqa: E501


        :return: The installment_plan of this EmailAuditLogs.  # noqa: E501
        :rtype: InstallmentPlans
        """
        return self._installment_plan

    @installment_plan.setter
    def installment_plan(self, installment_plan):
        """Sets the installment_plan of this EmailAuditLogs.


        :param installment_plan: The installment_plan of this EmailAuditLogs.  # noqa: E501
        :type: InstallmentPlans
        """

        self._installment_plan = installment_plan

    @property
    def user_type(self):
        """Gets the user_type of this EmailAuditLogs.  # noqa: E501


        :return: The user_type of this EmailAuditLogs.  # noqa: E501
        :rtype: UserType
        """
        return self._user_type

    @user_type.setter
    def user_type(self, user_type):
        """Sets the user_type of this EmailAuditLogs.


        :param user_type: The user_type of this EmailAuditLogs.  # noqa: E501
        :type: UserType
        """

        self._user_type = user_type

    @property
    def email_type(self):
        """Gets the email_type of this EmailAuditLogs.  # noqa: E501


        :return: The email_type of this EmailAuditLogs.  # noqa: E501
        :rtype: SystemEmailsTypes
        """
        return self._email_type

    @email_type.setter
    def email_type(self, email_type):
        """Sets the email_type of this EmailAuditLogs.


        :param email_type: The email_type of this EmailAuditLogs.  # noqa: E501
        :type: SystemEmailsTypes
        """
        
        if email_type is None:
            raise ValueError("Invalid value for `email_type`, must not be `None`")  # noqa: E501

        self._email_type = email_type

    @property
    def email_html_body_filename(self):
        """Gets the email_html_body_filename of this EmailAuditLogs.  # noqa: E501


        :return: The email_html_body_filename of this EmailAuditLogs.  # noqa: E501
        :rtype: str
        """
        return self._email_html_body_filename

    @email_html_body_filename.setter
    def email_html_body_filename(self, email_html_body_filename):
        """Sets the email_html_body_filename of this EmailAuditLogs.


        :param email_html_body_filename: The email_html_body_filename of this EmailAuditLogs.  # noqa: E501
        :type: str
        """

        self._email_html_body_filename = email_html_body_filename

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EmailAuditLogs, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EmailAuditLogs):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
