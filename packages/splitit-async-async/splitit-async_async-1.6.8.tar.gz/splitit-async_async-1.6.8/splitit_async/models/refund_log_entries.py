# coding: utf-8

"""
    splitit-web-api-public-sdk

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class RefundLogEntries(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'amount': 'float',
        'installment_plan_id': 'int',
        'installment_plan': 'InstallmentPlans'
    }

    attribute_map = {
        'id': 'Id',
        'amount': 'Amount',
        'installment_plan_id': 'InstallmentPlanId',
        'installment_plan': 'InstallmentPlan'
    }

    def __init__(self, id=None, amount=None, installment_plan_id=None, installment_plan=None):  # noqa: E501
        """RefundLogEntries - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._amount = None
        self._installment_plan_id = None
        self._installment_plan = None
        self.discriminator = None

        self._id = id
        self._amount = amount
        self._installment_plan_id = installment_plan_id
        if installment_plan is not None:
            self._installment_plan = installment_plan

    @property
    def id(self):
        """Gets the id of this RefundLogEntries.  # noqa: E501


        :return: The id of this RefundLogEntries.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this RefundLogEntries.


        :param id: The id of this RefundLogEntries.  # noqa: E501
        :type: int
        """
        
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def amount(self):
        """Gets the amount of this RefundLogEntries.  # noqa: E501


        :return: The amount of this RefundLogEntries.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this RefundLogEntries.


        :param amount: The amount of this RefundLogEntries.  # noqa: E501
        :type: float
        """
        
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")  # noqa: E501

        self._amount = amount

    @property
    def installment_plan_id(self):
        """Gets the installment_plan_id of this RefundLogEntries.  # noqa: E501


        :return: The installment_plan_id of this RefundLogEntries.  # noqa: E501
        :rtype: int
        """
        return self._installment_plan_id

    @installment_plan_id.setter
    def installment_plan_id(self, installment_plan_id):
        """Sets the installment_plan_id of this RefundLogEntries.


        :param installment_plan_id: The installment_plan_id of this RefundLogEntries.  # noqa: E501
        :type: int
        """
        
        if installment_plan_id is None:
            raise ValueError("Invalid value for `installment_plan_id`, must not be `None`")  # noqa: E501

        self._installment_plan_id = installment_plan_id

    @property
    def installment_plan(self):
        """Gets the installment_plan of this RefundLogEntries.  # noqa: E501


        :return: The installment_plan of this RefundLogEntries.  # noqa: E501
        :rtype: InstallmentPlans
        """
        return self._installment_plan

    @installment_plan.setter
    def installment_plan(self, installment_plan):
        """Sets the installment_plan of this RefundLogEntries.


        :param installment_plan: The installment_plan of this RefundLogEntries.  # noqa: E501
        :type: InstallmentPlans
        """

        self._installment_plan = installment_plan

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RefundLogEntries, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RefundLogEntries):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
