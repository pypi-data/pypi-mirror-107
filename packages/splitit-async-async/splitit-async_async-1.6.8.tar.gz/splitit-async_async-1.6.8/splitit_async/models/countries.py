# coding: utf-8

"""
    splitit-web-api-public-sdk

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Countries(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'iso_name': 'str',
        'iso_number': 'int',
        'iso_a2': 'str',
        'iso_a3': 'str',
        'continent': 'str',
        'utc_time_offset_in_mins': 'int',
        'is_zip_used': 'bool',
        'bin_data_items': 'list[BinDataItems]',
        'country_subdivisions': 'list[CountrySubdivisions]',
        'terminal_countries': 'list[TerminalCountries]',
        'currency_countries': 'list[CurrencyCountries]'
    }

    attribute_map = {
        'id': 'Id',
        'iso_name': 'IsoName',
        'iso_number': 'IsoNumber',
        'iso_a2': 'IsoA2',
        'iso_a3': 'IsoA3',
        'continent': 'Continent',
        'utc_time_offset_in_mins': 'UtcTimeOffsetInMins',
        'is_zip_used': 'IsZipUsed',
        'bin_data_items': 'BinDataItems',
        'country_subdivisions': 'CountrySubdivisions',
        'terminal_countries': 'TerminalCountries',
        'currency_countries': 'CurrencyCountries'
    }

    def __init__(self, id=None, iso_name=None, iso_number=None, iso_a2=None, iso_a3=None, continent=None, utc_time_offset_in_mins=None, is_zip_used=None, bin_data_items=None, country_subdivisions=None, terminal_countries=None, currency_countries=None):  # noqa: E501
        """Countries - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._iso_name = None
        self._iso_number = None
        self._iso_a2 = None
        self._iso_a3 = None
        self._continent = None
        self._utc_time_offset_in_mins = None
        self._is_zip_used = None
        self._bin_data_items = None
        self._country_subdivisions = None
        self._terminal_countries = None
        self._currency_countries = None
        self.discriminator = None

        self._id = id
        if iso_name is not None:
            self._iso_name = iso_name
        self._iso_number = iso_number
        if iso_a2 is not None:
            self._iso_a2 = iso_a2
        if iso_a3 is not None:
            self._iso_a3 = iso_a3
        if continent is not None:
            self._continent = continent
        self._utc_time_offset_in_mins = utc_time_offset_in_mins
        if is_zip_used is not None:
            self._is_zip_used = is_zip_used
        if bin_data_items is not None:
            self._bin_data_items = bin_data_items
        if country_subdivisions is not None:
            self._country_subdivisions = country_subdivisions
        if terminal_countries is not None:
            self._terminal_countries = terminal_countries
        if currency_countries is not None:
            self._currency_countries = currency_countries

    @property
    def id(self):
        """Gets the id of this Countries.  # noqa: E501


        :return: The id of this Countries.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Countries.


        :param id: The id of this Countries.  # noqa: E501
        :type: int
        """
        
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def iso_name(self):
        """Gets the iso_name of this Countries.  # noqa: E501


        :return: The iso_name of this Countries.  # noqa: E501
        :rtype: str
        """
        return self._iso_name

    @iso_name.setter
    def iso_name(self, iso_name):
        """Sets the iso_name of this Countries.


        :param iso_name: The iso_name of this Countries.  # noqa: E501
        :type: str
        """

        self._iso_name = iso_name

    @property
    def iso_number(self):
        """Gets the iso_number of this Countries.  # noqa: E501


        :return: The iso_number of this Countries.  # noqa: E501
        :rtype: int
        """
        return self._iso_number

    @iso_number.setter
    def iso_number(self, iso_number):
        """Sets the iso_number of this Countries.


        :param iso_number: The iso_number of this Countries.  # noqa: E501
        :type: int
        """
        
        if iso_number is None:
            raise ValueError("Invalid value for `iso_number`, must not be `None`")  # noqa: E501

        self._iso_number = iso_number

    @property
    def iso_a2(self):
        """Gets the iso_a2 of this Countries.  # noqa: E501


        :return: The iso_a2 of this Countries.  # noqa: E501
        :rtype: str
        """
        return self._iso_a2

    @iso_a2.setter
    def iso_a2(self, iso_a2):
        """Sets the iso_a2 of this Countries.


        :param iso_a2: The iso_a2 of this Countries.  # noqa: E501
        :type: str
        """

        self._iso_a2 = iso_a2

    @property
    def iso_a3(self):
        """Gets the iso_a3 of this Countries.  # noqa: E501


        :return: The iso_a3 of this Countries.  # noqa: E501
        :rtype: str
        """
        return self._iso_a3

    @iso_a3.setter
    def iso_a3(self, iso_a3):
        """Sets the iso_a3 of this Countries.


        :param iso_a3: The iso_a3 of this Countries.  # noqa: E501
        :type: str
        """

        self._iso_a3 = iso_a3

    @property
    def continent(self):
        """Gets the continent of this Countries.  # noqa: E501


        :return: The continent of this Countries.  # noqa: E501
        :rtype: str
        """
        return self._continent

    @continent.setter
    def continent(self, continent):
        """Sets the continent of this Countries.


        :param continent: The continent of this Countries.  # noqa: E501
        :type: str
        """

        self._continent = continent

    @property
    def utc_time_offset_in_mins(self):
        """Gets the utc_time_offset_in_mins of this Countries.  # noqa: E501


        :return: The utc_time_offset_in_mins of this Countries.  # noqa: E501
        :rtype: int
        """
        return self._utc_time_offset_in_mins

    @utc_time_offset_in_mins.setter
    def utc_time_offset_in_mins(self, utc_time_offset_in_mins):
        """Sets the utc_time_offset_in_mins of this Countries.


        :param utc_time_offset_in_mins: The utc_time_offset_in_mins of this Countries.  # noqa: E501
        :type: int
        """
        
        if utc_time_offset_in_mins is None:
            raise ValueError("Invalid value for `utc_time_offset_in_mins`, must not be `None`")  # noqa: E501

        self._utc_time_offset_in_mins = utc_time_offset_in_mins

    @property
    def is_zip_used(self):
        """Gets the is_zip_used of this Countries.  # noqa: E501


        :return: The is_zip_used of this Countries.  # noqa: E501
        :rtype: bool
        """
        return self._is_zip_used

    @is_zip_used.setter
    def is_zip_used(self, is_zip_used):
        """Sets the is_zip_used of this Countries.


        :param is_zip_used: The is_zip_used of this Countries.  # noqa: E501
        :type: bool
        """

        self._is_zip_used = is_zip_used

    @property
    def bin_data_items(self):
        """Gets the bin_data_items of this Countries.  # noqa: E501


        :return: The bin_data_items of this Countries.  # noqa: E501
        :rtype: list[BinDataItems]
        """
        return self._bin_data_items

    @bin_data_items.setter
    def bin_data_items(self, bin_data_items):
        """Sets the bin_data_items of this Countries.


        :param bin_data_items: The bin_data_items of this Countries.  # noqa: E501
        :type: list[BinDataItems]
        """

        self._bin_data_items = bin_data_items

    @property
    def country_subdivisions(self):
        """Gets the country_subdivisions of this Countries.  # noqa: E501


        :return: The country_subdivisions of this Countries.  # noqa: E501
        :rtype: list[CountrySubdivisions]
        """
        return self._country_subdivisions

    @country_subdivisions.setter
    def country_subdivisions(self, country_subdivisions):
        """Sets the country_subdivisions of this Countries.


        :param country_subdivisions: The country_subdivisions of this Countries.  # noqa: E501
        :type: list[CountrySubdivisions]
        """

        self._country_subdivisions = country_subdivisions

    @property
    def terminal_countries(self):
        """Gets the terminal_countries of this Countries.  # noqa: E501


        :return: The terminal_countries of this Countries.  # noqa: E501
        :rtype: list[TerminalCountries]
        """
        return self._terminal_countries

    @terminal_countries.setter
    def terminal_countries(self, terminal_countries):
        """Sets the terminal_countries of this Countries.


        :param terminal_countries: The terminal_countries of this Countries.  # noqa: E501
        :type: list[TerminalCountries]
        """

        self._terminal_countries = terminal_countries

    @property
    def currency_countries(self):
        """Gets the currency_countries of this Countries.  # noqa: E501


        :return: The currency_countries of this Countries.  # noqa: E501
        :rtype: list[CurrencyCountries]
        """
        return self._currency_countries

    @currency_countries.setter
    def currency_countries(self, currency_countries):
        """Sets the currency_countries of this Countries.


        :param currency_countries: The currency_countries of this Countries.  # noqa: E501
        :type: list[CurrencyCountries]
        """

        self._currency_countries = currency_countries

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Countries, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Countries):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
