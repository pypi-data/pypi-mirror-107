# coding: utf-8

"""
    splitit-web-api-public-sdk

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class InstallmentPlanEventsSubscriptionDatas(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'subscribed_events_string': 'str',
        'merchant_id': 'int',
        'event_subscription_end_point_url': 'str',
        'merchant': 'Merchants',
        'subscribed_event': 'InstallmentPlanEventType'
    }

    attribute_map = {
        'id': 'Id',
        'subscribed_events_string': 'SubscribedEventsString',
        'merchant_id': 'MerchantId',
        'event_subscription_end_point_url': 'EventSubscriptionEndPointUrl',
        'merchant': 'Merchant',
        'subscribed_event': 'SubscribedEvent'
    }

    def __init__(self, id=None, subscribed_events_string=None, merchant_id=None, event_subscription_end_point_url=None, merchant=None, subscribed_event=None):  # noqa: E501
        """InstallmentPlanEventsSubscriptionDatas - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._subscribed_events_string = None
        self._merchant_id = None
        self._event_subscription_end_point_url = None
        self._merchant = None
        self._subscribed_event = None
        self.discriminator = None

        self._id = id
        if subscribed_events_string is not None:
            self._subscribed_events_string = subscribed_events_string
        self._merchant_id = merchant_id
        if event_subscription_end_point_url is not None:
            self._event_subscription_end_point_url = event_subscription_end_point_url
        if merchant is not None:
            self._merchant = merchant
        self._subscribed_event = subscribed_event

    @property
    def id(self):
        """Gets the id of this InstallmentPlanEventsSubscriptionDatas.  # noqa: E501


        :return: The id of this InstallmentPlanEventsSubscriptionDatas.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InstallmentPlanEventsSubscriptionDatas.


        :param id: The id of this InstallmentPlanEventsSubscriptionDatas.  # noqa: E501
        :type: int
        """
        
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def subscribed_events_string(self):
        """Gets the subscribed_events_string of this InstallmentPlanEventsSubscriptionDatas.  # noqa: E501


        :return: The subscribed_events_string of this InstallmentPlanEventsSubscriptionDatas.  # noqa: E501
        :rtype: str
        """
        return self._subscribed_events_string

    @subscribed_events_string.setter
    def subscribed_events_string(self, subscribed_events_string):
        """Sets the subscribed_events_string of this InstallmentPlanEventsSubscriptionDatas.


        :param subscribed_events_string: The subscribed_events_string of this InstallmentPlanEventsSubscriptionDatas.  # noqa: E501
        :type: str
        """

        self._subscribed_events_string = subscribed_events_string

    @property
    def merchant_id(self):
        """Gets the merchant_id of this InstallmentPlanEventsSubscriptionDatas.  # noqa: E501


        :return: The merchant_id of this InstallmentPlanEventsSubscriptionDatas.  # noqa: E501
        :rtype: int
        """
        return self._merchant_id

    @merchant_id.setter
    def merchant_id(self, merchant_id):
        """Sets the merchant_id of this InstallmentPlanEventsSubscriptionDatas.


        :param merchant_id: The merchant_id of this InstallmentPlanEventsSubscriptionDatas.  # noqa: E501
        :type: int
        """
        
        if merchant_id is None:
            raise ValueError("Invalid value for `merchant_id`, must not be `None`")  # noqa: E501

        self._merchant_id = merchant_id

    @property
    def event_subscription_end_point_url(self):
        """Gets the event_subscription_end_point_url of this InstallmentPlanEventsSubscriptionDatas.  # noqa: E501


        :return: The event_subscription_end_point_url of this InstallmentPlanEventsSubscriptionDatas.  # noqa: E501
        :rtype: str
        """
        return self._event_subscription_end_point_url

    @event_subscription_end_point_url.setter
    def event_subscription_end_point_url(self, event_subscription_end_point_url):
        """Sets the event_subscription_end_point_url of this InstallmentPlanEventsSubscriptionDatas.


        :param event_subscription_end_point_url: The event_subscription_end_point_url of this InstallmentPlanEventsSubscriptionDatas.  # noqa: E501
        :type: str
        """

        self._event_subscription_end_point_url = event_subscription_end_point_url

    @property
    def merchant(self):
        """Gets the merchant of this InstallmentPlanEventsSubscriptionDatas.  # noqa: E501


        :return: The merchant of this InstallmentPlanEventsSubscriptionDatas.  # noqa: E501
        :rtype: Merchants
        """
        return self._merchant

    @merchant.setter
    def merchant(self, merchant):
        """Sets the merchant of this InstallmentPlanEventsSubscriptionDatas.


        :param merchant: The merchant of this InstallmentPlanEventsSubscriptionDatas.  # noqa: E501
        :type: Merchants
        """

        self._merchant = merchant

    @property
    def subscribed_event(self):
        """Gets the subscribed_event of this InstallmentPlanEventsSubscriptionDatas.  # noqa: E501


        :return: The subscribed_event of this InstallmentPlanEventsSubscriptionDatas.  # noqa: E501
        :rtype: InstallmentPlanEventType
        """
        return self._subscribed_event

    @subscribed_event.setter
    def subscribed_event(self, subscribed_event):
        """Sets the subscribed_event of this InstallmentPlanEventsSubscriptionDatas.


        :param subscribed_event: The subscribed_event of this InstallmentPlanEventsSubscriptionDatas.  # noqa: E501
        :type: InstallmentPlanEventType
        """
        
        if subscribed_event is None:
            raise ValueError("Invalid value for `subscribed_event`, must not be `None`")  # noqa: E501

        self._subscribed_event = subscribed_event

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InstallmentPlanEventsSubscriptionDatas, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InstallmentPlanEventsSubscriptionDatas):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
