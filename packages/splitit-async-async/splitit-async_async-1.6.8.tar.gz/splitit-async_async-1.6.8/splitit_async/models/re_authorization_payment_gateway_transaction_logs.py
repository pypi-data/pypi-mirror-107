# coding: utf-8

"""
    splitit-web-api-public-sdk

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ReAuthorizationPaymentGatewayTransactionLogs(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        're_authorization_id': 'int',
        'payment_gateway_transaction_log_id': 'int',
        'payment_gateway_transaction_log': 'PaymentGatewayTransactionLogs',
        're_authorization': 'ReAuthorizations'
    }

    attribute_map = {
        're_authorization_id': 'ReAuthorizationId',
        'payment_gateway_transaction_log_id': 'PaymentGatewayTransactionLogId',
        'payment_gateway_transaction_log': 'PaymentGatewayTransactionLog',
        're_authorization': 'ReAuthorization'
    }

    def __init__(self, re_authorization_id=None, payment_gateway_transaction_log_id=None, payment_gateway_transaction_log=None, re_authorization=None):  # noqa: E501
        """ReAuthorizationPaymentGatewayTransactionLogs - a model defined in Swagger"""  # noqa: E501

        self._re_authorization_id = None
        self._payment_gateway_transaction_log_id = None
        self._payment_gateway_transaction_log = None
        self._re_authorization = None
        self.discriminator = None

        self._re_authorization_id = re_authorization_id
        self._payment_gateway_transaction_log_id = payment_gateway_transaction_log_id
        if payment_gateway_transaction_log is not None:
            self._payment_gateway_transaction_log = payment_gateway_transaction_log
        if re_authorization is not None:
            self._re_authorization = re_authorization

    @property
    def re_authorization_id(self):
        """Gets the re_authorization_id of this ReAuthorizationPaymentGatewayTransactionLogs.  # noqa: E501


        :return: The re_authorization_id of this ReAuthorizationPaymentGatewayTransactionLogs.  # noqa: E501
        :rtype: int
        """
        return self._re_authorization_id

    @re_authorization_id.setter
    def re_authorization_id(self, re_authorization_id):
        """Sets the re_authorization_id of this ReAuthorizationPaymentGatewayTransactionLogs.


        :param re_authorization_id: The re_authorization_id of this ReAuthorizationPaymentGatewayTransactionLogs.  # noqa: E501
        :type: int
        """
        
        if re_authorization_id is None:
            raise ValueError("Invalid value for `re_authorization_id`, must not be `None`")  # noqa: E501

        self._re_authorization_id = re_authorization_id

    @property
    def payment_gateway_transaction_log_id(self):
        """Gets the payment_gateway_transaction_log_id of this ReAuthorizationPaymentGatewayTransactionLogs.  # noqa: E501


        :return: The payment_gateway_transaction_log_id of this ReAuthorizationPaymentGatewayTransactionLogs.  # noqa: E501
        :rtype: int
        """
        return self._payment_gateway_transaction_log_id

    @payment_gateway_transaction_log_id.setter
    def payment_gateway_transaction_log_id(self, payment_gateway_transaction_log_id):
        """Sets the payment_gateway_transaction_log_id of this ReAuthorizationPaymentGatewayTransactionLogs.


        :param payment_gateway_transaction_log_id: The payment_gateway_transaction_log_id of this ReAuthorizationPaymentGatewayTransactionLogs.  # noqa: E501
        :type: int
        """
        
        if payment_gateway_transaction_log_id is None:
            raise ValueError("Invalid value for `payment_gateway_transaction_log_id`, must not be `None`")  # noqa: E501

        self._payment_gateway_transaction_log_id = payment_gateway_transaction_log_id

    @property
    def payment_gateway_transaction_log(self):
        """Gets the payment_gateway_transaction_log of this ReAuthorizationPaymentGatewayTransactionLogs.  # noqa: E501


        :return: The payment_gateway_transaction_log of this ReAuthorizationPaymentGatewayTransactionLogs.  # noqa: E501
        :rtype: PaymentGatewayTransactionLogs
        """
        return self._payment_gateway_transaction_log

    @payment_gateway_transaction_log.setter
    def payment_gateway_transaction_log(self, payment_gateway_transaction_log):
        """Sets the payment_gateway_transaction_log of this ReAuthorizationPaymentGatewayTransactionLogs.


        :param payment_gateway_transaction_log: The payment_gateway_transaction_log of this ReAuthorizationPaymentGatewayTransactionLogs.  # noqa: E501
        :type: PaymentGatewayTransactionLogs
        """

        self._payment_gateway_transaction_log = payment_gateway_transaction_log

    @property
    def re_authorization(self):
        """Gets the re_authorization of this ReAuthorizationPaymentGatewayTransactionLogs.  # noqa: E501


        :return: The re_authorization of this ReAuthorizationPaymentGatewayTransactionLogs.  # noqa: E501
        :rtype: ReAuthorizations
        """
        return self._re_authorization

    @re_authorization.setter
    def re_authorization(self, re_authorization):
        """Sets the re_authorization of this ReAuthorizationPaymentGatewayTransactionLogs.


        :param re_authorization: The re_authorization of this ReAuthorizationPaymentGatewayTransactionLogs.  # noqa: E501
        :type: ReAuthorizations
        """

        self._re_authorization = re_authorization

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ReAuthorizationPaymentGatewayTransactionLogs, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReAuthorizationPaymentGatewayTransactionLogs):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
