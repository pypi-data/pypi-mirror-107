# coding: utf-8

"""
    splitit-web-api-public-sdk

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class InstallmentPlanAuditLogs(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'activity_execution_date': 'datetime',
        'user_id': 'int',
        'user_unique_id': 'str',
        'business_activity': 'BusinessActivity',
        'trace_id': 'str',
        'result': 'bool',
        'versioned_touch_point': 'VersionedTouchPoints',
        'versioned_touch_point_id': 'int',
        'discriminator': 'str',
        'additional_info': 'str',
        'user_type': 'UserType',
        'installment_plan_id': 'int',
        'creating_ip_address': 'str',
        'card_id': 'int',
        'card': 'Cards',
        'installment_plan': 'InstallmentPlans',
        'error_code': 'PisErrorCodes'
    }

    attribute_map = {
        'id': 'Id',
        'activity_execution_date': 'ActivityExecutionDate',
        'user_id': 'UserId',
        'user_unique_id': 'UserUniqueId',
        'business_activity': 'BusinessActivity',
        'trace_id': 'TraceId',
        'result': 'Result',
        'versioned_touch_point': 'VersionedTouchPoint',
        'versioned_touch_point_id': 'VersionedTouchPointId',
        'discriminator': 'Discriminator',
        'additional_info': 'AdditionalInfo',
        'user_type': 'UserType',
        'installment_plan_id': 'InstallmentPlanId',
        'creating_ip_address': 'CreatingIPAddress',
        'card_id': 'CardId',
        'card': 'Card',
        'installment_plan': 'InstallmentPlan',
        'error_code': 'ErrorCode'
    }

    def __init__(self, id=None, activity_execution_date=None, user_id=None, user_unique_id=None, business_activity=None, trace_id=None, result=None, versioned_touch_point=None, versioned_touch_point_id=None, discriminator=None, additional_info=None, user_type=None, installment_plan_id=None, creating_ip_address=None, card_id=None, card=None, installment_plan=None, error_code=None):  # noqa: E501
        """InstallmentPlanAuditLogs - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._activity_execution_date = None
        self._user_id = None
        self._user_unique_id = None
        self._business_activity = None
        self._trace_id = None
        self._result = None
        self._versioned_touch_point = None
        self._versioned_touch_point_id = None
        self._discriminator = None
        self._additional_info = None
        self._user_type = None
        self._installment_plan_id = None
        self._creating_ip_address = None
        self._card_id = None
        self._card = None
        self._installment_plan = None
        self._error_code = None
        self.discriminator = None

        self._id = id
        self._activity_execution_date = activity_execution_date
        if user_id is not None:
            self._user_id = user_id
        if user_unique_id is not None:
            self._user_unique_id = user_unique_id
        self._business_activity = business_activity
        if trace_id is not None:
            self._trace_id = trace_id
        self._result = result
        if versioned_touch_point is not None:
            self._versioned_touch_point = versioned_touch_point
        if versioned_touch_point_id is not None:
            self._versioned_touch_point_id = versioned_touch_point_id
        if discriminator is not None:
            self._discriminator = discriminator
        if additional_info is not None:
            self._additional_info = additional_info
        if user_type is not None:
            self._user_type = user_type
        if installment_plan_id is not None:
            self._installment_plan_id = installment_plan_id
        if creating_ip_address is not None:
            self._creating_ip_address = creating_ip_address
        if card_id is not None:
            self._card_id = card_id
        if card is not None:
            self._card = card
        if installment_plan is not None:
            self._installment_plan = installment_plan
        if error_code is not None:
            self._error_code = error_code

    @property
    def id(self):
        """Gets the id of this InstallmentPlanAuditLogs.  # noqa: E501


        :return: The id of this InstallmentPlanAuditLogs.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InstallmentPlanAuditLogs.


        :param id: The id of this InstallmentPlanAuditLogs.  # noqa: E501
        :type: int
        """
        
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def activity_execution_date(self):
        """Gets the activity_execution_date of this InstallmentPlanAuditLogs.  # noqa: E501


        :return: The activity_execution_date of this InstallmentPlanAuditLogs.  # noqa: E501
        :rtype: datetime
        """
        return self._activity_execution_date

    @activity_execution_date.setter
    def activity_execution_date(self, activity_execution_date):
        """Sets the activity_execution_date of this InstallmentPlanAuditLogs.


        :param activity_execution_date: The activity_execution_date of this InstallmentPlanAuditLogs.  # noqa: E501
        :type: datetime
        """
        
        if activity_execution_date is None:
            raise ValueError("Invalid value for `activity_execution_date`, must not be `None`")  # noqa: E501

        self._activity_execution_date = activity_execution_date

    @property
    def user_id(self):
        """Gets the user_id of this InstallmentPlanAuditLogs.  # noqa: E501


        :return: The user_id of this InstallmentPlanAuditLogs.  # noqa: E501
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this InstallmentPlanAuditLogs.


        :param user_id: The user_id of this InstallmentPlanAuditLogs.  # noqa: E501
        :type: int
        """

        self._user_id = user_id

    @property
    def user_unique_id(self):
        """Gets the user_unique_id of this InstallmentPlanAuditLogs.  # noqa: E501


        :return: The user_unique_id of this InstallmentPlanAuditLogs.  # noqa: E501
        :rtype: str
        """
        return self._user_unique_id

    @user_unique_id.setter
    def user_unique_id(self, user_unique_id):
        """Sets the user_unique_id of this InstallmentPlanAuditLogs.


        :param user_unique_id: The user_unique_id of this InstallmentPlanAuditLogs.  # noqa: E501
        :type: str
        """

        self._user_unique_id = user_unique_id

    @property
    def business_activity(self):
        """Gets the business_activity of this InstallmentPlanAuditLogs.  # noqa: E501


        :return: The business_activity of this InstallmentPlanAuditLogs.  # noqa: E501
        :rtype: BusinessActivity
        """
        return self._business_activity

    @business_activity.setter
    def business_activity(self, business_activity):
        """Sets the business_activity of this InstallmentPlanAuditLogs.


        :param business_activity: The business_activity of this InstallmentPlanAuditLogs.  # noqa: E501
        :type: BusinessActivity
        """
        
        if business_activity is None:
            raise ValueError("Invalid value for `business_activity`, must not be `None`")  # noqa: E501

        self._business_activity = business_activity

    @property
    def trace_id(self):
        """Gets the trace_id of this InstallmentPlanAuditLogs.  # noqa: E501


        :return: The trace_id of this InstallmentPlanAuditLogs.  # noqa: E501
        :rtype: str
        """
        return self._trace_id

    @trace_id.setter
    def trace_id(self, trace_id):
        """Sets the trace_id of this InstallmentPlanAuditLogs.


        :param trace_id: The trace_id of this InstallmentPlanAuditLogs.  # noqa: E501
        :type: str
        """

        self._trace_id = trace_id

    @property
    def result(self):
        """Gets the result of this InstallmentPlanAuditLogs.  # noqa: E501


        :return: The result of this InstallmentPlanAuditLogs.  # noqa: E501
        :rtype: bool
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this InstallmentPlanAuditLogs.


        :param result: The result of this InstallmentPlanAuditLogs.  # noqa: E501
        :type: bool
        """
        result = bool(result)
        if result is None:
            raise ValueError("Invalid value for `result`, must not be `None`")  # noqa: E501

        self._result = result

    @property
    def versioned_touch_point(self):
        """Gets the versioned_touch_point of this InstallmentPlanAuditLogs.  # noqa: E501


        :return: The versioned_touch_point of this InstallmentPlanAuditLogs.  # noqa: E501
        :rtype: VersionedTouchPoints
        """
        return self._versioned_touch_point

    @versioned_touch_point.setter
    def versioned_touch_point(self, versioned_touch_point):
        """Sets the versioned_touch_point of this InstallmentPlanAuditLogs.


        :param versioned_touch_point: The versioned_touch_point of this InstallmentPlanAuditLogs.  # noqa: E501
        :type: VersionedTouchPoints
        """

        self._versioned_touch_point = versioned_touch_point

    @property
    def versioned_touch_point_id(self):
        """Gets the versioned_touch_point_id of this InstallmentPlanAuditLogs.  # noqa: E501


        :return: The versioned_touch_point_id of this InstallmentPlanAuditLogs.  # noqa: E501
        :rtype: int
        """
        return self._versioned_touch_point_id

    @versioned_touch_point_id.setter
    def versioned_touch_point_id(self, versioned_touch_point_id):
        """Sets the versioned_touch_point_id of this InstallmentPlanAuditLogs.


        :param versioned_touch_point_id: The versioned_touch_point_id of this InstallmentPlanAuditLogs.  # noqa: E501
        :type: int
        """

        self._versioned_touch_point_id = versioned_touch_point_id

    @property
    def discriminator(self):
        """Gets the discriminator of this InstallmentPlanAuditLogs.  # noqa: E501


        :return: The discriminator of this InstallmentPlanAuditLogs.  # noqa: E501
        :rtype: str
        """
        return self._discriminator

    @discriminator.setter
    def discriminator(self, discriminator):
        """Sets the discriminator of this InstallmentPlanAuditLogs.


        :param discriminator: The discriminator of this InstallmentPlanAuditLogs.  # noqa: E501
        :type: str
        """

        self._discriminator = discriminator

    @property
    def additional_info(self):
        """Gets the additional_info of this InstallmentPlanAuditLogs.  # noqa: E501


        :return: The additional_info of this InstallmentPlanAuditLogs.  # noqa: E501
        :rtype: str
        """
        return self._additional_info

    @additional_info.setter
    def additional_info(self, additional_info):
        """Sets the additional_info of this InstallmentPlanAuditLogs.


        :param additional_info: The additional_info of this InstallmentPlanAuditLogs.  # noqa: E501
        :type: str
        """

        self._additional_info = additional_info

    @property
    def user_type(self):
        """Gets the user_type of this InstallmentPlanAuditLogs.  # noqa: E501


        :return: The user_type of this InstallmentPlanAuditLogs.  # noqa: E501
        :rtype: UserType
        """
        return self._user_type

    @user_type.setter
    def user_type(self, user_type):
        """Sets the user_type of this InstallmentPlanAuditLogs.


        :param user_type: The user_type of this InstallmentPlanAuditLogs.  # noqa: E501
        :type: UserType
        """

        self._user_type = user_type

    @property
    def installment_plan_id(self):
        """Gets the installment_plan_id of this InstallmentPlanAuditLogs.  # noqa: E501


        :return: The installment_plan_id of this InstallmentPlanAuditLogs.  # noqa: E501
        :rtype: int
        """
        return self._installment_plan_id

    @installment_plan_id.setter
    def installment_plan_id(self, installment_plan_id):
        """Sets the installment_plan_id of this InstallmentPlanAuditLogs.


        :param installment_plan_id: The installment_plan_id of this InstallmentPlanAuditLogs.  # noqa: E501
        :type: int
        """

        self._installment_plan_id = installment_plan_id

    @property
    def creating_ip_address(self):
        """Gets the creating_ip_address of this InstallmentPlanAuditLogs.  # noqa: E501


        :return: The creating_ip_address of this InstallmentPlanAuditLogs.  # noqa: E501
        :rtype: str
        """
        return self._creating_ip_address

    @creating_ip_address.setter
    def creating_ip_address(self, creating_ip_address):
        """Sets the creating_ip_address of this InstallmentPlanAuditLogs.


        :param creating_ip_address: The creating_ip_address of this InstallmentPlanAuditLogs.  # noqa: E501
        :type: str
        """

        self._creating_ip_address = creating_ip_address

    @property
    def card_id(self):
        """Gets the card_id of this InstallmentPlanAuditLogs.  # noqa: E501


        :return: The card_id of this InstallmentPlanAuditLogs.  # noqa: E501
        :rtype: int
        """
        return self._card_id

    @card_id.setter
    def card_id(self, card_id):
        """Sets the card_id of this InstallmentPlanAuditLogs.


        :param card_id: The card_id of this InstallmentPlanAuditLogs.  # noqa: E501
        :type: int
        """

        self._card_id = card_id

    @property
    def card(self):
        """Gets the card of this InstallmentPlanAuditLogs.  # noqa: E501


        :return: The card of this InstallmentPlanAuditLogs.  # noqa: E501
        :rtype: Cards
        """
        return self._card

    @card.setter
    def card(self, card):
        """Sets the card of this InstallmentPlanAuditLogs.


        :param card: The card of this InstallmentPlanAuditLogs.  # noqa: E501
        :type: Cards
        """

        self._card = card

    @property
    def installment_plan(self):
        """Gets the installment_plan of this InstallmentPlanAuditLogs.  # noqa: E501


        :return: The installment_plan of this InstallmentPlanAuditLogs.  # noqa: E501
        :rtype: InstallmentPlans
        """
        return self._installment_plan

    @installment_plan.setter
    def installment_plan(self, installment_plan):
        """Sets the installment_plan of this InstallmentPlanAuditLogs.


        :param installment_plan: The installment_plan of this InstallmentPlanAuditLogs.  # noqa: E501
        :type: InstallmentPlans
        """

        self._installment_plan = installment_plan

    @property
    def error_code(self):
        """Gets the error_code of this InstallmentPlanAuditLogs.  # noqa: E501


        :return: The error_code of this InstallmentPlanAuditLogs.  # noqa: E501
        :rtype: PisErrorCodes
        """
        return self._error_code

    @error_code.setter
    def error_code(self, error_code):
        """Sets the error_code of this InstallmentPlanAuditLogs.


        :param error_code: The error_code of this InstallmentPlanAuditLogs.  # noqa: E501
        :type: PisErrorCodes
        """

        self._error_code = error_code

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InstallmentPlanAuditLogs, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InstallmentPlanAuditLogs):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
