# coding: utf-8

"""
    splitit-web-api-public-sdk

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ScpProviders(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'implementation_code': 'str',
        'total_funds': 'float',
        'max_non_secure_plans_percent': 'float',
        'scp_variable_cost_annual_percent': 'float',
        'scp_fixed_cost': 'float',
        'scp_revenue_share_percent': 'float',
        'total_funds_currency_id': 'int',
        'emails_list': 'str',
        'is_operated_by_splitit': 'bool',
        'is_funding_by_splitit': 'bool',
        'deduct_revenue_share_automatically_from_last_installment': 'bool',
        'fund_first_installment': 'bool',
        'total_funds_currency': 'Currencies',
        'parameter_group': 'ParameterGroups',
        'scp_providers_currencies': 'list[ScpProvidersCurrencies]'
    }

    attribute_map = {
        'id': 'Id',
        'name': 'Name',
        'implementation_code': 'ImplementationCode',
        'total_funds': 'TotalFunds',
        'max_non_secure_plans_percent': 'MaxNonSecurePlansPercent',
        'scp_variable_cost_annual_percent': 'ScpVariableCostAnnualPercent',
        'scp_fixed_cost': 'ScpFixedCost',
        'scp_revenue_share_percent': 'ScpRevenueSharePercent',
        'total_funds_currency_id': 'TotalFundsCurrencyId',
        'emails_list': 'EmailsList',
        'is_operated_by_splitit': 'IsOperatedBySplitit',
        'is_funding_by_splitit': 'IsFundingBySplitit',
        'deduct_revenue_share_automatically_from_last_installment': 'DeductRevenueShareAutomaticallyFromLastInstallment',
        'fund_first_installment': 'FundFirstInstallment',
        'total_funds_currency': 'TotalFundsCurrency',
        'parameter_group': 'ParameterGroup',
        'scp_providers_currencies': 'ScpProvidersCurrencies'
    }

    def __init__(self, id=None, name=None, implementation_code=None, total_funds=None, max_non_secure_plans_percent=None, scp_variable_cost_annual_percent=None, scp_fixed_cost=None, scp_revenue_share_percent=None, total_funds_currency_id=None, emails_list=None, is_operated_by_splitit=None, is_funding_by_splitit=None, deduct_revenue_share_automatically_from_last_installment=None, fund_first_installment=None, total_funds_currency=None, parameter_group=None, scp_providers_currencies=None):  # noqa: E501
        """ScpProviders - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._name = None
        self._implementation_code = None
        self._total_funds = None
        self._max_non_secure_plans_percent = None
        self._scp_variable_cost_annual_percent = None
        self._scp_fixed_cost = None
        self._scp_revenue_share_percent = None
        self._total_funds_currency_id = None
        self._emails_list = None
        self._is_operated_by_splitit = None
        self._is_funding_by_splitit = None
        self._deduct_revenue_share_automatically_from_last_installment = None
        self._fund_first_installment = None
        self._total_funds_currency = None
        self._parameter_group = None
        self._scp_providers_currencies = None
        self.discriminator = None

        self._id = id
        if name is not None:
            self._name = name
        if implementation_code is not None:
            self._implementation_code = implementation_code
        self._total_funds = total_funds
        self._max_non_secure_plans_percent = max_non_secure_plans_percent
        self._scp_variable_cost_annual_percent = scp_variable_cost_annual_percent
        self._scp_fixed_cost = scp_fixed_cost
        self._scp_revenue_share_percent = scp_revenue_share_percent
        if total_funds_currency_id is not None:
            self._total_funds_currency_id = total_funds_currency_id
        if emails_list is not None:
            self._emails_list = emails_list
        if is_operated_by_splitit is not None:
            self._is_operated_by_splitit = is_operated_by_splitit
        self._is_funding_by_splitit = is_funding_by_splitit
        self._deduct_revenue_share_automatically_from_last_installment = deduct_revenue_share_automatically_from_last_installment
        self._fund_first_installment = fund_first_installment
        if total_funds_currency is not None:
            self._total_funds_currency = total_funds_currency
        if parameter_group is not None:
            self._parameter_group = parameter_group
        if scp_providers_currencies is not None:
            self._scp_providers_currencies = scp_providers_currencies

    @property
    def id(self):
        """Gets the id of this ScpProviders.  # noqa: E501


        :return: The id of this ScpProviders.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ScpProviders.


        :param id: The id of this ScpProviders.  # noqa: E501
        :type: int
        """
        
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this ScpProviders.  # noqa: E501


        :return: The name of this ScpProviders.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ScpProviders.


        :param name: The name of this ScpProviders.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def implementation_code(self):
        """Gets the implementation_code of this ScpProviders.  # noqa: E501


        :return: The implementation_code of this ScpProviders.  # noqa: E501
        :rtype: str
        """
        return self._implementation_code

    @implementation_code.setter
    def implementation_code(self, implementation_code):
        """Sets the implementation_code of this ScpProviders.


        :param implementation_code: The implementation_code of this ScpProviders.  # noqa: E501
        :type: str
        """

        self._implementation_code = implementation_code

    @property
    def total_funds(self):
        """Gets the total_funds of this ScpProviders.  # noqa: E501


        :return: The total_funds of this ScpProviders.  # noqa: E501
        :rtype: float
        """
        return self._total_funds

    @total_funds.setter
    def total_funds(self, total_funds):
        """Sets the total_funds of this ScpProviders.


        :param total_funds: The total_funds of this ScpProviders.  # noqa: E501
        :type: float
        """
        
        if total_funds is None:
            raise ValueError("Invalid value for `total_funds`, must not be `None`")  # noqa: E501

        self._total_funds = total_funds

    @property
    def max_non_secure_plans_percent(self):
        """Gets the max_non_secure_plans_percent of this ScpProviders.  # noqa: E501


        :return: The max_non_secure_plans_percent of this ScpProviders.  # noqa: E501
        :rtype: float
        """
        return self._max_non_secure_plans_percent

    @max_non_secure_plans_percent.setter
    def max_non_secure_plans_percent(self, max_non_secure_plans_percent):
        """Sets the max_non_secure_plans_percent of this ScpProviders.


        :param max_non_secure_plans_percent: The max_non_secure_plans_percent of this ScpProviders.  # noqa: E501
        :type: float
        """
        
        if max_non_secure_plans_percent is None:
            raise ValueError("Invalid value for `max_non_secure_plans_percent`, must not be `None`")  # noqa: E501

        self._max_non_secure_plans_percent = max_non_secure_plans_percent

    @property
    def scp_variable_cost_annual_percent(self):
        """Gets the scp_variable_cost_annual_percent of this ScpProviders.  # noqa: E501


        :return: The scp_variable_cost_annual_percent of this ScpProviders.  # noqa: E501
        :rtype: float
        """
        return self._scp_variable_cost_annual_percent

    @scp_variable_cost_annual_percent.setter
    def scp_variable_cost_annual_percent(self, scp_variable_cost_annual_percent):
        """Sets the scp_variable_cost_annual_percent of this ScpProviders.


        :param scp_variable_cost_annual_percent: The scp_variable_cost_annual_percent of this ScpProviders.  # noqa: E501
        :type: float
        """
        
        if scp_variable_cost_annual_percent is None:
            raise ValueError("Invalid value for `scp_variable_cost_annual_percent`, must not be `None`")  # noqa: E501

        self._scp_variable_cost_annual_percent = scp_variable_cost_annual_percent

    @property
    def scp_fixed_cost(self):
        """Gets the scp_fixed_cost of this ScpProviders.  # noqa: E501


        :return: The scp_fixed_cost of this ScpProviders.  # noqa: E501
        :rtype: float
        """
        return self._scp_fixed_cost

    @scp_fixed_cost.setter
    def scp_fixed_cost(self, scp_fixed_cost):
        """Sets the scp_fixed_cost of this ScpProviders.


        :param scp_fixed_cost: The scp_fixed_cost of this ScpProviders.  # noqa: E501
        :type: float
        """
        
        if scp_fixed_cost is None:
            raise ValueError("Invalid value for `scp_fixed_cost`, must not be `None`")  # noqa: E501

        self._scp_fixed_cost = scp_fixed_cost

    @property
    def scp_revenue_share_percent(self):
        """Gets the scp_revenue_share_percent of this ScpProviders.  # noqa: E501


        :return: The scp_revenue_share_percent of this ScpProviders.  # noqa: E501
        :rtype: float
        """
        return self._scp_revenue_share_percent

    @scp_revenue_share_percent.setter
    def scp_revenue_share_percent(self, scp_revenue_share_percent):
        """Sets the scp_revenue_share_percent of this ScpProviders.


        :param scp_revenue_share_percent: The scp_revenue_share_percent of this ScpProviders.  # noqa: E501
        :type: float
        """
        
        if scp_revenue_share_percent is None:
            raise ValueError("Invalid value for `scp_revenue_share_percent`, must not be `None`")  # noqa: E501

        self._scp_revenue_share_percent = scp_revenue_share_percent

    @property
    def total_funds_currency_id(self):
        """Gets the total_funds_currency_id of this ScpProviders.  # noqa: E501


        :return: The total_funds_currency_id of this ScpProviders.  # noqa: E501
        :rtype: int
        """
        return self._total_funds_currency_id

    @total_funds_currency_id.setter
    def total_funds_currency_id(self, total_funds_currency_id):
        """Sets the total_funds_currency_id of this ScpProviders.


        :param total_funds_currency_id: The total_funds_currency_id of this ScpProviders.  # noqa: E501
        :type: int
        """

        self._total_funds_currency_id = total_funds_currency_id

    @property
    def emails_list(self):
        """Gets the emails_list of this ScpProviders.  # noqa: E501


        :return: The emails_list of this ScpProviders.  # noqa: E501
        :rtype: str
        """
        return self._emails_list

    @emails_list.setter
    def emails_list(self, emails_list):
        """Sets the emails_list of this ScpProviders.


        :param emails_list: The emails_list of this ScpProviders.  # noqa: E501
        :type: str
        """

        self._emails_list = emails_list

    @property
    def is_operated_by_splitit(self):
        """Gets the is_operated_by_splitit of this ScpProviders.  # noqa: E501


        :return: The is_operated_by_splitit of this ScpProviders.  # noqa: E501
        :rtype: bool
        """
        return self._is_operated_by_splitit

    @is_operated_by_splitit.setter
    def is_operated_by_splitit(self, is_operated_by_splitit):
        """Sets the is_operated_by_splitit of this ScpProviders.


        :param is_operated_by_splitit: The is_operated_by_splitit of this ScpProviders.  # noqa: E501
        :type: bool
        """

        self._is_operated_by_splitit = is_operated_by_splitit

    @property
    def is_funding_by_splitit(self):
        """Gets the is_funding_by_splitit of this ScpProviders.  # noqa: E501


        :return: The is_funding_by_splitit of this ScpProviders.  # noqa: E501
        :rtype: bool
        """
        return self._is_funding_by_splitit

    @is_funding_by_splitit.setter
    def is_funding_by_splitit(self, is_funding_by_splitit):
        """Sets the is_funding_by_splitit of this ScpProviders.


        :param is_funding_by_splitit: The is_funding_by_splitit of this ScpProviders.  # noqa: E501
        :type: bool
        """
        is_funding_by_splitit = bool(is_funding_by_splitit)
        if is_funding_by_splitit is None:
            raise ValueError("Invalid value for `is_funding_by_splitit`, must not be `None`")  # noqa: E501

        self._is_funding_by_splitit = is_funding_by_splitit

    @property
    def deduct_revenue_share_automatically_from_last_installment(self):
        """Gets the deduct_revenue_share_automatically_from_last_installment of this ScpProviders.  # noqa: E501


        :return: The deduct_revenue_share_automatically_from_last_installment of this ScpProviders.  # noqa: E501
        :rtype: bool
        """
        return self._deduct_revenue_share_automatically_from_last_installment

    @deduct_revenue_share_automatically_from_last_installment.setter
    def deduct_revenue_share_automatically_from_last_installment(self, deduct_revenue_share_automatically_from_last_installment):
        """Sets the deduct_revenue_share_automatically_from_last_installment of this ScpProviders.


        :param deduct_revenue_share_automatically_from_last_installment: The deduct_revenue_share_automatically_from_last_installment of this ScpProviders.  # noqa: E501
        :type: bool
        """
        deduct_revenue_share_automatically_from_last_installment = bool(deduct_revenue_share_automatically_from_last_installment)
        if deduct_revenue_share_automatically_from_last_installment is None:
            raise ValueError("Invalid value for `deduct_revenue_share_automatically_from_last_installment`, must not be `None`")  # noqa: E501

        self._deduct_revenue_share_automatically_from_last_installment = deduct_revenue_share_automatically_from_last_installment

    @property
    def fund_first_installment(self):
        """Gets the fund_first_installment of this ScpProviders.  # noqa: E501


        :return: The fund_first_installment of this ScpProviders.  # noqa: E501
        :rtype: bool
        """
        return self._fund_first_installment

    @fund_first_installment.setter
    def fund_first_installment(self, fund_first_installment):
        """Sets the fund_first_installment of this ScpProviders.


        :param fund_first_installment: The fund_first_installment of this ScpProviders.  # noqa: E501
        :type: bool
        """
        fund_first_installment = bool(fund_first_installment)
        if fund_first_installment is None:
            raise ValueError("Invalid value for `fund_first_installment`, must not be `None`")  # noqa: E501

        self._fund_first_installment = fund_first_installment

    @property
    def total_funds_currency(self):
        """Gets the total_funds_currency of this ScpProviders.  # noqa: E501


        :return: The total_funds_currency of this ScpProviders.  # noqa: E501
        :rtype: Currencies
        """
        return self._total_funds_currency

    @total_funds_currency.setter
    def total_funds_currency(self, total_funds_currency):
        """Sets the total_funds_currency of this ScpProviders.


        :param total_funds_currency: The total_funds_currency of this ScpProviders.  # noqa: E501
        :type: Currencies
        """

        self._total_funds_currency = total_funds_currency

    @property
    def parameter_group(self):
        """Gets the parameter_group of this ScpProviders.  # noqa: E501


        :return: The parameter_group of this ScpProviders.  # noqa: E501
        :rtype: ParameterGroups
        """
        return self._parameter_group

    @parameter_group.setter
    def parameter_group(self, parameter_group):
        """Sets the parameter_group of this ScpProviders.


        :param parameter_group: The parameter_group of this ScpProviders.  # noqa: E501
        :type: ParameterGroups
        """

        self._parameter_group = parameter_group

    @property
    def scp_providers_currencies(self):
        """Gets the scp_providers_currencies of this ScpProviders.  # noqa: E501


        :return: The scp_providers_currencies of this ScpProviders.  # noqa: E501
        :rtype: list[ScpProvidersCurrencies]
        """
        return self._scp_providers_currencies

    @scp_providers_currencies.setter
    def scp_providers_currencies(self, scp_providers_currencies):
        """Sets the scp_providers_currencies of this ScpProviders.


        :param scp_providers_currencies: The scp_providers_currencies of this ScpProviders.  # noqa: E501
        :type: list[ScpProvidersCurrencies]
        """

        self._scp_providers_currencies = scp_providers_currencies

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ScpProviders, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ScpProviders):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
