# coding: utf-8

"""
    splitit-web-api-public-sdk

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SystemEmailsTypes(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    allowed enum values
    """
    CONSUMERREAUTHORIZATIONNOTIFICATION = "ConsumerReAuthorizationNotification"
    ADMINNEWUSER = "AdminNewUser"
    MERCHANTPAYMENTFAILURE = "MerchantPaymentFailure"
    MERCHANTAUTHORIZATIONFAILURE = "MerchantAuthorizationFailure"
    MERCHANTCHB = "MerchantChb"
    MERCHANTCREDITCARDCHANGECONFIRMATION = "MerchantCreditCardChangeConfirmation"
    MERCHANTFULLCAPTURECONFIRMATION = "MerchantFullCaptureConfirmation"
    MERCHANTNEWUSER = "MerchantNewUser"
    MERCHANTNEWAPIUSER = "MerchantNewApiUser"
    CONSUMERINSTALLMENTPLANCONFIRMATION = "ConsumerInstallmentPlanConfirmation"
    CONSUMERPAYMENTCONFIRMATION = "ConsumerPaymentConfirmation"
    CONSUMERPAYMENTFAILURE = "ConsumerPaymentFailure"
    CONSUMERAUTHORIZATIONFAILURE = "ConsumerAuthorizationFailure"
    CONSUMERPARTIALREFUNDPLANINPROGRESS = "ConsumerPartialRefundPlanInProgress"
    CONSUMERCREDITCARDCHANGECONFIRMATION = "ConsumerCreditCardChangeConfirmation"
    CONSUMERFULLCAPTURECONFIRMATION = "ConsumerFullCaptureConfirmation"
    CONSUMERPASSWORDRESETUSERUNLOCK = "ConsumerPasswordResetUserUnlock"
    CONSUMERWAITINGFORAPPROVAL = "ConsumerWaitingForApproval"
    MERCHANTNOTIFYCONSUMERAPPROVALSET = "MerchantNotifyConsumerApprovalSet"
    CONSUMERNOTIFYMERCHANTUPDATEINSTALLMENTS = "ConsumerNotifyMerchantUpdateInstallments"
    MERCHANTREMAINDERCONSUMERWAITINGFORAPPROVAL = "MerchantRemainderConsumerWaitingForApproval"
    CONSUMERFULLCAPTURECONFIRMATIONTRIGGEREDBYCONSUMER = "ConsumerFullCaptureConfirmationTriggeredByConsumer"
    MERCHANTFULLCAPTURECONFIRMATIONTRIGGEREDBYCONSUMER = "MerchantFullCaptureConfirmationTriggeredByConsumer"
    CONSUMERPLANCANCELLED = "ConsumerPlanCancelled"
    MERCHANTPLANCANCELLED = "MerchantPlanCancelled"
    CONSUMERPLANCANCELLEDWITHREFUND = "ConsumerPlanCancelledWithRefund"
    MERCHANTPLANCANCELLEDWITHREFUND = "MerchantPlanCancelledWithRefund"
    CONSUMERCARDEXPIRATIONNOTIFICATION = "ConsumerCardExpirationNotification"
    SUPPORTCONSUMERPAYMENTFAILURE = "SupportConsumerPaymentFailure"
    SUPPORTCONSUMERAUTHORIZATIONFAILURE = "SupportConsumerAuthorizationFailure"
    CONSUMERCCREJECTIONSUCCESSFULLYRECOVERED = "ConsumerCcRejectionSuccessfullyRecovered"
    MERCHANTPENDINGSHIPMENTREMINDERNOTIFICATION = "MerchantPendingShipmentReminderNotification"
    CONSUMERPARTIALREFUNDPLANCOMPLETED = "ConsumerPartialRefundPlanCompleted"
    CONSUMERFULLREFUNDPLAN = "ConsumerFullRefundPlan"
    MERCHANTFUNDINGISOVERNOTIFICATION = "MerchantFundingIsOverNotification"
    MERCHANTSCPTERMINALFUNDINGHASEXCEEDSTHRESHOLDNOTIFICATION = "MerchantScpTerminalFundingHasExceedsThresholdNotification"
    MERCHANTBOARDINGSIGNUP = "MerchantBoardingSignup"
    MERCHANTBOARDINGSUBMIT = "MerchantBoardingSubmit"
    MERCHANTBOARDINGTEST = "MerchantBoardingTest"
    MERCHANTBOARDINGCERTIFIED = "MerchantBoardingCertified"
    MERCHANTBOARDINGGOLIVE = "MerchantBoardingGoLive"
    CONSUMERNONSECUREDPAYMENTFAILURE = "ConsumerNonSecuredPaymentFailure"
    MERCHANTNONSECUREDPAYMENTFAILURE = "MerchantNonSecuredPaymentFailure"
    AGENTNEWUSER = "AgentNewUser"
    CONSUMERCCREJECTIONSUCCESSFULLYRECOVEREDSINGLEINSTALLMENT = "ConsumerCcRejectionSuccessfullyRecoveredSingleInstallment"
    CONSUMERAUTHORIZATIONFAILURESINGLEINSTALLMENT = "ConsumerAuthorizationFailureSingleInstallment"
    CONSUMERCARDEXPIRATIONNOTIFICATIONSINGLEINSTALLMENT = "ConsumerCardExpirationNotificationSingleInstallment"
    REQUESTPAYMENT = "RequestPayment"
    REQUESTUPDATECARD = "RequestUpdateCard"

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
    }

    attribute_map = {
    }

    def __init__(self):  # noqa: E501
        """SystemEmailsTypes - a model defined in Swagger"""  # noqa: E501
        self.discriminator = None

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SystemEmailsTypes, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SystemEmailsTypes):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
