# coding: utf-8

"""
    splitit-web-api-public-sdk

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class CountrySubdivisions(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'country_id': 'int',
        'iso_code': 'str',
        'description': 'str',
        'iso2_code': 'str',
        'utc_time_offset_in_mins': 'int',
        'country': 'Countries',
        'state_limit_rule_datas': 'list[StateLimitRuleDatas]',
        'zip_address_details': 'list[ZipAddressDetails]'
    }

    attribute_map = {
        'id': 'Id',
        'country_id': 'CountryId',
        'iso_code': 'IsoCode',
        'description': 'Description',
        'iso2_code': 'Iso2Code',
        'utc_time_offset_in_mins': 'UtcTimeOffsetInMins',
        'country': 'Country',
        'state_limit_rule_datas': 'StateLimitRuleDatas',
        'zip_address_details': 'ZipAddressDetails'
    }

    def __init__(self, id=None, country_id=None, iso_code=None, description=None, iso2_code=None, utc_time_offset_in_mins=None, country=None, state_limit_rule_datas=None, zip_address_details=None):  # noqa: E501
        """CountrySubdivisions - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._country_id = None
        self._iso_code = None
        self._description = None
        self._iso2_code = None
        self._utc_time_offset_in_mins = None
        self._country = None
        self._state_limit_rule_datas = None
        self._zip_address_details = None
        self.discriminator = None

        self._id = id
        self._country_id = country_id
        if iso_code is not None:
            self._iso_code = iso_code
        if description is not None:
            self._description = description
        if iso2_code is not None:
            self._iso2_code = iso2_code
        self._utc_time_offset_in_mins = utc_time_offset_in_mins
        if country is not None:
            self._country = country
        if state_limit_rule_datas is not None:
            self._state_limit_rule_datas = state_limit_rule_datas
        if zip_address_details is not None:
            self._zip_address_details = zip_address_details

    @property
    def id(self):
        """Gets the id of this CountrySubdivisions.  # noqa: E501


        :return: The id of this CountrySubdivisions.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CountrySubdivisions.


        :param id: The id of this CountrySubdivisions.  # noqa: E501
        :type: int
        """
        
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def country_id(self):
        """Gets the country_id of this CountrySubdivisions.  # noqa: E501


        :return: The country_id of this CountrySubdivisions.  # noqa: E501
        :rtype: int
        """
        return self._country_id

    @country_id.setter
    def country_id(self, country_id):
        """Sets the country_id of this CountrySubdivisions.


        :param country_id: The country_id of this CountrySubdivisions.  # noqa: E501
        :type: int
        """
        
        if country_id is None:
            raise ValueError("Invalid value for `country_id`, must not be `None`")  # noqa: E501

        self._country_id = country_id

    @property
    def iso_code(self):
        """Gets the iso_code of this CountrySubdivisions.  # noqa: E501


        :return: The iso_code of this CountrySubdivisions.  # noqa: E501
        :rtype: str
        """
        return self._iso_code

    @iso_code.setter
    def iso_code(self, iso_code):
        """Sets the iso_code of this CountrySubdivisions.


        :param iso_code: The iso_code of this CountrySubdivisions.  # noqa: E501
        :type: str
        """

        self._iso_code = iso_code

    @property
    def description(self):
        """Gets the description of this CountrySubdivisions.  # noqa: E501


        :return: The description of this CountrySubdivisions.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CountrySubdivisions.


        :param description: The description of this CountrySubdivisions.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def iso2_code(self):
        """Gets the iso2_code of this CountrySubdivisions.  # noqa: E501


        :return: The iso2_code of this CountrySubdivisions.  # noqa: E501
        :rtype: str
        """
        return self._iso2_code

    @iso2_code.setter
    def iso2_code(self, iso2_code):
        """Sets the iso2_code of this CountrySubdivisions.


        :param iso2_code: The iso2_code of this CountrySubdivisions.  # noqa: E501
        :type: str
        """

        self._iso2_code = iso2_code

    @property
    def utc_time_offset_in_mins(self):
        """Gets the utc_time_offset_in_mins of this CountrySubdivisions.  # noqa: E501


        :return: The utc_time_offset_in_mins of this CountrySubdivisions.  # noqa: E501
        :rtype: int
        """
        return self._utc_time_offset_in_mins

    @utc_time_offset_in_mins.setter
    def utc_time_offset_in_mins(self, utc_time_offset_in_mins):
        """Sets the utc_time_offset_in_mins of this CountrySubdivisions.


        :param utc_time_offset_in_mins: The utc_time_offset_in_mins of this CountrySubdivisions.  # noqa: E501
        :type: int
        """
        
        if utc_time_offset_in_mins is None:
            raise ValueError("Invalid value for `utc_time_offset_in_mins`, must not be `None`")  # noqa: E501

        self._utc_time_offset_in_mins = utc_time_offset_in_mins

    @property
    def country(self):
        """Gets the country of this CountrySubdivisions.  # noqa: E501


        :return: The country of this CountrySubdivisions.  # noqa: E501
        :rtype: Countries
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this CountrySubdivisions.


        :param country: The country of this CountrySubdivisions.  # noqa: E501
        :type: Countries
        """

        self._country = country

    @property
    def state_limit_rule_datas(self):
        """Gets the state_limit_rule_datas of this CountrySubdivisions.  # noqa: E501


        :return: The state_limit_rule_datas of this CountrySubdivisions.  # noqa: E501
        :rtype: list[StateLimitRuleDatas]
        """
        return self._state_limit_rule_datas

    @state_limit_rule_datas.setter
    def state_limit_rule_datas(self, state_limit_rule_datas):
        """Sets the state_limit_rule_datas of this CountrySubdivisions.


        :param state_limit_rule_datas: The state_limit_rule_datas of this CountrySubdivisions.  # noqa: E501
        :type: list[StateLimitRuleDatas]
        """

        self._state_limit_rule_datas = state_limit_rule_datas

    @property
    def zip_address_details(self):
        """Gets the zip_address_details of this CountrySubdivisions.  # noqa: E501


        :return: The zip_address_details of this CountrySubdivisions.  # noqa: E501
        :rtype: list[ZipAddressDetails]
        """
        return self._zip_address_details

    @zip_address_details.setter
    def zip_address_details(self, zip_address_details):
        """Sets the zip_address_details of this CountrySubdivisions.


        :param zip_address_details: The zip_address_details of this CountrySubdivisions.  # noqa: E501
        :type: list[ZipAddressDetails]
        """

        self._zip_address_details = zip_address_details

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CountrySubdivisions, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CountrySubdivisions):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
