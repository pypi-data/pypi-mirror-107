# coding: utf-8

"""
    splitit-web-api-public-sdk

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class InstallmentPlanTerminalDatas(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'scp_variable_cost_annual_percent': 'float',
        'scp_funding_percent': 'float',
        'scp_reserve_pool_percent': 'float',
        'scp_return_merchant_max_days': 'int',
        'scp_revenue_share_percent': 'float',
        'scp_fixed_cost': 'float',
        'accounting_currency_id': 'int',
        'funding_rule_scp_setting_id': 'int',
        'fees_rule_data_id': 'int',
        'accounting_currency': 'Currencies',
        'fees_rule_data': 'FeesRuleDatas',
        'funding_rule_scp_setting': 'FundingRuleDataScpProviderSetting',
        'installment_plans': 'list[InstallmentPlans]'
    }

    attribute_map = {
        'id': 'Id',
        'scp_variable_cost_annual_percent': 'ScpVariableCostAnnualPercent',
        'scp_funding_percent': 'ScpFundingPercent',
        'scp_reserve_pool_percent': 'ScpReservePoolPercent',
        'scp_return_merchant_max_days': 'ScpReturnMerchantMaxDays',
        'scp_revenue_share_percent': 'ScpRevenueSharePercent',
        'scp_fixed_cost': 'ScpFixedCost',
        'accounting_currency_id': 'AccountingCurrencyId',
        'funding_rule_scp_setting_id': 'FundingRuleScpSettingId',
        'fees_rule_data_id': 'FeesRuleDataId',
        'accounting_currency': 'AccountingCurrency',
        'fees_rule_data': 'FeesRuleData',
        'funding_rule_scp_setting': 'FundingRuleScpSetting',
        'installment_plans': 'InstallmentPlans'
    }

    def __init__(self, id=None, scp_variable_cost_annual_percent=None, scp_funding_percent=None, scp_reserve_pool_percent=None, scp_return_merchant_max_days=None, scp_revenue_share_percent=None, scp_fixed_cost=None, accounting_currency_id=None, funding_rule_scp_setting_id=None, fees_rule_data_id=None, accounting_currency=None, fees_rule_data=None, funding_rule_scp_setting=None, installment_plans=None):  # noqa: E501
        """InstallmentPlanTerminalDatas - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._scp_variable_cost_annual_percent = None
        self._scp_funding_percent = None
        self._scp_reserve_pool_percent = None
        self._scp_return_merchant_max_days = None
        self._scp_revenue_share_percent = None
        self._scp_fixed_cost = None
        self._accounting_currency_id = None
        self._funding_rule_scp_setting_id = None
        self._fees_rule_data_id = None
        self._accounting_currency = None
        self._fees_rule_data = None
        self._funding_rule_scp_setting = None
        self._installment_plans = None
        self.discriminator = None

        self._id = id
        self._scp_variable_cost_annual_percent = scp_variable_cost_annual_percent
        self._scp_funding_percent = scp_funding_percent
        self._scp_reserve_pool_percent = scp_reserve_pool_percent
        self._scp_return_merchant_max_days = scp_return_merchant_max_days
        self._scp_revenue_share_percent = scp_revenue_share_percent
        self._scp_fixed_cost = scp_fixed_cost
        if accounting_currency_id is not None:
            self._accounting_currency_id = accounting_currency_id
        if funding_rule_scp_setting_id is not None:
            self._funding_rule_scp_setting_id = funding_rule_scp_setting_id
        if fees_rule_data_id is not None:
            self._fees_rule_data_id = fees_rule_data_id
        if accounting_currency is not None:
            self._accounting_currency = accounting_currency
        if fees_rule_data is not None:
            self._fees_rule_data = fees_rule_data
        if funding_rule_scp_setting is not None:
            self._funding_rule_scp_setting = funding_rule_scp_setting
        if installment_plans is not None:
            self._installment_plans = installment_plans

    @property
    def id(self):
        """Gets the id of this InstallmentPlanTerminalDatas.  # noqa: E501


        :return: The id of this InstallmentPlanTerminalDatas.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InstallmentPlanTerminalDatas.


        :param id: The id of this InstallmentPlanTerminalDatas.  # noqa: E501
        :type: int
        """
        
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def scp_variable_cost_annual_percent(self):
        """Gets the scp_variable_cost_annual_percent of this InstallmentPlanTerminalDatas.  # noqa: E501


        :return: The scp_variable_cost_annual_percent of this InstallmentPlanTerminalDatas.  # noqa: E501
        :rtype: float
        """
        return self._scp_variable_cost_annual_percent

    @scp_variable_cost_annual_percent.setter
    def scp_variable_cost_annual_percent(self, scp_variable_cost_annual_percent):
        """Sets the scp_variable_cost_annual_percent of this InstallmentPlanTerminalDatas.


        :param scp_variable_cost_annual_percent: The scp_variable_cost_annual_percent of this InstallmentPlanTerminalDatas.  # noqa: E501
        :type: float
        """
        
        if scp_variable_cost_annual_percent is None:
            raise ValueError("Invalid value for `scp_variable_cost_annual_percent`, must not be `None`")  # noqa: E501

        self._scp_variable_cost_annual_percent = scp_variable_cost_annual_percent

    @property
    def scp_funding_percent(self):
        """Gets the scp_funding_percent of this InstallmentPlanTerminalDatas.  # noqa: E501


        :return: The scp_funding_percent of this InstallmentPlanTerminalDatas.  # noqa: E501
        :rtype: float
        """
        return self._scp_funding_percent

    @scp_funding_percent.setter
    def scp_funding_percent(self, scp_funding_percent):
        """Sets the scp_funding_percent of this InstallmentPlanTerminalDatas.


        :param scp_funding_percent: The scp_funding_percent of this InstallmentPlanTerminalDatas.  # noqa: E501
        :type: float
        """
        
        if scp_funding_percent is None:
            raise ValueError("Invalid value for `scp_funding_percent`, must not be `None`")  # noqa: E501

        self._scp_funding_percent = scp_funding_percent

    @property
    def scp_reserve_pool_percent(self):
        """Gets the scp_reserve_pool_percent of this InstallmentPlanTerminalDatas.  # noqa: E501


        :return: The scp_reserve_pool_percent of this InstallmentPlanTerminalDatas.  # noqa: E501
        :rtype: float
        """
        return self._scp_reserve_pool_percent

    @scp_reserve_pool_percent.setter
    def scp_reserve_pool_percent(self, scp_reserve_pool_percent):
        """Sets the scp_reserve_pool_percent of this InstallmentPlanTerminalDatas.


        :param scp_reserve_pool_percent: The scp_reserve_pool_percent of this InstallmentPlanTerminalDatas.  # noqa: E501
        :type: float
        """
        
        if scp_reserve_pool_percent is None:
            raise ValueError("Invalid value for `scp_reserve_pool_percent`, must not be `None`")  # noqa: E501

        self._scp_reserve_pool_percent = scp_reserve_pool_percent

    @property
    def scp_return_merchant_max_days(self):
        """Gets the scp_return_merchant_max_days of this InstallmentPlanTerminalDatas.  # noqa: E501


        :return: The scp_return_merchant_max_days of this InstallmentPlanTerminalDatas.  # noqa: E501
        :rtype: int
        """
        return self._scp_return_merchant_max_days

    @scp_return_merchant_max_days.setter
    def scp_return_merchant_max_days(self, scp_return_merchant_max_days):
        """Sets the scp_return_merchant_max_days of this InstallmentPlanTerminalDatas.


        :param scp_return_merchant_max_days: The scp_return_merchant_max_days of this InstallmentPlanTerminalDatas.  # noqa: E501
        :type: int
        """
        
        if scp_return_merchant_max_days is None:
            raise ValueError("Invalid value for `scp_return_merchant_max_days`, must not be `None`")  # noqa: E501

        self._scp_return_merchant_max_days = scp_return_merchant_max_days

    @property
    def scp_revenue_share_percent(self):
        """Gets the scp_revenue_share_percent of this InstallmentPlanTerminalDatas.  # noqa: E501


        :return: The scp_revenue_share_percent of this InstallmentPlanTerminalDatas.  # noqa: E501
        :rtype: float
        """
        return self._scp_revenue_share_percent

    @scp_revenue_share_percent.setter
    def scp_revenue_share_percent(self, scp_revenue_share_percent):
        """Sets the scp_revenue_share_percent of this InstallmentPlanTerminalDatas.


        :param scp_revenue_share_percent: The scp_revenue_share_percent of this InstallmentPlanTerminalDatas.  # noqa: E501
        :type: float
        """
        
        if scp_revenue_share_percent is None:
            raise ValueError("Invalid value for `scp_revenue_share_percent`, must not be `None`")  # noqa: E501

        self._scp_revenue_share_percent = scp_revenue_share_percent

    @property
    def scp_fixed_cost(self):
        """Gets the scp_fixed_cost of this InstallmentPlanTerminalDatas.  # noqa: E501


        :return: The scp_fixed_cost of this InstallmentPlanTerminalDatas.  # noqa: E501
        :rtype: float
        """
        return self._scp_fixed_cost

    @scp_fixed_cost.setter
    def scp_fixed_cost(self, scp_fixed_cost):
        """Sets the scp_fixed_cost of this InstallmentPlanTerminalDatas.


        :param scp_fixed_cost: The scp_fixed_cost of this InstallmentPlanTerminalDatas.  # noqa: E501
        :type: float
        """
        
        if scp_fixed_cost is None:
            raise ValueError("Invalid value for `scp_fixed_cost`, must not be `None`")  # noqa: E501

        self._scp_fixed_cost = scp_fixed_cost

    @property
    def accounting_currency_id(self):
        """Gets the accounting_currency_id of this InstallmentPlanTerminalDatas.  # noqa: E501


        :return: The accounting_currency_id of this InstallmentPlanTerminalDatas.  # noqa: E501
        :rtype: int
        """
        return self._accounting_currency_id

    @accounting_currency_id.setter
    def accounting_currency_id(self, accounting_currency_id):
        """Sets the accounting_currency_id of this InstallmentPlanTerminalDatas.


        :param accounting_currency_id: The accounting_currency_id of this InstallmentPlanTerminalDatas.  # noqa: E501
        :type: int
        """

        self._accounting_currency_id = accounting_currency_id

    @property
    def funding_rule_scp_setting_id(self):
        """Gets the funding_rule_scp_setting_id of this InstallmentPlanTerminalDatas.  # noqa: E501


        :return: The funding_rule_scp_setting_id of this InstallmentPlanTerminalDatas.  # noqa: E501
        :rtype: int
        """
        return self._funding_rule_scp_setting_id

    @funding_rule_scp_setting_id.setter
    def funding_rule_scp_setting_id(self, funding_rule_scp_setting_id):
        """Sets the funding_rule_scp_setting_id of this InstallmentPlanTerminalDatas.


        :param funding_rule_scp_setting_id: The funding_rule_scp_setting_id of this InstallmentPlanTerminalDatas.  # noqa: E501
        :type: int
        """

        self._funding_rule_scp_setting_id = funding_rule_scp_setting_id

    @property
    def fees_rule_data_id(self):
        """Gets the fees_rule_data_id of this InstallmentPlanTerminalDatas.  # noqa: E501


        :return: The fees_rule_data_id of this InstallmentPlanTerminalDatas.  # noqa: E501
        :rtype: int
        """
        return self._fees_rule_data_id

    @fees_rule_data_id.setter
    def fees_rule_data_id(self, fees_rule_data_id):
        """Sets the fees_rule_data_id of this InstallmentPlanTerminalDatas.


        :param fees_rule_data_id: The fees_rule_data_id of this InstallmentPlanTerminalDatas.  # noqa: E501
        :type: int
        """

        self._fees_rule_data_id = fees_rule_data_id

    @property
    def accounting_currency(self):
        """Gets the accounting_currency of this InstallmentPlanTerminalDatas.  # noqa: E501


        :return: The accounting_currency of this InstallmentPlanTerminalDatas.  # noqa: E501
        :rtype: Currencies
        """
        return self._accounting_currency

    @accounting_currency.setter
    def accounting_currency(self, accounting_currency):
        """Sets the accounting_currency of this InstallmentPlanTerminalDatas.


        :param accounting_currency: The accounting_currency of this InstallmentPlanTerminalDatas.  # noqa: E501
        :type: Currencies
        """

        self._accounting_currency = accounting_currency

    @property
    def fees_rule_data(self):
        """Gets the fees_rule_data of this InstallmentPlanTerminalDatas.  # noqa: E501


        :return: The fees_rule_data of this InstallmentPlanTerminalDatas.  # noqa: E501
        :rtype: FeesRuleDatas
        """
        return self._fees_rule_data

    @fees_rule_data.setter
    def fees_rule_data(self, fees_rule_data):
        """Sets the fees_rule_data of this InstallmentPlanTerminalDatas.


        :param fees_rule_data: The fees_rule_data of this InstallmentPlanTerminalDatas.  # noqa: E501
        :type: FeesRuleDatas
        """

        self._fees_rule_data = fees_rule_data

    @property
    def funding_rule_scp_setting(self):
        """Gets the funding_rule_scp_setting of this InstallmentPlanTerminalDatas.  # noqa: E501


        :return: The funding_rule_scp_setting of this InstallmentPlanTerminalDatas.  # noqa: E501
        :rtype: FundingRuleDataScpProviderSetting
        """
        return self._funding_rule_scp_setting

    @funding_rule_scp_setting.setter
    def funding_rule_scp_setting(self, funding_rule_scp_setting):
        """Sets the funding_rule_scp_setting of this InstallmentPlanTerminalDatas.


        :param funding_rule_scp_setting: The funding_rule_scp_setting of this InstallmentPlanTerminalDatas.  # noqa: E501
        :type: FundingRuleDataScpProviderSetting
        """

        self._funding_rule_scp_setting = funding_rule_scp_setting

    @property
    def installment_plans(self):
        """Gets the installment_plans of this InstallmentPlanTerminalDatas.  # noqa: E501


        :return: The installment_plans of this InstallmentPlanTerminalDatas.  # noqa: E501
        :rtype: list[InstallmentPlans]
        """
        return self._installment_plans

    @installment_plans.setter
    def installment_plans(self, installment_plans):
        """Sets the installment_plans of this InstallmentPlanTerminalDatas.


        :param installment_plans: The installment_plans of this InstallmentPlanTerminalDatas.  # noqa: E501
        :type: list[InstallmentPlans]
        """

        self._installment_plans = installment_plans

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InstallmentPlanTerminalDatas, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InstallmentPlanTerminalDatas):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
