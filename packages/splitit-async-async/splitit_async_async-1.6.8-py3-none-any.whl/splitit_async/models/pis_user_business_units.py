# coding: utf-8

"""
    splitit-web-api-public-sdk

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class PisUserBusinessUnits(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'pis_user_unique_id': 'str',
        'pis_user_id': 'int',
        'business_unit_id': 'int',
        'business_unit': 'BusinessUnits',
        'pis_user': 'object'
    }

    attribute_map = {
        'pis_user_unique_id': 'PisUserUniqueId',
        'pis_user_id': 'PisUserId',
        'business_unit_id': 'BusinessUnitId',
        'business_unit': 'BusinessUnit',
        'pis_user': 'PisUser'
    }

    def __init__(self, pis_user_unique_id=None, pis_user_id=None, business_unit_id=None, business_unit=None, pis_user=None):  # noqa: E501
        """PisUserBusinessUnits - a model defined in Swagger"""  # noqa: E501

        self._pis_user_unique_id = None
        self._pis_user_id = None
        self._business_unit_id = None
        self._business_unit = None
        self._pis_user = None
        self.discriminator = None

        if pis_user_unique_id is not None:
            self._pis_user_unique_id = pis_user_unique_id
        self._pis_user_id = pis_user_id
        self._business_unit_id = business_unit_id
        if business_unit is not None:
            self._business_unit = business_unit
        if pis_user is not None:
            self._pis_user = pis_user

    @property
    def pis_user_unique_id(self):
        """Gets the pis_user_unique_id of this PisUserBusinessUnits.  # noqa: E501


        :return: The pis_user_unique_id of this PisUserBusinessUnits.  # noqa: E501
        :rtype: str
        """
        return self._pis_user_unique_id

    @pis_user_unique_id.setter
    def pis_user_unique_id(self, pis_user_unique_id):
        """Sets the pis_user_unique_id of this PisUserBusinessUnits.


        :param pis_user_unique_id: The pis_user_unique_id of this PisUserBusinessUnits.  # noqa: E501
        :type: str
        """

        self._pis_user_unique_id = pis_user_unique_id

    @property
    def pis_user_id(self):
        """Gets the pis_user_id of this PisUserBusinessUnits.  # noqa: E501


        :return: The pis_user_id of this PisUserBusinessUnits.  # noqa: E501
        :rtype: int
        """
        return self._pis_user_id

    @pis_user_id.setter
    def pis_user_id(self, pis_user_id):
        """Sets the pis_user_id of this PisUserBusinessUnits.


        :param pis_user_id: The pis_user_id of this PisUserBusinessUnits.  # noqa: E501
        :type: int
        """
        
        if pis_user_id is None:
            raise ValueError("Invalid value for `pis_user_id`, must not be `None`")  # noqa: E501

        self._pis_user_id = pis_user_id

    @property
    def business_unit_id(self):
        """Gets the business_unit_id of this PisUserBusinessUnits.  # noqa: E501


        :return: The business_unit_id of this PisUserBusinessUnits.  # noqa: E501
        :rtype: int
        """
        return self._business_unit_id

    @business_unit_id.setter
    def business_unit_id(self, business_unit_id):
        """Sets the business_unit_id of this PisUserBusinessUnits.


        :param business_unit_id: The business_unit_id of this PisUserBusinessUnits.  # noqa: E501
        :type: int
        """
        
        if business_unit_id is None:
            raise ValueError("Invalid value for `business_unit_id`, must not be `None`")  # noqa: E501

        self._business_unit_id = business_unit_id

    @property
    def business_unit(self):
        """Gets the business_unit of this PisUserBusinessUnits.  # noqa: E501


        :return: The business_unit of this PisUserBusinessUnits.  # noqa: E501
        :rtype: BusinessUnits
        """
        return self._business_unit

    @business_unit.setter
    def business_unit(self, business_unit):
        """Sets the business_unit of this PisUserBusinessUnits.


        :param business_unit: The business_unit of this PisUserBusinessUnits.  # noqa: E501
        :type: BusinessUnits
        """

        self._business_unit = business_unit

    @property
    def pis_user(self):
        """Gets the pis_user of this PisUserBusinessUnits.  # noqa: E501


        :return: The pis_user of this PisUserBusinessUnits.  # noqa: E501
        :rtype: object
        """
        return self._pis_user

    @pis_user.setter
    def pis_user(self, pis_user):
        """Sets the pis_user of this PisUserBusinessUnits.


        :param pis_user: The pis_user of this PisUserBusinessUnits.  # noqa: E501
        :type: object
        """

        self._pis_user = pis_user

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PisUserBusinessUnits, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PisUserBusinessUnits):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
