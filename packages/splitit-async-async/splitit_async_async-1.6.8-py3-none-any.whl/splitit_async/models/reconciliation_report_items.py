# coding: utf-8

"""
    splitit-web-api-public-sdk

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ReconciliationReportItems(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'gateway_amount': 'float',
        'gateway_count': 'int',
        'pisamount': 'float',
        'piscount': 'int',
        'is_identical': 'bool',
        'reconciliation_report_id': 'int',
        'reconciliation_report': 'ReconciliationReports',
        'transaction_type': 'OperationType',
        'gateway_type': 'ProcessorType'
    }

    attribute_map = {
        'id': 'Id',
        'gateway_amount': 'GatewayAmount',
        'gateway_count': 'GatewayCount',
        'pisamount': 'Pisamount',
        'piscount': 'Piscount',
        'is_identical': 'IsIdentical',
        'reconciliation_report_id': 'ReconciliationReportId',
        'reconciliation_report': 'ReconciliationReport',
        'transaction_type': 'TransactionType',
        'gateway_type': 'GatewayType'
    }

    def __init__(self, id=None, gateway_amount=None, gateway_count=None, pisamount=None, piscount=None, is_identical=None, reconciliation_report_id=None, reconciliation_report=None, transaction_type=None, gateway_type=None):  # noqa: E501
        """ReconciliationReportItems - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._gateway_amount = None
        self._gateway_count = None
        self._pisamount = None
        self._piscount = None
        self._is_identical = None
        self._reconciliation_report_id = None
        self._reconciliation_report = None
        self._transaction_type = None
        self._gateway_type = None
        self.discriminator = None

        self._id = id
        self._gateway_amount = gateway_amount
        self._gateway_count = gateway_count
        self._pisamount = pisamount
        self._piscount = piscount
        self._is_identical = is_identical
        self._reconciliation_report_id = reconciliation_report_id
        if reconciliation_report is not None:
            self._reconciliation_report = reconciliation_report
        self._transaction_type = transaction_type
        self._gateway_type = gateway_type

    @property
    def id(self):
        """Gets the id of this ReconciliationReportItems.  # noqa: E501


        :return: The id of this ReconciliationReportItems.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ReconciliationReportItems.


        :param id: The id of this ReconciliationReportItems.  # noqa: E501
        :type: int
        """
        
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def gateway_amount(self):
        """Gets the gateway_amount of this ReconciliationReportItems.  # noqa: E501


        :return: The gateway_amount of this ReconciliationReportItems.  # noqa: E501
        :rtype: float
        """
        return self._gateway_amount

    @gateway_amount.setter
    def gateway_amount(self, gateway_amount):
        """Sets the gateway_amount of this ReconciliationReportItems.


        :param gateway_amount: The gateway_amount of this ReconciliationReportItems.  # noqa: E501
        :type: float
        """
        
        if gateway_amount is None:
            raise ValueError("Invalid value for `gateway_amount`, must not be `None`")  # noqa: E501

        self._gateway_amount = gateway_amount

    @property
    def gateway_count(self):
        """Gets the gateway_count of this ReconciliationReportItems.  # noqa: E501


        :return: The gateway_count of this ReconciliationReportItems.  # noqa: E501
        :rtype: int
        """
        return self._gateway_count

    @gateway_count.setter
    def gateway_count(self, gateway_count):
        """Sets the gateway_count of this ReconciliationReportItems.


        :param gateway_count: The gateway_count of this ReconciliationReportItems.  # noqa: E501
        :type: int
        """
        
        if gateway_count is None:
            raise ValueError("Invalid value for `gateway_count`, must not be `None`")  # noqa: E501

        self._gateway_count = gateway_count

    @property
    def pisamount(self):
        """Gets the pisamount of this ReconciliationReportItems.  # noqa: E501


        :return: The pisamount of this ReconciliationReportItems.  # noqa: E501
        :rtype: float
        """
        return self._pisamount

    @pisamount.setter
    def pisamount(self, pisamount):
        """Sets the pisamount of this ReconciliationReportItems.


        :param pisamount: The pisamount of this ReconciliationReportItems.  # noqa: E501
        :type: float
        """
        
        if pisamount is None:
            raise ValueError("Invalid value for `pisamount`, must not be `None`")  # noqa: E501

        self._pisamount = pisamount

    @property
    def piscount(self):
        """Gets the piscount of this ReconciliationReportItems.  # noqa: E501


        :return: The piscount of this ReconciliationReportItems.  # noqa: E501
        :rtype: int
        """
        return self._piscount

    @piscount.setter
    def piscount(self, piscount):
        """Sets the piscount of this ReconciliationReportItems.


        :param piscount: The piscount of this ReconciliationReportItems.  # noqa: E501
        :type: int
        """
        
        if piscount is None:
            raise ValueError("Invalid value for `piscount`, must not be `None`")  # noqa: E501

        self._piscount = piscount

    @property
    def is_identical(self):
        """Gets the is_identical of this ReconciliationReportItems.  # noqa: E501


        :return: The is_identical of this ReconciliationReportItems.  # noqa: E501
        :rtype: bool
        """
        return self._is_identical

    @is_identical.setter
    def is_identical(self, is_identical):
        """Sets the is_identical of this ReconciliationReportItems.


        :param is_identical: The is_identical of this ReconciliationReportItems.  # noqa: E501
        :type: bool
        """
        is_identical = bool(is_identical)
        if is_identical is None:
            raise ValueError("Invalid value for `is_identical`, must not be `None`")  # noqa: E501

        self._is_identical = is_identical

    @property
    def reconciliation_report_id(self):
        """Gets the reconciliation_report_id of this ReconciliationReportItems.  # noqa: E501


        :return: The reconciliation_report_id of this ReconciliationReportItems.  # noqa: E501
        :rtype: int
        """
        return self._reconciliation_report_id

    @reconciliation_report_id.setter
    def reconciliation_report_id(self, reconciliation_report_id):
        """Sets the reconciliation_report_id of this ReconciliationReportItems.


        :param reconciliation_report_id: The reconciliation_report_id of this ReconciliationReportItems.  # noqa: E501
        :type: int
        """
        
        if reconciliation_report_id is None:
            raise ValueError("Invalid value for `reconciliation_report_id`, must not be `None`")  # noqa: E501

        self._reconciliation_report_id = reconciliation_report_id

    @property
    def reconciliation_report(self):
        """Gets the reconciliation_report of this ReconciliationReportItems.  # noqa: E501


        :return: The reconciliation_report of this ReconciliationReportItems.  # noqa: E501
        :rtype: ReconciliationReports
        """
        return self._reconciliation_report

    @reconciliation_report.setter
    def reconciliation_report(self, reconciliation_report):
        """Sets the reconciliation_report of this ReconciliationReportItems.


        :param reconciliation_report: The reconciliation_report of this ReconciliationReportItems.  # noqa: E501
        :type: ReconciliationReports
        """

        self._reconciliation_report = reconciliation_report

    @property
    def transaction_type(self):
        """Gets the transaction_type of this ReconciliationReportItems.  # noqa: E501


        :return: The transaction_type of this ReconciliationReportItems.  # noqa: E501
        :rtype: OperationType
        """
        return self._transaction_type

    @transaction_type.setter
    def transaction_type(self, transaction_type):
        """Sets the transaction_type of this ReconciliationReportItems.


        :param transaction_type: The transaction_type of this ReconciliationReportItems.  # noqa: E501
        :type: OperationType
        """
        
        if transaction_type is None:
            raise ValueError("Invalid value for `transaction_type`, must not be `None`")  # noqa: E501

        self._transaction_type = transaction_type

    @property
    def gateway_type(self):
        """Gets the gateway_type of this ReconciliationReportItems.  # noqa: E501


        :return: The gateway_type of this ReconciliationReportItems.  # noqa: E501
        :rtype: ProcessorType
        """
        return self._gateway_type

    @gateway_type.setter
    def gateway_type(self, gateway_type):
        """Sets the gateway_type of this ReconciliationReportItems.


        :param gateway_type: The gateway_type of this ReconciliationReportItems.  # noqa: E501
        :type: ProcessorType
        """
        
        if gateway_type is None:
            raise ValueError("Invalid value for `gateway_type`, must not be `None`")  # noqa: E501

        self._gateway_type = gateway_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ReconciliationReportItems, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReconciliationReportItems):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
