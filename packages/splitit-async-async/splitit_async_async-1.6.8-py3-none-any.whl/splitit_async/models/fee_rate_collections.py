# coding: utf-8

"""
    splitit-web-api-public-sdk

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class FeeRateCollections(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'range_type': 'RangeType',
        'fee_rates': 'list[FeeRates]'
    }

    attribute_map = {
        'id': 'Id',
        'range_type': 'RangeType',
        'fee_rates': 'FeeRates'
    }

    def __init__(self, id=None, range_type=None, fee_rates=None):  # noqa: E501
        """FeeRateCollections - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._range_type = None
        self._fee_rates = None
        self.discriminator = None

        self._id = id
        self._range_type = range_type
        if fee_rates is not None:
            self._fee_rates = fee_rates

    @property
    def id(self):
        """Gets the id of this FeeRateCollections.  # noqa: E501


        :return: The id of this FeeRateCollections.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this FeeRateCollections.


        :param id: The id of this FeeRateCollections.  # noqa: E501
        :type: int
        """
        
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def range_type(self):
        """Gets the range_type of this FeeRateCollections.  # noqa: E501


        :return: The range_type of this FeeRateCollections.  # noqa: E501
        :rtype: RangeType
        """
        return self._range_type

    @range_type.setter
    def range_type(self, range_type):
        """Sets the range_type of this FeeRateCollections.


        :param range_type: The range_type of this FeeRateCollections.  # noqa: E501
        :type: RangeType
        """
        
        if range_type is None:
            raise ValueError("Invalid value for `range_type`, must not be `None`")  # noqa: E501

        self._range_type = range_type

    @property
    def fee_rates(self):
        """Gets the fee_rates of this FeeRateCollections.  # noqa: E501


        :return: The fee_rates of this FeeRateCollections.  # noqa: E501
        :rtype: list[FeeRates]
        """
        return self._fee_rates

    @fee_rates.setter
    def fee_rates(self, fee_rates):
        """Sets the fee_rates of this FeeRateCollections.


        :param fee_rates: The fee_rates of this FeeRateCollections.  # noqa: E501
        :type: list[FeeRates]
        """

        self._fee_rates = fee_rates

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FeeRateCollections, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FeeRateCollections):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
