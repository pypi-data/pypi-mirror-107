# coding: utf-8

"""
    splitit-web-api-public-sdk

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Installments(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'installment_plan_id': 'int',
        'installment_number': 'int',
        'processor_id': 'int',
        'origin_utc_offset': 'float',
        'created_date_utc': 'datetime',
        'amount': 'float',
        'process_date_time': 'datetime',
        'process_date_time_utc': 'datetime',
        'is_refund': 'bool',
        'card_state_id': 'int',
        'original_amount': 'float',
        'refund_amount': 'float',
        'is_full_capture': 'bool',
        'authorized_amount': 'float',
        'is_pre_authorized': 'bool',
        'amount_for_funding': 'float',
        'card_state': 'CardStateLogs',
        'installment_plan': 'InstallmentPlans',
        'processor': 'Processors',
        'fees_documents': 'list[FeesDocuments]',
        'funding_collect_document_details': 'list[FundingCollectDocumentDetails]',
        'installment_payment_gateway_transaction_logs': 'list[InstallmentPaymentGatewayTransactionLogs]',
        'transfer_document_details': 'list[TransferDocumentDetails]',
        'merchant_account_type': 'MerchantAccountType',
        'status': 'InstallmentStatus'
    }

    attribute_map = {
        'id': 'Id',
        'installment_plan_id': 'InstallmentPlanId',
        'installment_number': 'InstallmentNumber',
        'processor_id': 'ProcessorId',
        'origin_utc_offset': 'OriginUtcOffset',
        'created_date_utc': 'CreatedDateUtc',
        'amount': 'Amount',
        'process_date_time': 'ProcessDateTime',
        'process_date_time_utc': 'ProcessDateTimeUtc',
        'is_refund': 'IsRefund',
        'card_state_id': 'CardStateId',
        'original_amount': 'OriginalAmount',
        'refund_amount': 'RefundAmount',
        'is_full_capture': 'IsFullCapture',
        'authorized_amount': 'AuthorizedAmount',
        'is_pre_authorized': 'IsPreAuthorized',
        'amount_for_funding': 'AmountForFunding',
        'card_state': 'CardState',
        'installment_plan': 'InstallmentPlan',
        'processor': 'Processor',
        'fees_documents': 'FeesDocuments',
        'funding_collect_document_details': 'FundingCollectDocumentDetails',
        'installment_payment_gateway_transaction_logs': 'InstallmentPaymentGatewayTransactionLogs',
        'transfer_document_details': 'TransferDocumentDetails',
        'merchant_account_type': 'MerchantAccountType',
        'status': 'Status'
    }

    def __init__(self, id=None, installment_plan_id=None, installment_number=None, processor_id=None, origin_utc_offset=None, created_date_utc=None, amount=None, process_date_time=None, process_date_time_utc=None, is_refund=None, card_state_id=None, original_amount=None, refund_amount=None, is_full_capture=None, authorized_amount=None, is_pre_authorized=None, amount_for_funding=None, card_state=None, installment_plan=None, processor=None, fees_documents=None, funding_collect_document_details=None, installment_payment_gateway_transaction_logs=None, transfer_document_details=None, merchant_account_type=None, status=None):  # noqa: E501
        """Installments - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._installment_plan_id = None
        self._installment_number = None
        self._processor_id = None
        self._origin_utc_offset = None
        self._created_date_utc = None
        self._amount = None
        self._process_date_time = None
        self._process_date_time_utc = None
        self._is_refund = None
        self._card_state_id = None
        self._original_amount = None
        self._refund_amount = None
        self._is_full_capture = None
        self._authorized_amount = None
        self._is_pre_authorized = None
        self._amount_for_funding = None
        self._card_state = None
        self._installment_plan = None
        self._processor = None
        self._fees_documents = None
        self._funding_collect_document_details = None
        self._installment_payment_gateway_transaction_logs = None
        self._transfer_document_details = None
        self._merchant_account_type = None
        self._status = None
        self.discriminator = None

        self._id = id
        self._installment_plan_id = installment_plan_id
        self._installment_number = installment_number
        self._processor_id = processor_id
        self._origin_utc_offset = origin_utc_offset
        self._created_date_utc = created_date_utc
        self._amount = amount
        if process_date_time is not None:
            self._process_date_time = process_date_time
        if process_date_time_utc is not None:
            self._process_date_time_utc = process_date_time_utc
        self._is_refund = is_refund
        if card_state_id is not None:
            self._card_state_id = card_state_id
        self._original_amount = original_amount
        self._refund_amount = refund_amount
        self._is_full_capture = is_full_capture
        self._authorized_amount = authorized_amount
        self._is_pre_authorized = is_pre_authorized
        self._amount_for_funding = amount_for_funding
        if card_state is not None:
            self._card_state = card_state
        if installment_plan is not None:
            self._installment_plan = installment_plan
        if processor is not None:
            self._processor = processor
        if fees_documents is not None:
            self._fees_documents = fees_documents
        if funding_collect_document_details is not None:
            self._funding_collect_document_details = funding_collect_document_details
        if installment_payment_gateway_transaction_logs is not None:
            self._installment_payment_gateway_transaction_logs = installment_payment_gateway_transaction_logs
        if transfer_document_details is not None:
            self._transfer_document_details = transfer_document_details
        self._merchant_account_type = merchant_account_type
        self._status = status

    @property
    def id(self):
        """Gets the id of this Installments.  # noqa: E501


        :return: The id of this Installments.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Installments.


        :param id: The id of this Installments.  # noqa: E501
        :type: int
        """
        
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def installment_plan_id(self):
        """Gets the installment_plan_id of this Installments.  # noqa: E501


        :return: The installment_plan_id of this Installments.  # noqa: E501
        :rtype: int
        """
        return self._installment_plan_id

    @installment_plan_id.setter
    def installment_plan_id(self, installment_plan_id):
        """Sets the installment_plan_id of this Installments.


        :param installment_plan_id: The installment_plan_id of this Installments.  # noqa: E501
        :type: int
        """
        
        if installment_plan_id is None:
            raise ValueError("Invalid value for `installment_plan_id`, must not be `None`")  # noqa: E501

        self._installment_plan_id = installment_plan_id

    @property
    def installment_number(self):
        """Gets the installment_number of this Installments.  # noqa: E501


        :return: The installment_number of this Installments.  # noqa: E501
        :rtype: int
        """
        return self._installment_number

    @installment_number.setter
    def installment_number(self, installment_number):
        """Sets the installment_number of this Installments.


        :param installment_number: The installment_number of this Installments.  # noqa: E501
        :type: int
        """
        
        if installment_number is None:
            raise ValueError("Invalid value for `installment_number`, must not be `None`")  # noqa: E501

        self._installment_number = installment_number

    @property
    def processor_id(self):
        """Gets the processor_id of this Installments.  # noqa: E501


        :return: The processor_id of this Installments.  # noqa: E501
        :rtype: int
        """
        return self._processor_id

    @processor_id.setter
    def processor_id(self, processor_id):
        """Sets the processor_id of this Installments.


        :param processor_id: The processor_id of this Installments.  # noqa: E501
        :type: int
        """
        
        if processor_id is None:
            raise ValueError("Invalid value for `processor_id`, must not be `None`")  # noqa: E501

        self._processor_id = processor_id

    @property
    def origin_utc_offset(self):
        """Gets the origin_utc_offset of this Installments.  # noqa: E501


        :return: The origin_utc_offset of this Installments.  # noqa: E501
        :rtype: float
        """
        return self._origin_utc_offset

    @origin_utc_offset.setter
    def origin_utc_offset(self, origin_utc_offset):
        """Sets the origin_utc_offset of this Installments.


        :param origin_utc_offset: The origin_utc_offset of this Installments.  # noqa: E501
        :type: float
        """
        
        if origin_utc_offset is None:
            raise ValueError("Invalid value for `origin_utc_offset`, must not be `None`")  # noqa: E501

        self._origin_utc_offset = origin_utc_offset

    @property
    def created_date_utc(self):
        """Gets the created_date_utc of this Installments.  # noqa: E501


        :return: The created_date_utc of this Installments.  # noqa: E501
        :rtype: datetime
        """
        return self._created_date_utc

    @created_date_utc.setter
    def created_date_utc(self, created_date_utc):
        """Sets the created_date_utc of this Installments.


        :param created_date_utc: The created_date_utc of this Installments.  # noqa: E501
        :type: datetime
        """
        
        if created_date_utc is None:
            raise ValueError("Invalid value for `created_date_utc`, must not be `None`")  # noqa: E501

        self._created_date_utc = created_date_utc

    @property
    def amount(self):
        """Gets the amount of this Installments.  # noqa: E501


        :return: The amount of this Installments.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this Installments.


        :param amount: The amount of this Installments.  # noqa: E501
        :type: float
        """
        
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")  # noqa: E501

        self._amount = amount

    @property
    def process_date_time(self):
        """Gets the process_date_time of this Installments.  # noqa: E501


        :return: The process_date_time of this Installments.  # noqa: E501
        :rtype: datetime
        """
        return self._process_date_time

    @process_date_time.setter
    def process_date_time(self, process_date_time):
        """Sets the process_date_time of this Installments.


        :param process_date_time: The process_date_time of this Installments.  # noqa: E501
        :type: datetime
        """

        self._process_date_time = process_date_time

    @property
    def process_date_time_utc(self):
        """Gets the process_date_time_utc of this Installments.  # noqa: E501


        :return: The process_date_time_utc of this Installments.  # noqa: E501
        :rtype: datetime
        """
        return self._process_date_time_utc

    @process_date_time_utc.setter
    def process_date_time_utc(self, process_date_time_utc):
        """Sets the process_date_time_utc of this Installments.


        :param process_date_time_utc: The process_date_time_utc of this Installments.  # noqa: E501
        :type: datetime
        """

        self._process_date_time_utc = process_date_time_utc

    @property
    def is_refund(self):
        """Gets the is_refund of this Installments.  # noqa: E501


        :return: The is_refund of this Installments.  # noqa: E501
        :rtype: bool
        """
        return self._is_refund

    @is_refund.setter
    def is_refund(self, is_refund):
        """Sets the is_refund of this Installments.


        :param is_refund: The is_refund of this Installments.  # noqa: E501
        :type: bool
        """
        is_refund = bool(is_refund)
        if is_refund is None:
            raise ValueError("Invalid value for `is_refund`, must not be `None`")  # noqa: E501

        self._is_refund = is_refund

    @property
    def card_state_id(self):
        """Gets the card_state_id of this Installments.  # noqa: E501


        :return: The card_state_id of this Installments.  # noqa: E501
        :rtype: int
        """
        return self._card_state_id

    @card_state_id.setter
    def card_state_id(self, card_state_id):
        """Sets the card_state_id of this Installments.


        :param card_state_id: The card_state_id of this Installments.  # noqa: E501
        :type: int
        """

        self._card_state_id = card_state_id

    @property
    def original_amount(self):
        """Gets the original_amount of this Installments.  # noqa: E501


        :return: The original_amount of this Installments.  # noqa: E501
        :rtype: float
        """
        return self._original_amount

    @original_amount.setter
    def original_amount(self, original_amount):
        """Sets the original_amount of this Installments.


        :param original_amount: The original_amount of this Installments.  # noqa: E501
        :type: float
        """
        
        if original_amount is None:
            raise ValueError("Invalid value for `original_amount`, must not be `None`")  # noqa: E501

        self._original_amount = original_amount

    @property
    def refund_amount(self):
        """Gets the refund_amount of this Installments.  # noqa: E501


        :return: The refund_amount of this Installments.  # noqa: E501
        :rtype: float
        """
        return self._refund_amount

    @refund_amount.setter
    def refund_amount(self, refund_amount):
        """Sets the refund_amount of this Installments.


        :param refund_amount: The refund_amount of this Installments.  # noqa: E501
        :type: float
        """
        
        if refund_amount is None:
            raise ValueError("Invalid value for `refund_amount`, must not be `None`")  # noqa: E501

        self._refund_amount = refund_amount

    @property
    def is_full_capture(self):
        """Gets the is_full_capture of this Installments.  # noqa: E501


        :return: The is_full_capture of this Installments.  # noqa: E501
        :rtype: bool
        """
        return self._is_full_capture

    @is_full_capture.setter
    def is_full_capture(self, is_full_capture):
        """Sets the is_full_capture of this Installments.


        :param is_full_capture: The is_full_capture of this Installments.  # noqa: E501
        :type: bool
        """
        is_full_capture = bool(is_full_capture)
        if is_full_capture is None:
            raise ValueError("Invalid value for `is_full_capture`, must not be `None`")  # noqa: E501

        self._is_full_capture = is_full_capture

    @property
    def authorized_amount(self):
        """Gets the authorized_amount of this Installments.  # noqa: E501


        :return: The authorized_amount of this Installments.  # noqa: E501
        :rtype: float
        """
        return self._authorized_amount

    @authorized_amount.setter
    def authorized_amount(self, authorized_amount):
        """Sets the authorized_amount of this Installments.


        :param authorized_amount: The authorized_amount of this Installments.  # noqa: E501
        :type: float
        """
        
        if authorized_amount is None:
            raise ValueError("Invalid value for `authorized_amount`, must not be `None`")  # noqa: E501

        self._authorized_amount = authorized_amount

    @property
    def is_pre_authorized(self):
        """Gets the is_pre_authorized of this Installments.  # noqa: E501


        :return: The is_pre_authorized of this Installments.  # noqa: E501
        :rtype: bool
        """
        return self._is_pre_authorized

    @is_pre_authorized.setter
    def is_pre_authorized(self, is_pre_authorized):
        """Sets the is_pre_authorized of this Installments.


        :param is_pre_authorized: The is_pre_authorized of this Installments.  # noqa: E501
        :type: bool
        """
        is_pre_authorized = bool(is_pre_authorized)
        if is_pre_authorized is None:
            raise ValueError("Invalid value for `is_pre_authorized`, must not be `None`")  # noqa: E501

        self._is_pre_authorized = is_pre_authorized

    @property
    def amount_for_funding(self):
        """Gets the amount_for_funding of this Installments.  # noqa: E501


        :return: The amount_for_funding of this Installments.  # noqa: E501
        :rtype: float
        """
        return self._amount_for_funding

    @amount_for_funding.setter
    def amount_for_funding(self, amount_for_funding):
        """Sets the amount_for_funding of this Installments.


        :param amount_for_funding: The amount_for_funding of this Installments.  # noqa: E501
        :type: float
        """
        
        if amount_for_funding is None:
            raise ValueError("Invalid value for `amount_for_funding`, must not be `None`")  # noqa: E501

        self._amount_for_funding = amount_for_funding

    @property
    def card_state(self):
        """Gets the card_state of this Installments.  # noqa: E501


        :return: The card_state of this Installments.  # noqa: E501
        :rtype: CardStateLogs
        """
        return self._card_state

    @card_state.setter
    def card_state(self, card_state):
        """Sets the card_state of this Installments.


        :param card_state: The card_state of this Installments.  # noqa: E501
        :type: CardStateLogs
        """

        self._card_state = card_state

    @property
    def installment_plan(self):
        """Gets the installment_plan of this Installments.  # noqa: E501


        :return: The installment_plan of this Installments.  # noqa: E501
        :rtype: InstallmentPlans
        """
        return self._installment_plan

    @installment_plan.setter
    def installment_plan(self, installment_plan):
        """Sets the installment_plan of this Installments.


        :param installment_plan: The installment_plan of this Installments.  # noqa: E501
        :type: InstallmentPlans
        """

        self._installment_plan = installment_plan

    @property
    def processor(self):
        """Gets the processor of this Installments.  # noqa: E501


        :return: The processor of this Installments.  # noqa: E501
        :rtype: Processors
        """
        return self._processor

    @processor.setter
    def processor(self, processor):
        """Sets the processor of this Installments.


        :param processor: The processor of this Installments.  # noqa: E501
        :type: Processors
        """

        self._processor = processor

    @property
    def fees_documents(self):
        """Gets the fees_documents of this Installments.  # noqa: E501


        :return: The fees_documents of this Installments.  # noqa: E501
        :rtype: list[FeesDocuments]
        """
        return self._fees_documents

    @fees_documents.setter
    def fees_documents(self, fees_documents):
        """Sets the fees_documents of this Installments.


        :param fees_documents: The fees_documents of this Installments.  # noqa: E501
        :type: list[FeesDocuments]
        """

        self._fees_documents = fees_documents

    @property
    def funding_collect_document_details(self):
        """Gets the funding_collect_document_details of this Installments.  # noqa: E501


        :return: The funding_collect_document_details of this Installments.  # noqa: E501
        :rtype: list[FundingCollectDocumentDetails]
        """
        return self._funding_collect_document_details

    @funding_collect_document_details.setter
    def funding_collect_document_details(self, funding_collect_document_details):
        """Sets the funding_collect_document_details of this Installments.


        :param funding_collect_document_details: The funding_collect_document_details of this Installments.  # noqa: E501
        :type: list[FundingCollectDocumentDetails]
        """

        self._funding_collect_document_details = funding_collect_document_details

    @property
    def installment_payment_gateway_transaction_logs(self):
        """Gets the installment_payment_gateway_transaction_logs of this Installments.  # noqa: E501


        :return: The installment_payment_gateway_transaction_logs of this Installments.  # noqa: E501
        :rtype: list[InstallmentPaymentGatewayTransactionLogs]
        """
        return self._installment_payment_gateway_transaction_logs

    @installment_payment_gateway_transaction_logs.setter
    def installment_payment_gateway_transaction_logs(self, installment_payment_gateway_transaction_logs):
        """Sets the installment_payment_gateway_transaction_logs of this Installments.


        :param installment_payment_gateway_transaction_logs: The installment_payment_gateway_transaction_logs of this Installments.  # noqa: E501
        :type: list[InstallmentPaymentGatewayTransactionLogs]
        """

        self._installment_payment_gateway_transaction_logs = installment_payment_gateway_transaction_logs

    @property
    def transfer_document_details(self):
        """Gets the transfer_document_details of this Installments.  # noqa: E501


        :return: The transfer_document_details of this Installments.  # noqa: E501
        :rtype: list[TransferDocumentDetails]
        """
        return self._transfer_document_details

    @transfer_document_details.setter
    def transfer_document_details(self, transfer_document_details):
        """Sets the transfer_document_details of this Installments.


        :param transfer_document_details: The transfer_document_details of this Installments.  # noqa: E501
        :type: list[TransferDocumentDetails]
        """

        self._transfer_document_details = transfer_document_details

    @property
    def merchant_account_type(self):
        """Gets the merchant_account_type of this Installments.  # noqa: E501


        :return: The merchant_account_type of this Installments.  # noqa: E501
        :rtype: MerchantAccountType
        """
        return self._merchant_account_type

    @merchant_account_type.setter
    def merchant_account_type(self, merchant_account_type):
        """Sets the merchant_account_type of this Installments.


        :param merchant_account_type: The merchant_account_type of this Installments.  # noqa: E501
        :type: MerchantAccountType
        """
        
        if merchant_account_type is None:
            raise ValueError("Invalid value for `merchant_account_type`, must not be `None`")  # noqa: E501

        self._merchant_account_type = merchant_account_type

    @property
    def status(self):
        """Gets the status of this Installments.  # noqa: E501


        :return: The status of this Installments.  # noqa: E501
        :rtype: InstallmentStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Installments.


        :param status: The status of this Installments.  # noqa: E501
        :type: InstallmentStatus
        """
        
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Installments, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Installments):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
