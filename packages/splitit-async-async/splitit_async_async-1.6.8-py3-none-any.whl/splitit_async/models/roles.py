# coding: utf-8

"""
    splitit-web-api-public-sdk

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Roles(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'role_strength': 'int',
        'business_party': 'BusinessParty',
        'business_activities': 'list[BusinessActivity]',
        'business_activities_serialized': 'str'
    }

    attribute_map = {
        'id': 'Id',
        'name': 'Name',
        'role_strength': 'RoleStrength',
        'business_party': 'BusinessParty',
        'business_activities': 'BusinessActivities',
        'business_activities_serialized': 'BusinessActivitiesSerialized'
    }

    def __init__(self, id=None, name=None, role_strength=None, business_party=None, business_activities=None, business_activities_serialized=None):  # noqa: E501
        """Roles - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._name = None
        self._role_strength = None
        self._business_party = None
        self._business_activities = None
        self._business_activities_serialized = None
        self.discriminator = None

        self._id = id
        if name is not None:
            self._name = name
        self._role_strength = role_strength
        self._business_party = business_party
        if business_activities is not None:
            self._business_activities = business_activities
        if business_activities_serialized is not None:
            self._business_activities_serialized = business_activities_serialized

    @property
    def id(self):
        """Gets the id of this Roles.  # noqa: E501


        :return: The id of this Roles.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Roles.


        :param id: The id of this Roles.  # noqa: E501
        :type: int
        """
        
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this Roles.  # noqa: E501


        :return: The name of this Roles.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Roles.


        :param name: The name of this Roles.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def role_strength(self):
        """Gets the role_strength of this Roles.  # noqa: E501


        :return: The role_strength of this Roles.  # noqa: E501
        :rtype: int
        """
        return self._role_strength

    @role_strength.setter
    def role_strength(self, role_strength):
        """Sets the role_strength of this Roles.


        :param role_strength: The role_strength of this Roles.  # noqa: E501
        :type: int
        """
        
        if role_strength is None:
            raise ValueError("Invalid value for `role_strength`, must not be `None`")  # noqa: E501

        self._role_strength = role_strength

    @property
    def business_party(self):
        """Gets the business_party of this Roles.  # noqa: E501


        :return: The business_party of this Roles.  # noqa: E501
        :rtype: BusinessParty
        """
        return self._business_party

    @business_party.setter
    def business_party(self, business_party):
        """Sets the business_party of this Roles.


        :param business_party: The business_party of this Roles.  # noqa: E501
        :type: BusinessParty
        """
        
        if business_party is None:
            raise ValueError("Invalid value for `business_party`, must not be `None`")  # noqa: E501

        self._business_party = business_party

    @property
    def business_activities(self):
        """Gets the business_activities of this Roles.  # noqa: E501


        :return: The business_activities of this Roles.  # noqa: E501
        :rtype: list[BusinessActivity]
        """
        return self._business_activities

    @business_activities.setter
    def business_activities(self, business_activities):
        """Sets the business_activities of this Roles.


        :param business_activities: The business_activities of this Roles.  # noqa: E501
        :type: list[BusinessActivity]
        """

        self._business_activities = business_activities

    @property
    def business_activities_serialized(self):
        """Gets the business_activities_serialized of this Roles.  # noqa: E501


        :return: The business_activities_serialized of this Roles.  # noqa: E501
        :rtype: str
        """
        return self._business_activities_serialized

    @business_activities_serialized.setter
    def business_activities_serialized(self, business_activities_serialized):
        """Sets the business_activities_serialized of this Roles.


        :param business_activities_serialized: The business_activities_serialized of this Roles.  # noqa: E501
        :type: str
        """

        self._business_activities_serialized = business_activities_serialized

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Roles, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Roles):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
