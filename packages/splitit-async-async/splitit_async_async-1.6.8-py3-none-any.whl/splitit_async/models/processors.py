# coding: utf-8

"""
    splitit-web-api-public-sdk

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Processors(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'api_url': 'str',
        'max_number_of_retries': 'int',
        'timeout_seconds': 'int',
        'max_auth': 'int',
        'grace_period': 'int',
        'async_refund_grace_period_days': 'int',
        'is_checked_mastercard': 'bool',
        'is_checked_upi': 'bool',
        'is_checked_visa': 'bool',
        'is_checked_amex': 'bool',
        'is_checked_maestro': 'bool',
        'is_checked_jcb': 'bool',
        'is_checked_discover': 'bool',
        'is3ds2_supported': 'bool',
        'gateway_apiassembly': 'str',
        'display_name': 'str',
        'gateway_apiimplementor_ns': 'str',
        'is_token_supported': 'bool',
        'consumer_update_cc_grace_period': 'str',
        'is_void_supported': 'bool',
        'is_void_after_fail_refund': 'bool',
        'min_amount_allowed_for_auth': 'float',
        'capture_delay_in_sec': 'int',
        'void_delay_in_sec': 'int',
        'allow_partial_void': 'bool',
        'installments': 'list[Installments]',
        'processor_authentication_parameters': 'list[ProcessorAuthenticationParameters]',
        're_authorizations': 'list[ReAuthorizations]',
        'terminal_gateway_datas': 'list[TerminalGatewayDatas]'
    }

    attribute_map = {
        'id': 'Id',
        'name': 'Name',
        'api_url': 'ApiUrl',
        'max_number_of_retries': 'MaxNumberOfRetries',
        'timeout_seconds': 'TimeoutSeconds',
        'max_auth': 'MaxAuth',
        'grace_period': 'GracePeriod',
        'async_refund_grace_period_days': 'AsyncRefundGracePeriodDays',
        'is_checked_mastercard': 'IsCheckedMastercard',
        'is_checked_upi': 'IsCheckedUpi',
        'is_checked_visa': 'IsCheckedVisa',
        'is_checked_amex': 'IsCheckedAmex',
        'is_checked_maestro': 'IsCheckedMaestro',
        'is_checked_jcb': 'IsCheckedJcb',
        'is_checked_discover': 'IsCheckedDiscover',
        'is3ds2_supported': 'Is3ds2Supported',
        'gateway_apiassembly': 'GatewayApiassembly',
        'display_name': 'DisplayName',
        'gateway_apiimplementor_ns': 'GatewayApiimplementorNs',
        'is_token_supported': 'IsTokenSupported',
        'consumer_update_cc_grace_period': 'ConsumerUpdateCcGracePeriod',
        'is_void_supported': 'IsVoidSupported',
        'is_void_after_fail_refund': 'IsVoidAfterFailRefund',
        'min_amount_allowed_for_auth': 'MinAmountAllowedForAuth',
        'capture_delay_in_sec': 'CaptureDelayInSec',
        'void_delay_in_sec': 'VoidDelayInSec',
        'allow_partial_void': 'AllowPartialVoid',
        'installments': 'Installments',
        'processor_authentication_parameters': 'ProcessorAuthenticationParameters',
        're_authorizations': 'ReAuthorizations',
        'terminal_gateway_datas': 'TerminalGatewayDatas'
    }

    def __init__(self, id=None, name=None, api_url=None, max_number_of_retries=None, timeout_seconds=None, max_auth=None, grace_period=None, async_refund_grace_period_days=None, is_checked_mastercard=None, is_checked_upi=None, is_checked_visa=None, is_checked_amex=None, is_checked_maestro=None, is_checked_jcb=None, is_checked_discover=None, is3ds2_supported=None, gateway_apiassembly=None, display_name=None, gateway_apiimplementor_ns=None, is_token_supported=None, consumer_update_cc_grace_period=None, is_void_supported=None, is_void_after_fail_refund=None, min_amount_allowed_for_auth=None, capture_delay_in_sec=None, void_delay_in_sec=None, allow_partial_void=None, installments=None, processor_authentication_parameters=None, re_authorizations=None, terminal_gateway_datas=None):  # noqa: E501
        """Processors - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._name = None
        self._api_url = None
        self._max_number_of_retries = None
        self._timeout_seconds = None
        self._max_auth = None
        self._grace_period = None
        self._async_refund_grace_period_days = None
        self._is_checked_mastercard = None
        self._is_checked_upi = None
        self._is_checked_visa = None
        self._is_checked_amex = None
        self._is_checked_maestro = None
        self._is_checked_jcb = None
        self._is_checked_discover = None
        self._is3ds2_supported = None
        self._gateway_apiassembly = None
        self._display_name = None
        self._gateway_apiimplementor_ns = None
        self._is_token_supported = None
        self._consumer_update_cc_grace_period = None
        self._is_void_supported = None
        self._is_void_after_fail_refund = None
        self._min_amount_allowed_for_auth = None
        self._capture_delay_in_sec = None
        self._void_delay_in_sec = None
        self._allow_partial_void = None
        self._installments = None
        self._processor_authentication_parameters = None
        self._re_authorizations = None
        self._terminal_gateway_datas = None
        self.discriminator = None

        self._id = id
        if name is not None:
            self._name = name
        if api_url is not None:
            self._api_url = api_url
        self._max_number_of_retries = max_number_of_retries
        self._timeout_seconds = timeout_seconds
        self._max_auth = max_auth
        self._grace_period = grace_period
        if async_refund_grace_period_days is not None:
            self._async_refund_grace_period_days = async_refund_grace_period_days
        self._is_checked_mastercard = is_checked_mastercard
        self._is_checked_upi = is_checked_upi
        self._is_checked_visa = is_checked_visa
        self._is_checked_amex = is_checked_amex
        self._is_checked_maestro = is_checked_maestro
        self._is_checked_jcb = is_checked_jcb
        self._is_checked_discover = is_checked_discover
        self._is3ds2_supported = is3ds2_supported
        if gateway_apiassembly is not None:
            self._gateway_apiassembly = gateway_apiassembly
        if display_name is not None:
            self._display_name = display_name
        if gateway_apiimplementor_ns is not None:
            self._gateway_apiimplementor_ns = gateway_apiimplementor_ns
        self._is_token_supported = is_token_supported
        if consumer_update_cc_grace_period is not None:
            self._consumer_update_cc_grace_period = consumer_update_cc_grace_period
        self._is_void_supported = is_void_supported
        self._is_void_after_fail_refund = is_void_after_fail_refund
        self._min_amount_allowed_for_auth = min_amount_allowed_for_auth
        self._capture_delay_in_sec = capture_delay_in_sec
        self._void_delay_in_sec = void_delay_in_sec
        self._allow_partial_void = allow_partial_void
        if installments is not None:
            self._installments = installments
        if processor_authentication_parameters is not None:
            self._processor_authentication_parameters = processor_authentication_parameters
        if re_authorizations is not None:
            self._re_authorizations = re_authorizations
        if terminal_gateway_datas is not None:
            self._terminal_gateway_datas = terminal_gateway_datas

    @property
    def id(self):
        """Gets the id of this Processors.  # noqa: E501


        :return: The id of this Processors.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Processors.


        :param id: The id of this Processors.  # noqa: E501
        :type: int
        """
        
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this Processors.  # noqa: E501


        :return: The name of this Processors.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Processors.


        :param name: The name of this Processors.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def api_url(self):
        """Gets the api_url of this Processors.  # noqa: E501


        :return: The api_url of this Processors.  # noqa: E501
        :rtype: str
        """
        return self._api_url

    @api_url.setter
    def api_url(self, api_url):
        """Sets the api_url of this Processors.


        :param api_url: The api_url of this Processors.  # noqa: E501
        :type: str
        """

        self._api_url = api_url

    @property
    def max_number_of_retries(self):
        """Gets the max_number_of_retries of this Processors.  # noqa: E501


        :return: The max_number_of_retries of this Processors.  # noqa: E501
        :rtype: int
        """
        return self._max_number_of_retries

    @max_number_of_retries.setter
    def max_number_of_retries(self, max_number_of_retries):
        """Sets the max_number_of_retries of this Processors.


        :param max_number_of_retries: The max_number_of_retries of this Processors.  # noqa: E501
        :type: int
        """
        
        if max_number_of_retries is None:
            raise ValueError("Invalid value for `max_number_of_retries`, must not be `None`")  # noqa: E501

        self._max_number_of_retries = max_number_of_retries

    @property
    def timeout_seconds(self):
        """Gets the timeout_seconds of this Processors.  # noqa: E501


        :return: The timeout_seconds of this Processors.  # noqa: E501
        :rtype: int
        """
        return self._timeout_seconds

    @timeout_seconds.setter
    def timeout_seconds(self, timeout_seconds):
        """Sets the timeout_seconds of this Processors.


        :param timeout_seconds: The timeout_seconds of this Processors.  # noqa: E501
        :type: int
        """
        
        if timeout_seconds is None:
            raise ValueError("Invalid value for `timeout_seconds`, must not be `None`")  # noqa: E501

        self._timeout_seconds = timeout_seconds

    @property
    def max_auth(self):
        """Gets the max_auth of this Processors.  # noqa: E501


        :return: The max_auth of this Processors.  # noqa: E501
        :rtype: int
        """
        return self._max_auth

    @max_auth.setter
    def max_auth(self, max_auth):
        """Sets the max_auth of this Processors.


        :param max_auth: The max_auth of this Processors.  # noqa: E501
        :type: int
        """
        
        if max_auth is None:
            raise ValueError("Invalid value for `max_auth`, must not be `None`")  # noqa: E501

        self._max_auth = max_auth

    @property
    def grace_period(self):
        """Gets the grace_period of this Processors.  # noqa: E501


        :return: The grace_period of this Processors.  # noqa: E501
        :rtype: int
        """
        return self._grace_period

    @grace_period.setter
    def grace_period(self, grace_period):
        """Sets the grace_period of this Processors.


        :param grace_period: The grace_period of this Processors.  # noqa: E501
        :type: int
        """
        
        if grace_period is None:
            raise ValueError("Invalid value for `grace_period`, must not be `None`")  # noqa: E501

        self._grace_period = grace_period

    @property
    def async_refund_grace_period_days(self):
        """Gets the async_refund_grace_period_days of this Processors.  # noqa: E501


        :return: The async_refund_grace_period_days of this Processors.  # noqa: E501
        :rtype: int
        """
        return self._async_refund_grace_period_days

    @async_refund_grace_period_days.setter
    def async_refund_grace_period_days(self, async_refund_grace_period_days):
        """Sets the async_refund_grace_period_days of this Processors.


        :param async_refund_grace_period_days: The async_refund_grace_period_days of this Processors.  # noqa: E501
        :type: int
        """

        self._async_refund_grace_period_days = async_refund_grace_period_days

    @property
    def is_checked_mastercard(self):
        """Gets the is_checked_mastercard of this Processors.  # noqa: E501


        :return: The is_checked_mastercard of this Processors.  # noqa: E501
        :rtype: bool
        """
        return self._is_checked_mastercard

    @is_checked_mastercard.setter
    def is_checked_mastercard(self, is_checked_mastercard):
        """Sets the is_checked_mastercard of this Processors.


        :param is_checked_mastercard: The is_checked_mastercard of this Processors.  # noqa: E501
        :type: bool
        """
        is_checked_mastercard = bool(is_checked_mastercard)
        if is_checked_mastercard is None:
            raise ValueError("Invalid value for `is_checked_mastercard`, must not be `None`")  # noqa: E501

        self._is_checked_mastercard = is_checked_mastercard

    @property
    def is_checked_upi(self):
        """Gets the is_checked_upi of this Processors.  # noqa: E501


        :return: The is_checked_upi of this Processors.  # noqa: E501
        :rtype: bool
        """
        return self._is_checked_upi

    @is_checked_upi.setter
    def is_checked_upi(self, is_checked_upi):
        """Sets the is_checked_upi of this Processors.


        :param is_checked_upi: The is_checked_upi of this Processors.  # noqa: E501
        :type: bool
        """
        is_checked_upi = bool(is_checked_upi)
        if is_checked_upi is None:
            raise ValueError("Invalid value for `is_checked_upi`, must not be `None`")  # noqa: E501

        self._is_checked_upi = is_checked_upi

    @property
    def is_checked_visa(self):
        """Gets the is_checked_visa of this Processors.  # noqa: E501


        :return: The is_checked_visa of this Processors.  # noqa: E501
        :rtype: bool
        """
        return self._is_checked_visa

    @is_checked_visa.setter
    def is_checked_visa(self, is_checked_visa):
        """Sets the is_checked_visa of this Processors.


        :param is_checked_visa: The is_checked_visa of this Processors.  # noqa: E501
        :type: bool
        """
        is_checked_visa = bool(is_checked_visa)
        if is_checked_visa is None:
            raise ValueError("Invalid value for `is_checked_visa`, must not be `None`")  # noqa: E501

        self._is_checked_visa = is_checked_visa

    @property
    def is_checked_amex(self):
        """Gets the is_checked_amex of this Processors.  # noqa: E501


        :return: The is_checked_amex of this Processors.  # noqa: E501
        :rtype: bool
        """
        return self._is_checked_amex

    @is_checked_amex.setter
    def is_checked_amex(self, is_checked_amex):
        """Sets the is_checked_amex of this Processors.


        :param is_checked_amex: The is_checked_amex of this Processors.  # noqa: E501
        :type: bool
        """
        is_checked_amex = bool(is_checked_amex)
        if is_checked_amex is None:
            raise ValueError("Invalid value for `is_checked_amex`, must not be `None`")  # noqa: E501

        self._is_checked_amex = is_checked_amex

    @property
    def is_checked_maestro(self):
        """Gets the is_checked_maestro of this Processors.  # noqa: E501


        :return: The is_checked_maestro of this Processors.  # noqa: E501
        :rtype: bool
        """
        return self._is_checked_maestro

    @is_checked_maestro.setter
    def is_checked_maestro(self, is_checked_maestro):
        """Sets the is_checked_maestro of this Processors.


        :param is_checked_maestro: The is_checked_maestro of this Processors.  # noqa: E501
        :type: bool
        """
        is_checked_maestro = bool(is_checked_maestro)
        if is_checked_maestro is None:
            raise ValueError("Invalid value for `is_checked_maestro`, must not be `None`")  # noqa: E501

        self._is_checked_maestro = is_checked_maestro

    @property
    def is_checked_jcb(self):
        """Gets the is_checked_jcb of this Processors.  # noqa: E501


        :return: The is_checked_jcb of this Processors.  # noqa: E501
        :rtype: bool
        """
        return self._is_checked_jcb

    @is_checked_jcb.setter
    def is_checked_jcb(self, is_checked_jcb):
        """Sets the is_checked_jcb of this Processors.


        :param is_checked_jcb: The is_checked_jcb of this Processors.  # noqa: E501
        :type: bool
        """
        is_checked_jcb = bool(is_checked_jcb)
        if is_checked_jcb is None:
            raise ValueError("Invalid value for `is_checked_jcb`, must not be `None`")  # noqa: E501

        self._is_checked_jcb = is_checked_jcb

    @property
    def is_checked_discover(self):
        """Gets the is_checked_discover of this Processors.  # noqa: E501


        :return: The is_checked_discover of this Processors.  # noqa: E501
        :rtype: bool
        """
        return self._is_checked_discover

    @is_checked_discover.setter
    def is_checked_discover(self, is_checked_discover):
        """Sets the is_checked_discover of this Processors.


        :param is_checked_discover: The is_checked_discover of this Processors.  # noqa: E501
        :type: bool
        """
        is_checked_discover = bool(is_checked_discover)
        if is_checked_discover is None:
            raise ValueError("Invalid value for `is_checked_discover`, must not be `None`")  # noqa: E501

        self._is_checked_discover = is_checked_discover

    @property
    def is3ds2_supported(self):
        """Gets the is3ds2_supported of this Processors.  # noqa: E501


        :return: The is3ds2_supported of this Processors.  # noqa: E501
        :rtype: bool
        """
        return self._is3ds2_supported

    @is3ds2_supported.setter
    def is3ds2_supported(self, is3ds2_supported):
        """Sets the is3ds2_supported of this Processors.


        :param is3ds2_supported: The is3ds2_supported of this Processors.  # noqa: E501
        :type: bool
        """
        is3ds2_supported = bool(is3ds2_supported)
        if is3ds2_supported is None:
            raise ValueError("Invalid value for `is3ds2_supported`, must not be `None`")  # noqa: E501

        self._is3ds2_supported = is3ds2_supported

    @property
    def gateway_apiassembly(self):
        """Gets the gateway_apiassembly of this Processors.  # noqa: E501


        :return: The gateway_apiassembly of this Processors.  # noqa: E501
        :rtype: str
        """
        return self._gateway_apiassembly

    @gateway_apiassembly.setter
    def gateway_apiassembly(self, gateway_apiassembly):
        """Sets the gateway_apiassembly of this Processors.


        :param gateway_apiassembly: The gateway_apiassembly of this Processors.  # noqa: E501
        :type: str
        """

        self._gateway_apiassembly = gateway_apiassembly

    @property
    def display_name(self):
        """Gets the display_name of this Processors.  # noqa: E501


        :return: The display_name of this Processors.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this Processors.


        :param display_name: The display_name of this Processors.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def gateway_apiimplementor_ns(self):
        """Gets the gateway_apiimplementor_ns of this Processors.  # noqa: E501


        :return: The gateway_apiimplementor_ns of this Processors.  # noqa: E501
        :rtype: str
        """
        return self._gateway_apiimplementor_ns

    @gateway_apiimplementor_ns.setter
    def gateway_apiimplementor_ns(self, gateway_apiimplementor_ns):
        """Sets the gateway_apiimplementor_ns of this Processors.


        :param gateway_apiimplementor_ns: The gateway_apiimplementor_ns of this Processors.  # noqa: E501
        :type: str
        """

        self._gateway_apiimplementor_ns = gateway_apiimplementor_ns

    @property
    def is_token_supported(self):
        """Gets the is_token_supported of this Processors.  # noqa: E501


        :return: The is_token_supported of this Processors.  # noqa: E501
        :rtype: bool
        """
        return self._is_token_supported

    @is_token_supported.setter
    def is_token_supported(self, is_token_supported):
        """Sets the is_token_supported of this Processors.


        :param is_token_supported: The is_token_supported of this Processors.  # noqa: E501
        :type: bool
        """
        is_token_supported = bool(is_token_supported)
        if is_token_supported is None:
            raise ValueError("Invalid value for `is_token_supported`, must not be `None`")  # noqa: E501

        self._is_token_supported = is_token_supported

    @property
    def consumer_update_cc_grace_period(self):
        """Gets the consumer_update_cc_grace_period of this Processors.  # noqa: E501


        :return: The consumer_update_cc_grace_period of this Processors.  # noqa: E501
        :rtype: str
        """
        return self._consumer_update_cc_grace_period

    @consumer_update_cc_grace_period.setter
    def consumer_update_cc_grace_period(self, consumer_update_cc_grace_period):
        """Sets the consumer_update_cc_grace_period of this Processors.


        :param consumer_update_cc_grace_period: The consumer_update_cc_grace_period of this Processors.  # noqa: E501
        :type: str
        """

        self._consumer_update_cc_grace_period = consumer_update_cc_grace_period

    @property
    def is_void_supported(self):
        """Gets the is_void_supported of this Processors.  # noqa: E501


        :return: The is_void_supported of this Processors.  # noqa: E501
        :rtype: bool
        """
        return self._is_void_supported

    @is_void_supported.setter
    def is_void_supported(self, is_void_supported):
        """Sets the is_void_supported of this Processors.


        :param is_void_supported: The is_void_supported of this Processors.  # noqa: E501
        :type: bool
        """
        is_void_supported = bool(is_void_supported)
        if is_void_supported is None:
            raise ValueError("Invalid value for `is_void_supported`, must not be `None`")  # noqa: E501

        self._is_void_supported = is_void_supported

    @property
    def is_void_after_fail_refund(self):
        """Gets the is_void_after_fail_refund of this Processors.  # noqa: E501


        :return: The is_void_after_fail_refund of this Processors.  # noqa: E501
        :rtype: bool
        """
        return self._is_void_after_fail_refund

    @is_void_after_fail_refund.setter
    def is_void_after_fail_refund(self, is_void_after_fail_refund):
        """Sets the is_void_after_fail_refund of this Processors.


        :param is_void_after_fail_refund: The is_void_after_fail_refund of this Processors.  # noqa: E501
        :type: bool
        """
        is_void_after_fail_refund = bool(is_void_after_fail_refund)
        if is_void_after_fail_refund is None:
            raise ValueError("Invalid value for `is_void_after_fail_refund`, must not be `None`")  # noqa: E501

        self._is_void_after_fail_refund = is_void_after_fail_refund

    @property
    def min_amount_allowed_for_auth(self):
        """Gets the min_amount_allowed_for_auth of this Processors.  # noqa: E501


        :return: The min_amount_allowed_for_auth of this Processors.  # noqa: E501
        :rtype: float
        """
        return self._min_amount_allowed_for_auth

    @min_amount_allowed_for_auth.setter
    def min_amount_allowed_for_auth(self, min_amount_allowed_for_auth):
        """Sets the min_amount_allowed_for_auth of this Processors.


        :param min_amount_allowed_for_auth: The min_amount_allowed_for_auth of this Processors.  # noqa: E501
        :type: float
        """
        
        if min_amount_allowed_for_auth is None:
            raise ValueError("Invalid value for `min_amount_allowed_for_auth`, must not be `None`")  # noqa: E501

        self._min_amount_allowed_for_auth = min_amount_allowed_for_auth

    @property
    def capture_delay_in_sec(self):
        """Gets the capture_delay_in_sec of this Processors.  # noqa: E501


        :return: The capture_delay_in_sec of this Processors.  # noqa: E501
        :rtype: int
        """
        return self._capture_delay_in_sec

    @capture_delay_in_sec.setter
    def capture_delay_in_sec(self, capture_delay_in_sec):
        """Sets the capture_delay_in_sec of this Processors.


        :param capture_delay_in_sec: The capture_delay_in_sec of this Processors.  # noqa: E501
        :type: int
        """
        
        if capture_delay_in_sec is None:
            raise ValueError("Invalid value for `capture_delay_in_sec`, must not be `None`")  # noqa: E501

        self._capture_delay_in_sec = capture_delay_in_sec

    @property
    def void_delay_in_sec(self):
        """Gets the void_delay_in_sec of this Processors.  # noqa: E501


        :return: The void_delay_in_sec of this Processors.  # noqa: E501
        :rtype: int
        """
        return self._void_delay_in_sec

    @void_delay_in_sec.setter
    def void_delay_in_sec(self, void_delay_in_sec):
        """Sets the void_delay_in_sec of this Processors.


        :param void_delay_in_sec: The void_delay_in_sec of this Processors.  # noqa: E501
        :type: int
        """
        
        if void_delay_in_sec is None:
            raise ValueError("Invalid value for `void_delay_in_sec`, must not be `None`")  # noqa: E501

        self._void_delay_in_sec = void_delay_in_sec

    @property
    def allow_partial_void(self):
        """Gets the allow_partial_void of this Processors.  # noqa: E501


        :return: The allow_partial_void of this Processors.  # noqa: E501
        :rtype: bool
        """
        return self._allow_partial_void

    @allow_partial_void.setter
    def allow_partial_void(self, allow_partial_void):
        """Sets the allow_partial_void of this Processors.


        :param allow_partial_void: The allow_partial_void of this Processors.  # noqa: E501
        :type: bool
        """
        allow_partial_void = bool(allow_partial_void)
        if allow_partial_void is None:
            raise ValueError("Invalid value for `allow_partial_void`, must not be `None`")  # noqa: E501

        self._allow_partial_void = allow_partial_void

    @property
    def installments(self):
        """Gets the installments of this Processors.  # noqa: E501


        :return: The installments of this Processors.  # noqa: E501
        :rtype: list[Installments]
        """
        return self._installments

    @installments.setter
    def installments(self, installments):
        """Sets the installments of this Processors.


        :param installments: The installments of this Processors.  # noqa: E501
        :type: list[Installments]
        """

        self._installments = installments

    @property
    def processor_authentication_parameters(self):
        """Gets the processor_authentication_parameters of this Processors.  # noqa: E501


        :return: The processor_authentication_parameters of this Processors.  # noqa: E501
        :rtype: list[ProcessorAuthenticationParameters]
        """
        return self._processor_authentication_parameters

    @processor_authentication_parameters.setter
    def processor_authentication_parameters(self, processor_authentication_parameters):
        """Sets the processor_authentication_parameters of this Processors.


        :param processor_authentication_parameters: The processor_authentication_parameters of this Processors.  # noqa: E501
        :type: list[ProcessorAuthenticationParameters]
        """

        self._processor_authentication_parameters = processor_authentication_parameters

    @property
    def re_authorizations(self):
        """Gets the re_authorizations of this Processors.  # noqa: E501


        :return: The re_authorizations of this Processors.  # noqa: E501
        :rtype: list[ReAuthorizations]
        """
        return self._re_authorizations

    @re_authorizations.setter
    def re_authorizations(self, re_authorizations):
        """Sets the re_authorizations of this Processors.


        :param re_authorizations: The re_authorizations of this Processors.  # noqa: E501
        :type: list[ReAuthorizations]
        """

        self._re_authorizations = re_authorizations

    @property
    def terminal_gateway_datas(self):
        """Gets the terminal_gateway_datas of this Processors.  # noqa: E501


        :return: The terminal_gateway_datas of this Processors.  # noqa: E501
        :rtype: list[TerminalGatewayDatas]
        """
        return self._terminal_gateway_datas

    @terminal_gateway_datas.setter
    def terminal_gateway_datas(self, terminal_gateway_datas):
        """Sets the terminal_gateway_datas of this Processors.


        :param terminal_gateway_datas: The terminal_gateway_datas of this Processors.  # noqa: E501
        :type: list[TerminalGatewayDatas]
        """

        self._terminal_gateway_datas = terminal_gateway_datas

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Processors, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Processors):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
