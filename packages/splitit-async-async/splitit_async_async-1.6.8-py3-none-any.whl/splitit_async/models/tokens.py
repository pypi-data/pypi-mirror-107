# coding: utf-8

"""
    splitit-web-api-public-sdk

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Tokens(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'token': 'str',
        'valid_till': 'datetime',
        'last_usage': 'datetime',
        'parameter_group_id': 'int',
        'type': 'str',
        'parameter_group': 'ParameterGroups',
        'user_id': 'int',
        'user_type': 'UserType',
        'installment_plan_id': 'int',
        'installment_plan': 'InstallmentPlans'
    }

    attribute_map = {
        'id': 'Id',
        'token': 'Token',
        'valid_till': 'ValidTill',
        'last_usage': 'LastUsage',
        'parameter_group_id': 'ParameterGroupId',
        'type': 'Type',
        'parameter_group': 'ParameterGroup',
        'user_id': 'UserId',
        'user_type': 'UserType',
        'installment_plan_id': 'InstallmentPlanId',
        'installment_plan': 'InstallmentPlan'
    }

    def __init__(self, id=None, token=None, valid_till=None, last_usage=None, parameter_group_id=None, type=None, parameter_group=None, user_id=None, user_type=None, installment_plan_id=None, installment_plan=None):  # noqa: E501
        """Tokens - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._token = None
        self._valid_till = None
        self._last_usage = None
        self._parameter_group_id = None
        self._type = None
        self._parameter_group = None
        self._user_id = None
        self._user_type = None
        self._installment_plan_id = None
        self._installment_plan = None
        self.discriminator = None

        self._id = id
        if token is not None:
            self._token = token
        if valid_till is not None:
            self._valid_till = valid_till
        if last_usage is not None:
            self._last_usage = last_usage
        if parameter_group_id is not None:
            self._parameter_group_id = parameter_group_id
        if type is not None:
            self._type = type
        if parameter_group is not None:
            self._parameter_group = parameter_group
        self._user_id = user_id
        self._user_type = user_type
        if installment_plan_id is not None:
            self._installment_plan_id = installment_plan_id
        if installment_plan is not None:
            self._installment_plan = installment_plan

    @property
    def id(self):
        """Gets the id of this Tokens.  # noqa: E501


        :return: The id of this Tokens.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Tokens.


        :param id: The id of this Tokens.  # noqa: E501
        :type: int
        """
        
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def token(self):
        """Gets the token of this Tokens.  # noqa: E501


        :return: The token of this Tokens.  # noqa: E501
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this Tokens.


        :param token: The token of this Tokens.  # noqa: E501
        :type: str
        """

        self._token = token

    @property
    def valid_till(self):
        """Gets the valid_till of this Tokens.  # noqa: E501


        :return: The valid_till of this Tokens.  # noqa: E501
        :rtype: datetime
        """
        return self._valid_till

    @valid_till.setter
    def valid_till(self, valid_till):
        """Sets the valid_till of this Tokens.


        :param valid_till: The valid_till of this Tokens.  # noqa: E501
        :type: datetime
        """

        self._valid_till = valid_till

    @property
    def last_usage(self):
        """Gets the last_usage of this Tokens.  # noqa: E501


        :return: The last_usage of this Tokens.  # noqa: E501
        :rtype: datetime
        """
        return self._last_usage

    @last_usage.setter
    def last_usage(self, last_usage):
        """Sets the last_usage of this Tokens.


        :param last_usage: The last_usage of this Tokens.  # noqa: E501
        :type: datetime
        """

        self._last_usage = last_usage

    @property
    def parameter_group_id(self):
        """Gets the parameter_group_id of this Tokens.  # noqa: E501


        :return: The parameter_group_id of this Tokens.  # noqa: E501
        :rtype: int
        """
        return self._parameter_group_id

    @parameter_group_id.setter
    def parameter_group_id(self, parameter_group_id):
        """Sets the parameter_group_id of this Tokens.


        :param parameter_group_id: The parameter_group_id of this Tokens.  # noqa: E501
        :type: int
        """

        self._parameter_group_id = parameter_group_id

    @property
    def type(self):
        """Gets the type of this Tokens.  # noqa: E501


        :return: The type of this Tokens.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Tokens.


        :param type: The type of this Tokens.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def parameter_group(self):
        """Gets the parameter_group of this Tokens.  # noqa: E501


        :return: The parameter_group of this Tokens.  # noqa: E501
        :rtype: ParameterGroups
        """
        return self._parameter_group

    @parameter_group.setter
    def parameter_group(self, parameter_group):
        """Sets the parameter_group of this Tokens.


        :param parameter_group: The parameter_group of this Tokens.  # noqa: E501
        :type: ParameterGroups
        """

        self._parameter_group = parameter_group

    @property
    def user_id(self):
        """Gets the user_id of this Tokens.  # noqa: E501


        :return: The user_id of this Tokens.  # noqa: E501
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this Tokens.


        :param user_id: The user_id of this Tokens.  # noqa: E501
        :type: int
        """
        
        if user_id is None:
            raise ValueError("Invalid value for `user_id`, must not be `None`")  # noqa: E501

        self._user_id = user_id

    @property
    def user_type(self):
        """Gets the user_type of this Tokens.  # noqa: E501


        :return: The user_type of this Tokens.  # noqa: E501
        :rtype: UserType
        """
        return self._user_type

    @user_type.setter
    def user_type(self, user_type):
        """Sets the user_type of this Tokens.


        :param user_type: The user_type of this Tokens.  # noqa: E501
        :type: UserType
        """
        
        if user_type is None:
            raise ValueError("Invalid value for `user_type`, must not be `None`")  # noqa: E501

        self._user_type = user_type

    @property
    def installment_plan_id(self):
        """Gets the installment_plan_id of this Tokens.  # noqa: E501


        :return: The installment_plan_id of this Tokens.  # noqa: E501
        :rtype: int
        """
        return self._installment_plan_id

    @installment_plan_id.setter
    def installment_plan_id(self, installment_plan_id):
        """Sets the installment_plan_id of this Tokens.


        :param installment_plan_id: The installment_plan_id of this Tokens.  # noqa: E501
        :type: int
        """

        self._installment_plan_id = installment_plan_id

    @property
    def installment_plan(self):
        """Gets the installment_plan of this Tokens.  # noqa: E501


        :return: The installment_plan of this Tokens.  # noqa: E501
        :rtype: InstallmentPlans
        """
        return self._installment_plan

    @installment_plan.setter
    def installment_plan(self, installment_plan):
        """Sets the installment_plan of this Tokens.


        :param installment_plan: The installment_plan of this Tokens.  # noqa: E501
        :type: InstallmentPlans
        """

        self._installment_plan = installment_plan

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Tokens, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Tokens):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
