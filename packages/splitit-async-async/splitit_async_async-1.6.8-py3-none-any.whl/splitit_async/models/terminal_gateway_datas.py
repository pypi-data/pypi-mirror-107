# coding: utf-8

"""
    splitit-web-api-public-sdk

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class TerminalGatewayDatas(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'token': 'str',
        'is_active': 'bool',
        'number_of_allowed_days_for_refund': 'int',
        'processor_id': 'int',
        'terminal_id': 'int',
        'is_address_requires': 'bool',
        'processor': 'Processors',
        'terminal': 'Terminals',
        'payment_gateway_transaction_logs': 'list[PaymentGatewayTransactionLogs]',
        'authentication_values': 'dict(str, str)',
        'authentication_values_as_xml': 'str'
    }

    attribute_map = {
        'id': 'Id',
        'token': 'Token',
        'is_active': 'IsActive',
        'number_of_allowed_days_for_refund': 'NumberOfAllowedDaysForRefund',
        'processor_id': 'ProcessorId',
        'terminal_id': 'TerminalId',
        'is_address_requires': 'IsAddressRequires',
        'processor': 'Processor',
        'terminal': 'Terminal',
        'payment_gateway_transaction_logs': 'PaymentGatewayTransactionLogs',
        'authentication_values': 'AuthenticationValues',
        'authentication_values_as_xml': 'AuthenticationValuesAsXml'
    }

    def __init__(self, id=None, token=None, is_active=None, number_of_allowed_days_for_refund=None, processor_id=None, terminal_id=None, is_address_requires=None, processor=None, terminal=None, payment_gateway_transaction_logs=None, authentication_values=None, authentication_values_as_xml=None):  # noqa: E501
        """TerminalGatewayDatas - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._token = None
        self._is_active = None
        self._number_of_allowed_days_for_refund = None
        self._processor_id = None
        self._terminal_id = None
        self._is_address_requires = None
        self._processor = None
        self._terminal = None
        self._payment_gateway_transaction_logs = None
        self._authentication_values = None
        self._authentication_values_as_xml = None
        self.discriminator = None

        self._id = id
        if token is not None:
            self._token = token
        self._is_active = is_active
        self._number_of_allowed_days_for_refund = number_of_allowed_days_for_refund
        if processor_id is not None:
            self._processor_id = processor_id
        if terminal_id is not None:
            self._terminal_id = terminal_id
        self._is_address_requires = is_address_requires
        if processor is not None:
            self._processor = processor
        if terminal is not None:
            self._terminal = terminal
        if payment_gateway_transaction_logs is not None:
            self._payment_gateway_transaction_logs = payment_gateway_transaction_logs
        if authentication_values is not None:
            self._authentication_values = authentication_values
        if authentication_values_as_xml is not None:
            self._authentication_values_as_xml = authentication_values_as_xml

    @property
    def id(self):
        """Gets the id of this TerminalGatewayDatas.  # noqa: E501


        :return: The id of this TerminalGatewayDatas.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TerminalGatewayDatas.


        :param id: The id of this TerminalGatewayDatas.  # noqa: E501
        :type: int
        """
        
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def token(self):
        """Gets the token of this TerminalGatewayDatas.  # noqa: E501


        :return: The token of this TerminalGatewayDatas.  # noqa: E501
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this TerminalGatewayDatas.


        :param token: The token of this TerminalGatewayDatas.  # noqa: E501
        :type: str
        """

        self._token = token

    @property
    def is_active(self):
        """Gets the is_active of this TerminalGatewayDatas.  # noqa: E501


        :return: The is_active of this TerminalGatewayDatas.  # noqa: E501
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this TerminalGatewayDatas.


        :param is_active: The is_active of this TerminalGatewayDatas.  # noqa: E501
        :type: bool
        """
        is_active = bool(is_active)
        if is_active is None:
            raise ValueError("Invalid value for `is_active`, must not be `None`")  # noqa: E501

        self._is_active = is_active

    @property
    def number_of_allowed_days_for_refund(self):
        """Gets the number_of_allowed_days_for_refund of this TerminalGatewayDatas.  # noqa: E501


        :return: The number_of_allowed_days_for_refund of this TerminalGatewayDatas.  # noqa: E501
        :rtype: int
        """
        return self._number_of_allowed_days_for_refund

    @number_of_allowed_days_for_refund.setter
    def number_of_allowed_days_for_refund(self, number_of_allowed_days_for_refund):
        """Sets the number_of_allowed_days_for_refund of this TerminalGatewayDatas.


        :param number_of_allowed_days_for_refund: The number_of_allowed_days_for_refund of this TerminalGatewayDatas.  # noqa: E501
        :type: int
        """
        
        if number_of_allowed_days_for_refund is None:
            raise ValueError("Invalid value for `number_of_allowed_days_for_refund`, must not be `None`")  # noqa: E501

        self._number_of_allowed_days_for_refund = number_of_allowed_days_for_refund

    @property
    def processor_id(self):
        """Gets the processor_id of this TerminalGatewayDatas.  # noqa: E501


        :return: The processor_id of this TerminalGatewayDatas.  # noqa: E501
        :rtype: int
        """
        return self._processor_id

    @processor_id.setter
    def processor_id(self, processor_id):
        """Sets the processor_id of this TerminalGatewayDatas.


        :param processor_id: The processor_id of this TerminalGatewayDatas.  # noqa: E501
        :type: int
        """

        self._processor_id = processor_id

    @property
    def terminal_id(self):
        """Gets the terminal_id of this TerminalGatewayDatas.  # noqa: E501


        :return: The terminal_id of this TerminalGatewayDatas.  # noqa: E501
        :rtype: int
        """
        return self._terminal_id

    @terminal_id.setter
    def terminal_id(self, terminal_id):
        """Sets the terminal_id of this TerminalGatewayDatas.


        :param terminal_id: The terminal_id of this TerminalGatewayDatas.  # noqa: E501
        :type: int
        """

        self._terminal_id = terminal_id

    @property
    def is_address_requires(self):
        """Gets the is_address_requires of this TerminalGatewayDatas.  # noqa: E501


        :return: The is_address_requires of this TerminalGatewayDatas.  # noqa: E501
        :rtype: bool
        """
        return self._is_address_requires

    @is_address_requires.setter
    def is_address_requires(self, is_address_requires):
        """Sets the is_address_requires of this TerminalGatewayDatas.


        :param is_address_requires: The is_address_requires of this TerminalGatewayDatas.  # noqa: E501
        :type: bool
        """
        is_address_requires = bool(is_address_requires)
        if is_address_requires is None:
            raise ValueError("Invalid value for `is_address_requires`, must not be `None`")  # noqa: E501

        self._is_address_requires = is_address_requires

    @property
    def processor(self):
        """Gets the processor of this TerminalGatewayDatas.  # noqa: E501


        :return: The processor of this TerminalGatewayDatas.  # noqa: E501
        :rtype: Processors
        """
        return self._processor

    @processor.setter
    def processor(self, processor):
        """Sets the processor of this TerminalGatewayDatas.


        :param processor: The processor of this TerminalGatewayDatas.  # noqa: E501
        :type: Processors
        """

        self._processor = processor

    @property
    def terminal(self):
        """Gets the terminal of this TerminalGatewayDatas.  # noqa: E501


        :return: The terminal of this TerminalGatewayDatas.  # noqa: E501
        :rtype: Terminals
        """
        return self._terminal

    @terminal.setter
    def terminal(self, terminal):
        """Sets the terminal of this TerminalGatewayDatas.


        :param terminal: The terminal of this TerminalGatewayDatas.  # noqa: E501
        :type: Terminals
        """

        self._terminal = terminal

    @property
    def payment_gateway_transaction_logs(self):
        """Gets the payment_gateway_transaction_logs of this TerminalGatewayDatas.  # noqa: E501


        :return: The payment_gateway_transaction_logs of this TerminalGatewayDatas.  # noqa: E501
        :rtype: list[PaymentGatewayTransactionLogs]
        """
        return self._payment_gateway_transaction_logs

    @payment_gateway_transaction_logs.setter
    def payment_gateway_transaction_logs(self, payment_gateway_transaction_logs):
        """Sets the payment_gateway_transaction_logs of this TerminalGatewayDatas.


        :param payment_gateway_transaction_logs: The payment_gateway_transaction_logs of this TerminalGatewayDatas.  # noqa: E501
        :type: list[PaymentGatewayTransactionLogs]
        """

        self._payment_gateway_transaction_logs = payment_gateway_transaction_logs

    @property
    def authentication_values(self):
        """Gets the authentication_values of this TerminalGatewayDatas.  # noqa: E501


        :return: The authentication_values of this TerminalGatewayDatas.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._authentication_values

    @authentication_values.setter
    def authentication_values(self, authentication_values):
        """Sets the authentication_values of this TerminalGatewayDatas.


        :param authentication_values: The authentication_values of this TerminalGatewayDatas.  # noqa: E501
        :type: dict(str, str)
        """

        self._authentication_values = authentication_values

    @property
    def authentication_values_as_xml(self):
        """Gets the authentication_values_as_xml of this TerminalGatewayDatas.  # noqa: E501


        :return: The authentication_values_as_xml of this TerminalGatewayDatas.  # noqa: E501
        :rtype: str
        """
        return self._authentication_values_as_xml

    @authentication_values_as_xml.setter
    def authentication_values_as_xml(self, authentication_values_as_xml):
        """Sets the authentication_values_as_xml of this TerminalGatewayDatas.


        :param authentication_values_as_xml: The authentication_values_as_xml of this TerminalGatewayDatas.  # noqa: E501
        :type: str
        """

        self._authentication_values_as_xml = authentication_values_as_xml

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TerminalGatewayDatas, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TerminalGatewayDatas):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
