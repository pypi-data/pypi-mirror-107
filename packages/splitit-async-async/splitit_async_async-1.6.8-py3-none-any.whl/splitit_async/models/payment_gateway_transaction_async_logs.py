# coding: utf-8

"""
    splitit-web-api-public-sdk

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class PaymentGatewayTransactionAsyncLogs(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'result': 'bool',
        'manual_verification': 'bool',
        'response_log': 'str',
        'reference_gateway_transaction_id': 'str',
        'reference_payment_gateway_transaction_log_id': 'int',
        'reference_payment_gateway_transaction_log': 'PaymentGatewayTransactionLogs'
    }

    attribute_map = {
        'id': 'Id',
        'result': 'Result',
        'manual_verification': 'ManualVerification',
        'response_log': 'ResponseLog',
        'reference_gateway_transaction_id': 'ReferenceGatewayTransactionId',
        'reference_payment_gateway_transaction_log_id': 'ReferencePaymentGatewayTransactionLogId',
        'reference_payment_gateway_transaction_log': 'ReferencePaymentGatewayTransactionLog'
    }

    def __init__(self, id=None, result=None, manual_verification=None, response_log=None, reference_gateway_transaction_id=None, reference_payment_gateway_transaction_log_id=None, reference_payment_gateway_transaction_log=None):  # noqa: E501
        """PaymentGatewayTransactionAsyncLogs - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._result = None
        self._manual_verification = None
        self._response_log = None
        self._reference_gateway_transaction_id = None
        self._reference_payment_gateway_transaction_log_id = None
        self._reference_payment_gateway_transaction_log = None
        self.discriminator = None

        self._id = id
        self._result = result
        self._manual_verification = manual_verification
        if response_log is not None:
            self._response_log = response_log
        if reference_gateway_transaction_id is not None:
            self._reference_gateway_transaction_id = reference_gateway_transaction_id
        if reference_payment_gateway_transaction_log_id is not None:
            self._reference_payment_gateway_transaction_log_id = reference_payment_gateway_transaction_log_id
        if reference_payment_gateway_transaction_log is not None:
            self._reference_payment_gateway_transaction_log = reference_payment_gateway_transaction_log

    @property
    def id(self):
        """Gets the id of this PaymentGatewayTransactionAsyncLogs.  # noqa: E501


        :return: The id of this PaymentGatewayTransactionAsyncLogs.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PaymentGatewayTransactionAsyncLogs.


        :param id: The id of this PaymentGatewayTransactionAsyncLogs.  # noqa: E501
        :type: int
        """
        
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def result(self):
        """Gets the result of this PaymentGatewayTransactionAsyncLogs.  # noqa: E501


        :return: The result of this PaymentGatewayTransactionAsyncLogs.  # noqa: E501
        :rtype: bool
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this PaymentGatewayTransactionAsyncLogs.


        :param result: The result of this PaymentGatewayTransactionAsyncLogs.  # noqa: E501
        :type: bool
        """
        result = bool(result)
        if result is None:
            raise ValueError("Invalid value for `result`, must not be `None`")  # noqa: E501

        self._result = result

    @property
    def manual_verification(self):
        """Gets the manual_verification of this PaymentGatewayTransactionAsyncLogs.  # noqa: E501


        :return: The manual_verification of this PaymentGatewayTransactionAsyncLogs.  # noqa: E501
        :rtype: bool
        """
        return self._manual_verification

    @manual_verification.setter
    def manual_verification(self, manual_verification):
        """Sets the manual_verification of this PaymentGatewayTransactionAsyncLogs.


        :param manual_verification: The manual_verification of this PaymentGatewayTransactionAsyncLogs.  # noqa: E501
        :type: bool
        """
        manual_verification = bool(manual_verification)
        if manual_verification is None:
            raise ValueError("Invalid value for `manual_verification`, must not be `None`")  # noqa: E501

        self._manual_verification = manual_verification

    @property
    def response_log(self):
        """Gets the response_log of this PaymentGatewayTransactionAsyncLogs.  # noqa: E501


        :return: The response_log of this PaymentGatewayTransactionAsyncLogs.  # noqa: E501
        :rtype: str
        """
        return self._response_log

    @response_log.setter
    def response_log(self, response_log):
        """Sets the response_log of this PaymentGatewayTransactionAsyncLogs.


        :param response_log: The response_log of this PaymentGatewayTransactionAsyncLogs.  # noqa: E501
        :type: str
        """

        self._response_log = response_log

    @property
    def reference_gateway_transaction_id(self):
        """Gets the reference_gateway_transaction_id of this PaymentGatewayTransactionAsyncLogs.  # noqa: E501


        :return: The reference_gateway_transaction_id of this PaymentGatewayTransactionAsyncLogs.  # noqa: E501
        :rtype: str
        """
        return self._reference_gateway_transaction_id

    @reference_gateway_transaction_id.setter
    def reference_gateway_transaction_id(self, reference_gateway_transaction_id):
        """Sets the reference_gateway_transaction_id of this PaymentGatewayTransactionAsyncLogs.


        :param reference_gateway_transaction_id: The reference_gateway_transaction_id of this PaymentGatewayTransactionAsyncLogs.  # noqa: E501
        :type: str
        """

        self._reference_gateway_transaction_id = reference_gateway_transaction_id

    @property
    def reference_payment_gateway_transaction_log_id(self):
        """Gets the reference_payment_gateway_transaction_log_id of this PaymentGatewayTransactionAsyncLogs.  # noqa: E501


        :return: The reference_payment_gateway_transaction_log_id of this PaymentGatewayTransactionAsyncLogs.  # noqa: E501
        :rtype: int
        """
        return self._reference_payment_gateway_transaction_log_id

    @reference_payment_gateway_transaction_log_id.setter
    def reference_payment_gateway_transaction_log_id(self, reference_payment_gateway_transaction_log_id):
        """Sets the reference_payment_gateway_transaction_log_id of this PaymentGatewayTransactionAsyncLogs.


        :param reference_payment_gateway_transaction_log_id: The reference_payment_gateway_transaction_log_id of this PaymentGatewayTransactionAsyncLogs.  # noqa: E501
        :type: int
        """

        self._reference_payment_gateway_transaction_log_id = reference_payment_gateway_transaction_log_id

    @property
    def reference_payment_gateway_transaction_log(self):
        """Gets the reference_payment_gateway_transaction_log of this PaymentGatewayTransactionAsyncLogs.  # noqa: E501


        :return: The reference_payment_gateway_transaction_log of this PaymentGatewayTransactionAsyncLogs.  # noqa: E501
        :rtype: PaymentGatewayTransactionLogs
        """
        return self._reference_payment_gateway_transaction_log

    @reference_payment_gateway_transaction_log.setter
    def reference_payment_gateway_transaction_log(self, reference_payment_gateway_transaction_log):
        """Sets the reference_payment_gateway_transaction_log of this PaymentGatewayTransactionAsyncLogs.


        :param reference_payment_gateway_transaction_log: The reference_payment_gateway_transaction_log of this PaymentGatewayTransactionAsyncLogs.  # noqa: E501
        :type: PaymentGatewayTransactionLogs
        """

        self._reference_payment_gateway_transaction_log = reference_payment_gateway_transaction_log

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PaymentGatewayTransactionAsyncLogs, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PaymentGatewayTransactionAsyncLogs):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
