# coding: utf-8

"""
    splitit-web-api-public-sdk

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class FundingCollectDocumentDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'amount': 'float',
        'collect_document_id': 'int',
        'installment_id': 'int',
        'plan_id': 'int',
        'collect_document': 'CollectDocuments',
        'installment': 'Installments',
        'plan': 'InstallmentPlans',
        'funding_pay_document_details': 'list[FundingPayDocumentDetails]',
        'transfer_reason': 'FundingTransferReason'
    }

    attribute_map = {
        'id': 'Id',
        'amount': 'Amount',
        'collect_document_id': 'CollectDocumentId',
        'installment_id': 'InstallmentId',
        'plan_id': 'PlanId',
        'collect_document': 'CollectDocument',
        'installment': 'Installment',
        'plan': 'Plan',
        'funding_pay_document_details': 'FundingPayDocumentDetails',
        'transfer_reason': 'TransferReason'
    }

    def __init__(self, id=None, amount=None, collect_document_id=None, installment_id=None, plan_id=None, collect_document=None, installment=None, plan=None, funding_pay_document_details=None, transfer_reason=None):  # noqa: E501
        """FundingCollectDocumentDetails - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._amount = None
        self._collect_document_id = None
        self._installment_id = None
        self._plan_id = None
        self._collect_document = None
        self._installment = None
        self._plan = None
        self._funding_pay_document_details = None
        self._transfer_reason = None
        self.discriminator = None

        self._id = id
        self._amount = amount
        self._collect_document_id = collect_document_id
        if installment_id is not None:
            self._installment_id = installment_id
        if plan_id is not None:
            self._plan_id = plan_id
        if collect_document is not None:
            self._collect_document = collect_document
        if installment is not None:
            self._installment = installment
        if plan is not None:
            self._plan = plan
        if funding_pay_document_details is not None:
            self._funding_pay_document_details = funding_pay_document_details
        self._transfer_reason = transfer_reason

    @property
    def id(self):
        """Gets the id of this FundingCollectDocumentDetails.  # noqa: E501


        :return: The id of this FundingCollectDocumentDetails.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this FundingCollectDocumentDetails.


        :param id: The id of this FundingCollectDocumentDetails.  # noqa: E501
        :type: int
        """
        
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def amount(self):
        """Gets the amount of this FundingCollectDocumentDetails.  # noqa: E501


        :return: The amount of this FundingCollectDocumentDetails.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this FundingCollectDocumentDetails.


        :param amount: The amount of this FundingCollectDocumentDetails.  # noqa: E501
        :type: float
        """
        
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")  # noqa: E501

        self._amount = amount

    @property
    def collect_document_id(self):
        """Gets the collect_document_id of this FundingCollectDocumentDetails.  # noqa: E501


        :return: The collect_document_id of this FundingCollectDocumentDetails.  # noqa: E501
        :rtype: int
        """
        return self._collect_document_id

    @collect_document_id.setter
    def collect_document_id(self, collect_document_id):
        """Sets the collect_document_id of this FundingCollectDocumentDetails.


        :param collect_document_id: The collect_document_id of this FundingCollectDocumentDetails.  # noqa: E501
        :type: int
        """
        
        if collect_document_id is None:
            raise ValueError("Invalid value for `collect_document_id`, must not be `None`")  # noqa: E501

        self._collect_document_id = collect_document_id

    @property
    def installment_id(self):
        """Gets the installment_id of this FundingCollectDocumentDetails.  # noqa: E501


        :return: The installment_id of this FundingCollectDocumentDetails.  # noqa: E501
        :rtype: int
        """
        return self._installment_id

    @installment_id.setter
    def installment_id(self, installment_id):
        """Sets the installment_id of this FundingCollectDocumentDetails.


        :param installment_id: The installment_id of this FundingCollectDocumentDetails.  # noqa: E501
        :type: int
        """

        self._installment_id = installment_id

    @property
    def plan_id(self):
        """Gets the plan_id of this FundingCollectDocumentDetails.  # noqa: E501


        :return: The plan_id of this FundingCollectDocumentDetails.  # noqa: E501
        :rtype: int
        """
        return self._plan_id

    @plan_id.setter
    def plan_id(self, plan_id):
        """Sets the plan_id of this FundingCollectDocumentDetails.


        :param plan_id: The plan_id of this FundingCollectDocumentDetails.  # noqa: E501
        :type: int
        """

        self._plan_id = plan_id

    @property
    def collect_document(self):
        """Gets the collect_document of this FundingCollectDocumentDetails.  # noqa: E501


        :return: The collect_document of this FundingCollectDocumentDetails.  # noqa: E501
        :rtype: CollectDocuments
        """
        return self._collect_document

    @collect_document.setter
    def collect_document(self, collect_document):
        """Sets the collect_document of this FundingCollectDocumentDetails.


        :param collect_document: The collect_document of this FundingCollectDocumentDetails.  # noqa: E501
        :type: CollectDocuments
        """

        self._collect_document = collect_document

    @property
    def installment(self):
        """Gets the installment of this FundingCollectDocumentDetails.  # noqa: E501


        :return: The installment of this FundingCollectDocumentDetails.  # noqa: E501
        :rtype: Installments
        """
        return self._installment

    @installment.setter
    def installment(self, installment):
        """Sets the installment of this FundingCollectDocumentDetails.


        :param installment: The installment of this FundingCollectDocumentDetails.  # noqa: E501
        :type: Installments
        """

        self._installment = installment

    @property
    def plan(self):
        """Gets the plan of this FundingCollectDocumentDetails.  # noqa: E501


        :return: The plan of this FundingCollectDocumentDetails.  # noqa: E501
        :rtype: InstallmentPlans
        """
        return self._plan

    @plan.setter
    def plan(self, plan):
        """Sets the plan of this FundingCollectDocumentDetails.


        :param plan: The plan of this FundingCollectDocumentDetails.  # noqa: E501
        :type: InstallmentPlans
        """

        self._plan = plan

    @property
    def funding_pay_document_details(self):
        """Gets the funding_pay_document_details of this FundingCollectDocumentDetails.  # noqa: E501


        :return: The funding_pay_document_details of this FundingCollectDocumentDetails.  # noqa: E501
        :rtype: list[FundingPayDocumentDetails]
        """
        return self._funding_pay_document_details

    @funding_pay_document_details.setter
    def funding_pay_document_details(self, funding_pay_document_details):
        """Sets the funding_pay_document_details of this FundingCollectDocumentDetails.


        :param funding_pay_document_details: The funding_pay_document_details of this FundingCollectDocumentDetails.  # noqa: E501
        :type: list[FundingPayDocumentDetails]
        """

        self._funding_pay_document_details = funding_pay_document_details

    @property
    def transfer_reason(self):
        """Gets the transfer_reason of this FundingCollectDocumentDetails.  # noqa: E501


        :return: The transfer_reason of this FundingCollectDocumentDetails.  # noqa: E501
        :rtype: FundingTransferReason
        """
        return self._transfer_reason

    @transfer_reason.setter
    def transfer_reason(self, transfer_reason):
        """Sets the transfer_reason of this FundingCollectDocumentDetails.


        :param transfer_reason: The transfer_reason of this FundingCollectDocumentDetails.  # noqa: E501
        :type: FundingTransferReason
        """
        
        if transfer_reason is None:
            raise ValueError("Invalid value for `transfer_reason`, must not be `None`")  # noqa: E501

        self._transfer_reason = transfer_reason

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FundingCollectDocumentDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FundingCollectDocumentDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
