#!/usr/bin/env python3
# This file is placed in the Public Domain.

__version__ = 41

import atexit
import os
import sys
import termios

sys.path.insert(0, os.getcwd())

from botl.bus import first
from botl.clt import Client
from botl.krn import Kernel, kcmd
from botl.obj import cfg

import botl.all
import botd.all

all = "adm,cms,fnd,irc,krn,log,rss,slg,tdo,udp"
resume = {}

def termsetup(fd):
    return termios.tcgetattr(fd)

def termreset():
    if "old" in resume:
        try:
            termios.tcsetattr(resume["fd"], termios.TCSADRAIN, resume["old"])
        except termios.error:
            pass

def termsave():
    try:
        resume["fd"] = sys.stdin.fileno()
        resume["old"] = termsetup(sys.stdin.fileno())
        atexit.register(termreset)
    except termios.error:
        pass

class CLI(Client):

    def raw(self, txt):
        print(txt)

    def start(self):
        super().start()
        self.initialize(kcmd)

class Console(CLI):

    def handle(self, e):
        super().handle(e)
        e.wait()

    def poll(self):
        return input("> ")

def rse(event):
    c = first()
    c.restart()

def ver(event):
    event.reply("BOTD %s" % __version__)

def main():
    cfg.wd = os.path.expanduser("~/.bot")
    k = Kernel()
    k.addcmd(rse)
    k.addcmd(ver)
    k.boot("botd", all)
    if k.cfg.txt:
        c = CLI()
        c.initialize()
        e = c.event(k.cfg.otxt)
        kcmd(c, e)
        e.wait()
        return
    c = Client()
    k.init(k.cfg.mods)
    if k.opts("c"):
        c = Console()
    if k.opts("cd"):
        c.start()
        c.wait()

def exec(main):
    termsave()
    try:
        main()
    except KeyboardInterrupt:
        pass
    finally:
        termreset()

exec(main)
