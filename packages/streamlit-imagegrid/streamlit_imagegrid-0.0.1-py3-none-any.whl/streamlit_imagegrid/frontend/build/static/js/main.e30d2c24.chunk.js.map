{"version":3,"sources":["utils.tsx","ImageGrid.tsx","types.ts","index.tsx"],"names":["getImageSize","src","idx","width","height","Promise","resolve","reject","newImg","Image","onload","console","log","thumbnailWidth","thumbnailHeight","thumbnail","onerror","e","error","ImageGrid","props","render","content","state","outputImages","loading","errors","zoom","args","length","map","message","style","maxRows","enableImageSelection","onClickThumbnail","Streamlit","setComponentValue","rowHeight","images","overflowY","inputImages","this","computeImgSizes","prevProps","prevState","a","tasks","temp","forEach","x","push","obj","caption","Error","JSON","stringify","setState","all","then","imagesWithSize","outPutImages","concat","sort","b","img","catch","StreamlitComponentBase","withStreamlitConnection","ReactDOM","StrictMode","document","getElementById"],"mappings":"0PAkBO,SAASA,EACdC,EACAC,GAEA,IAAIC,EACAC,EAEJ,OAAO,IAAIC,SAAuC,SAACC,EAASC,GAC1D,IAAMC,EAAS,IAAIC,MACnBD,EAAOE,OAAS,WACdN,EAASI,EAAOJ,OAChBD,EAAQK,EAAOL,MACfQ,QAAQC,IAAI,qBAAuBT,EAAQ,IAAMC,GACjDE,EAAQ,CACNJ,EACA,CACEW,eAAgBV,EAChBW,gBAAiBV,EACjBH,IAAKA,EACLc,UAAWd,MAMjBO,EAAOQ,QAAU,SAACC,GAChBN,QAAQO,MAAMD,GACdV,EAAOU,IAETT,EAAOP,IAAMA,K,YCjBXkB,E,kDACJ,WAAYC,GAAwB,IAAD,8BACjC,cAAMA,IAoFDC,OAAS,WAAiB,IAG3BC,EAH2B,EAEW,EAAKC,MAAvCC,EAFuB,EAEvBA,aAAcC,EAFS,EAETA,QAASC,EAFA,EAEAA,OAMzBC,EAAO,EAAKP,MAAMQ,KAAX,KACPxB,EAAS,EAAKgB,MAAMQ,KAAX,OAoBf,OAjBEN,EADEG,EACQ,6CAENC,EAAOG,OAAS,EACRH,EAAOI,KAAI,SAACb,GAAD,OAAO,8BAAsBA,EAAEc,SAAdd,EAAEc,YAGtC,cAAC,IAAD,CACEC,MAAO,CAAE7B,MAAO,QAChB8B,QAAS,IACTC,sBAAsB,EACtBC,iBAjBW,SAAClB,GAClBmB,IAAUC,kBAAkBb,EAAaP,KAiBnCqB,UAAWX,EACXY,OAAQf,IAKT,qBAAKQ,MAAO,CAAE5B,OAAQA,EAAQoC,UAAW,QAAzC,SAAoDlB,KAhH3D,EAAKC,MAAQ,CACXE,SAAS,EACTgB,YAAa,EAAKrB,MAAMQ,KAAKW,QAAU,GACvCf,aAAc,GACdE,OAAQ,IANuB,E,qDASnC,WACEgB,KAAKC,oB,gCAEP,SAAmBC,EAAUC,GAC3BlC,QAAQC,IAAIgC,EAAUC,GACtBH,KAAKC,oB,oEAGP,uCAAAG,EAAA,yDACUL,EAAgBC,KAAKnB,MAArBkB,YACFM,EAAkD,GAClDC,EAAwC,KAE1CP,EAAYZ,OAAS,GAL3B,uBAMIY,EAAYQ,SAAQ,SAACC,EAAGhD,GAEtB,GAAiB,kBAANgD,EACTH,EAAMI,KAAKnD,EAAakD,EAAGhD,SACtB,GCpCN,QAD4BkD,EDqCGF,ICpCf,UAAWE,GAAO,WAAYA,EDqC7CJ,EAAKG,KAAK,CACRjD,EACA,CACEmD,QAAS,OACTpD,IAAKiD,EAAC,IACNnC,UAAWmC,EAAC,IACZrC,eAAgBqC,EAAC,MACjBpC,gBAAiBoC,EAAC,cAGjB,CACL,IAAMjC,EAAI,IAAIqC,MAAJ,UACLC,KAAKC,UACNN,GAFM,qGAKV,EAAKO,SAAS,CACZ/B,OAAO,GAAD,mBAAM,EAAKH,MAAMG,QAAjB,CAAyBT,MAEjCN,QAAQO,MAAMD,GCzDjB,IAA8BmC,KD2BnC,SAkCU/C,QAAQqD,IAAIX,GACfY,MAAK,SAACC,GAEL,IAAMC,EAAeb,EAClBc,OAAOF,GAEPG,MAAK,SAACjB,EAAGkB,GAER,OAAIlB,EAAE,GAAKkB,EAAE,IAITlB,EAAE,GAAKkB,EAAE,IAHH,EAOH,KAGRlC,KAAI,SAACmC,GAAD,OAASA,EAAI,MAGpB,EAAKR,SAAS,CACZjC,aAAcqC,EACdpC,SAAS,OAGZyC,OAAM,SAACjD,GACN,EAAKwC,SAAS,CAAEhC,SAAS,EAAOC,OAAO,GAAD,mBAAM,EAAKH,MAAMG,QAAjB,CAAyBT,MAC/DN,QAAQO,MAAMD,MA/DtB,gD,2DAlBsBkD,KAuHTC,cAAwBjD,GEzIvCkD,IAAShD,OACP,cAAC,IAAMiD,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.e30d2c24.chunk.js","sourcesContent":["/*\nCopyright 2020 Adobe\nAll Rights Reserved.\n\nNOTICE: Adobe permits you to use, modify, and distribute this file in\naccordance with the terms of the Adobe license agreement accompanying\nit.\n*/\n/**\n *\n * @param src Image Url\n * @param idx Index in input array. Since we allow a mix of urls and objects in our input images array\n * we keep the index in order to restore the order of the images intended by the user.\n */\n\nimport { ReactGridGalleryImg } from \"./types\"\n\n//TODO: move to utils folder\nexport function getImageSize(\n  src: string,\n  idx: number\n): Promise<[number, ReactGridGalleryImg]> {\n  let width: number\n  let height: number\n\n  return new Promise<[number, ReactGridGalleryImg]>((resolve, reject) => {\n    const newImg = new Image()\n    newImg.onload = function () {\n      height = newImg.height\n      width = newImg.width\n      console.log(\"The image size is \" + width + \"*\" + height)\n      resolve([\n        idx,\n        {\n          thumbnailWidth: width,\n          thumbnailHeight: height,\n          src: src,\n          thumbnail: src,\n        },\n      ])\n    }\n\n    //if there is an error loading the image.\n    newImg.onerror = (e) => {\n      console.error(e)\n      reject(e)\n    }\n    newImg.src = src // this must be done AFTER setting onload\n  })\n}\n","/*\nCopyright 2020 Adobe\nAll Rights Reserved.\n\nNOTICE: Adobe permits you to use, modify, and distribute this file in\naccordance with the terms of the Adobe license agreement accompanying\nit.\n*/\nimport {\n  Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection,\n  ComponentProps,\n} from \"streamlit-component-lib\"\nimport Gallery from \"react-grid-gallery\"\nimport React, { ReactNode } from \"react\"\nimport { InputImage, ReactGridGalleryImg, instanceOfInputImage } from \"./types\"\nimport { getImageSize } from \"./utils\"\n\ntype ImageGridState = {\n  loading: boolean\n  inputImages: (InputImage | string)[]\n  outputImages: ReactGridGalleryImg[]\n  errors: Error[]\n}\n\ninterface ImageGridProps extends ComponentProps {\n  args: { images: (InputImage | string)[]; zoom: number; height: number }\n}\n\nclass ImageGrid extends StreamlitComponentBase<ImageGridState> {\n  constructor(props: ImageGridProps) {\n    super(props)\n    this.state = {\n      loading: true,\n      inputImages: this.props.args.images || [],\n      outputImages: [],\n      errors: [],\n    }\n  }\n  componentDidMount() {\n    this.computeImgSizes() // move to component did mount ?\n  }\n  componentDidUpdate(prevProps,prevState) {\n    console.log(prevProps,prevState)\n    this.computeImgSizes()\n  }\n\n  async computeImgSizes() {\n    const { inputImages } = this.state\n    const tasks: Promise<[number, ReactGridGalleryImg]>[] = []\n    const temp: [number, ReactGridGalleryImg][] = []\n\n    if (inputImages.length > 0) {\n      inputImages.forEach((x, idx) => {\n        //Check if element is url. TODO use url regex check\n        if (typeof x === \"string\") {\n          tasks.push(getImageSize(x, idx))\n        } else if (instanceOfInputImage(x)) {\n          temp.push([\n            idx,\n            {\n              caption: \"Yeah\",\n              src: x[\"src\"],\n              thumbnail: x[\"src\"],\n              thumbnailWidth: x[\"width\"],\n              thumbnailHeight: x[\"height\"],\n            },\n          ])\n        } else {\n          const e = new Error(\n            `${JSON.stringify(\n              x\n            )} is not a valid image format. Please use image url or {src:string, width:number, height:number }`\n          )\n          this.setState({\n            errors: [...this.state.errors, e],\n          })\n          console.error(e)\n        }\n      })\n\n      await Promise.all(tasks)\n        .then((imagesWithSize) => {\n          //concat\n          const outPutImages = temp\n            .concat(imagesWithSize)\n            //sort\n            .sort((a, b) => {\n              //TODO: decalre in helper\n              if (a[0] < b[0]) {\n                return -1\n              }\n\n              if (a[0] > b[0]) {\n                return -1\n              }\n\n              return 0\n            })\n            //strip away index\n            .map((img) => img[1])\n\n          //update state\n          this.setState({\n            outputImages: outPutImages,\n            loading: false,\n          })\n        })\n        .catch((e) => {\n          this.setState({ loading: false, errors: [...this.state.errors, e] })\n          console.error(e)\n        })\n    }\n  }\n\n  public render = (): ReactNode => {\n    //if loading is true render spinner, else render grid\n    const { outputImages, loading, errors } = this.state\n    let content\n\n    const imageClick = (e: any) => {\n      Streamlit.setComponentValue(outputImages[e])\n    }\n    const zoom = this.props.args[\"zoom\"]\n    const height = this.props.args[\"height\"]\n\n    if (loading) {\n      content = <div>Loading...</div>\n    } else {\n      if (errors.length > 0) {\n        content = errors.map((e) => <div key={e.message}>{e.message}</div>)\n      } else {\n        content = (\n          <Gallery\n            style={{ width: \"auto\" }}\n            maxRows={100}\n            enableImageSelection={true}\n            onClickThumbnail={imageClick}\n            rowHeight={zoom}\n            images={outputImages}\n          />\n        )\n      }\n    }\n    return <div style={{ height: height, overflowY: \"auto\" }}>{content}</div>\n  }\n}\n\nexport default withStreamlitConnection(ImageGrid)\n","/*\nCopyright 2020 Adobe\nAll Rights Reserved.\n\nNOTICE: Adobe permits you to use, modify, and distribute this file in\naccordance with the terms of the Adobe license agreement accompanying\nit.\n*/\nexport type ImgWithSize = {\n  width: number\n  height: number\n  src: string\n}\n\nexport interface InputImage {\n  src: string\n  width: number\n  height: number\n  [k: string]: any\n}\n\nexport function instanceOfInputImage(obj: any): obj is InputImage {\n  return \"src\" in obj && \"width\" in obj && \"height\" in obj\n}\n\nexport type ReactGridGalleryImg = {\n  thumbnail: string\n  src: string\n  thumbnailWidth: number\n  thumbnailHeight: number\n  caption?: string\n}\n","/*\nCopyright 2020 Adobe\nAll Rights Reserved.\n\nNOTICE: Adobe permits you to use, modify, and distribute this file in\naccordance with the terms of the Adobe license agreement accompanying\nit.\n*/\nimport React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport ImageGrid from \"./ImageGrid\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <ImageGrid />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}