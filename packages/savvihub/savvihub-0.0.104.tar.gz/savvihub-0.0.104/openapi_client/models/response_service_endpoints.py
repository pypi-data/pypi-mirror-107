# coding: utf-8

"""
    Aron API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import inspect
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class ResponseServiceEndpoints(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'manually_defined_endpoints': 'list[ModelServiceEndpoint]',
        'ssh': 'ModelServiceEndpoint',
        'ssh_attach': 'ModelServiceEndpoint'
    }

    attribute_map = {
        'manually_defined_endpoints': 'manually_defined_endpoints',
        'ssh': 'ssh',
        'ssh_attach': 'ssh_attach'
    }

    def __init__(self, manually_defined_endpoints=None, ssh=None, ssh_attach=None, local_vars_configuration=None):  # noqa: E501
        """ResponseServiceEndpoints - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._manually_defined_endpoints = None
        self._ssh = None
        self._ssh_attach = None
        self.discriminator = None

        if manually_defined_endpoints is not None:
            self.manually_defined_endpoints = manually_defined_endpoints
        if ssh is not None:
            self.ssh = ssh
        if ssh_attach is not None:
            self.ssh_attach = ssh_attach

    @property
    def manually_defined_endpoints(self):
        """Gets the manually_defined_endpoints of this ResponseServiceEndpoints.  # noqa: E501


        :return: The manually_defined_endpoints of this ResponseServiceEndpoints.  # noqa: E501
        :rtype: list[ModelServiceEndpoint]
        """
        return self._manually_defined_endpoints

    @manually_defined_endpoints.setter
    def manually_defined_endpoints(self, manually_defined_endpoints):
        """Sets the manually_defined_endpoints of this ResponseServiceEndpoints.


        :param manually_defined_endpoints: The manually_defined_endpoints of this ResponseServiceEndpoints.  # noqa: E501
        :type manually_defined_endpoints: list[ModelServiceEndpoint]
        """

        self._manually_defined_endpoints = manually_defined_endpoints

    @property
    def ssh(self):
        """Gets the ssh of this ResponseServiceEndpoints.  # noqa: E501


        :return: The ssh of this ResponseServiceEndpoints.  # noqa: E501
        :rtype: ModelServiceEndpoint
        """
        return self._ssh

    @ssh.setter
    def ssh(self, ssh):
        """Sets the ssh of this ResponseServiceEndpoints.


        :param ssh: The ssh of this ResponseServiceEndpoints.  # noqa: E501
        :type ssh: ModelServiceEndpoint
        """

        self._ssh = ssh

    @property
    def ssh_attach(self):
        """Gets the ssh_attach of this ResponseServiceEndpoints.  # noqa: E501


        :return: The ssh_attach of this ResponseServiceEndpoints.  # noqa: E501
        :rtype: ModelServiceEndpoint
        """
        return self._ssh_attach

    @ssh_attach.setter
    def ssh_attach(self, ssh_attach):
        """Sets the ssh_attach of this ResponseServiceEndpoints.


        :param ssh_attach: The ssh_attach of this ResponseServiceEndpoints.  # noqa: E501
        :type ssh_attach: ModelServiceEndpoint
        """

        self._ssh_attach = ssh_attach

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = inspect.getargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResponseServiceEndpoints):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ResponseServiceEndpoints):
            return True

        return self.to_dict() != other.to_dict()
