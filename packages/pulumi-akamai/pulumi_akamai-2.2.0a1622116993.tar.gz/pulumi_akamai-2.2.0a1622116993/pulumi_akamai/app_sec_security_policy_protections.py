# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['AppSecSecurityPolicyProtectionsArgs', 'AppSecSecurityPolicyProtections']

@pulumi.input_type
class AppSecSecurityPolicyProtectionsArgs:
    def __init__(__self__, *,
                 config_id: pulumi.Input[int],
                 security_policy_id: pulumi.Input[str],
                 version: pulumi.Input[int],
                 apply_api_constraints: Optional[pulumi.Input[bool]] = None,
                 apply_application_layer_controls: Optional[pulumi.Input[bool]] = None,
                 apply_botman_controls: Optional[pulumi.Input[bool]] = None,
                 apply_network_layer_controls: Optional[pulumi.Input[bool]] = None,
                 apply_rate_controls: Optional[pulumi.Input[bool]] = None,
                 apply_reputation_controls: Optional[pulumi.Input[bool]] = None,
                 apply_slow_post_controls: Optional[pulumi.Input[bool]] = None):
        """
        The set of arguments for constructing a AppSecSecurityPolicyProtections resource.
        :param pulumi.Input[int] config_id: The ID of the security configuration to use.
        :param pulumi.Input[str] security_policy_id: The ID of the security policy to use.
        :param pulumi.Input[int] version: The version number of the security configuration to use.
        :param pulumi.Input[bool] apply_api_constraints: Whether to enable api constraints: either `true` or `false`.
        :param pulumi.Input[bool] apply_application_layer_controls: Whether to enable application layer controls: either `true` or `false`.
        :param pulumi.Input[bool] apply_botman_controls: Whether to enable botman controls: either `true` or `false`.
        :param pulumi.Input[bool] apply_network_layer_controls: Whether to enable network layer controls: either `true` or `false`.
        :param pulumi.Input[bool] apply_rate_controls: Whether to enable rate controls: either `true` or `false`.
        :param pulumi.Input[bool] apply_reputation_controls: Whether to enable reputation controls: either `true` or `false`.
        :param pulumi.Input[bool] apply_slow_post_controls: Whether to enable slow post controls: either `true` or `false`.
        """
        pulumi.set(__self__, "config_id", config_id)
        pulumi.set(__self__, "security_policy_id", security_policy_id)
        pulumi.set(__self__, "version", version)
        if apply_api_constraints is not None:
            pulumi.set(__self__, "apply_api_constraints", apply_api_constraints)
        if apply_application_layer_controls is not None:
            pulumi.set(__self__, "apply_application_layer_controls", apply_application_layer_controls)
        if apply_botman_controls is not None:
            pulumi.set(__self__, "apply_botman_controls", apply_botman_controls)
        if apply_network_layer_controls is not None:
            pulumi.set(__self__, "apply_network_layer_controls", apply_network_layer_controls)
        if apply_rate_controls is not None:
            pulumi.set(__self__, "apply_rate_controls", apply_rate_controls)
        if apply_reputation_controls is not None:
            pulumi.set(__self__, "apply_reputation_controls", apply_reputation_controls)
        if apply_slow_post_controls is not None:
            pulumi.set(__self__, "apply_slow_post_controls", apply_slow_post_controls)

    @property
    @pulumi.getter(name="configId")
    def config_id(self) -> pulumi.Input[int]:
        """
        The ID of the security configuration to use.
        """
        return pulumi.get(self, "config_id")

    @config_id.setter
    def config_id(self, value: pulumi.Input[int]):
        pulumi.set(self, "config_id", value)

    @property
    @pulumi.getter(name="securityPolicyId")
    def security_policy_id(self) -> pulumi.Input[str]:
        """
        The ID of the security policy to use.
        """
        return pulumi.get(self, "security_policy_id")

    @security_policy_id.setter
    def security_policy_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "security_policy_id", value)

    @property
    @pulumi.getter
    def version(self) -> pulumi.Input[int]:
        """
        The version number of the security configuration to use.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: pulumi.Input[int]):
        pulumi.set(self, "version", value)

    @property
    @pulumi.getter(name="applyApiConstraints")
    def apply_api_constraints(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to enable api constraints: either `true` or `false`.
        """
        return pulumi.get(self, "apply_api_constraints")

    @apply_api_constraints.setter
    def apply_api_constraints(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "apply_api_constraints", value)

    @property
    @pulumi.getter(name="applyApplicationLayerControls")
    def apply_application_layer_controls(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to enable application layer controls: either `true` or `false`.
        """
        return pulumi.get(self, "apply_application_layer_controls")

    @apply_application_layer_controls.setter
    def apply_application_layer_controls(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "apply_application_layer_controls", value)

    @property
    @pulumi.getter(name="applyBotmanControls")
    def apply_botman_controls(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to enable botman controls: either `true` or `false`.
        """
        return pulumi.get(self, "apply_botman_controls")

    @apply_botman_controls.setter
    def apply_botman_controls(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "apply_botman_controls", value)

    @property
    @pulumi.getter(name="applyNetworkLayerControls")
    def apply_network_layer_controls(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to enable network layer controls: either `true` or `false`.
        """
        return pulumi.get(self, "apply_network_layer_controls")

    @apply_network_layer_controls.setter
    def apply_network_layer_controls(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "apply_network_layer_controls", value)

    @property
    @pulumi.getter(name="applyRateControls")
    def apply_rate_controls(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to enable rate controls: either `true` or `false`.
        """
        return pulumi.get(self, "apply_rate_controls")

    @apply_rate_controls.setter
    def apply_rate_controls(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "apply_rate_controls", value)

    @property
    @pulumi.getter(name="applyReputationControls")
    def apply_reputation_controls(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to enable reputation controls: either `true` or `false`.
        """
        return pulumi.get(self, "apply_reputation_controls")

    @apply_reputation_controls.setter
    def apply_reputation_controls(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "apply_reputation_controls", value)

    @property
    @pulumi.getter(name="applySlowPostControls")
    def apply_slow_post_controls(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to enable slow post controls: either `true` or `false`.
        """
        return pulumi.get(self, "apply_slow_post_controls")

    @apply_slow_post_controls.setter
    def apply_slow_post_controls(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "apply_slow_post_controls", value)


@pulumi.input_type
class _AppSecSecurityPolicyProtectionsState:
    def __init__(__self__, *,
                 apply_api_constraints: Optional[pulumi.Input[bool]] = None,
                 apply_application_layer_controls: Optional[pulumi.Input[bool]] = None,
                 apply_botman_controls: Optional[pulumi.Input[bool]] = None,
                 apply_network_layer_controls: Optional[pulumi.Input[bool]] = None,
                 apply_rate_controls: Optional[pulumi.Input[bool]] = None,
                 apply_reputation_controls: Optional[pulumi.Input[bool]] = None,
                 apply_slow_post_controls: Optional[pulumi.Input[bool]] = None,
                 config_id: Optional[pulumi.Input[int]] = None,
                 security_policy_id: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[int]] = None):
        """
        Input properties used for looking up and filtering AppSecSecurityPolicyProtections resources.
        :param pulumi.Input[bool] apply_api_constraints: Whether to enable api constraints: either `true` or `false`.
        :param pulumi.Input[bool] apply_application_layer_controls: Whether to enable application layer controls: either `true` or `false`.
        :param pulumi.Input[bool] apply_botman_controls: Whether to enable botman controls: either `true` or `false`.
        :param pulumi.Input[bool] apply_network_layer_controls: Whether to enable network layer controls: either `true` or `false`.
        :param pulumi.Input[bool] apply_rate_controls: Whether to enable rate controls: either `true` or `false`.
        :param pulumi.Input[bool] apply_reputation_controls: Whether to enable reputation controls: either `true` or `false`.
        :param pulumi.Input[bool] apply_slow_post_controls: Whether to enable slow post controls: either `true` or `false`.
        :param pulumi.Input[int] config_id: The ID of the security configuration to use.
        :param pulumi.Input[str] security_policy_id: The ID of the security policy to use.
        :param pulumi.Input[int] version: The version number of the security configuration to use.
        """
        if apply_api_constraints is not None:
            pulumi.set(__self__, "apply_api_constraints", apply_api_constraints)
        if apply_application_layer_controls is not None:
            pulumi.set(__self__, "apply_application_layer_controls", apply_application_layer_controls)
        if apply_botman_controls is not None:
            pulumi.set(__self__, "apply_botman_controls", apply_botman_controls)
        if apply_network_layer_controls is not None:
            pulumi.set(__self__, "apply_network_layer_controls", apply_network_layer_controls)
        if apply_rate_controls is not None:
            pulumi.set(__self__, "apply_rate_controls", apply_rate_controls)
        if apply_reputation_controls is not None:
            pulumi.set(__self__, "apply_reputation_controls", apply_reputation_controls)
        if apply_slow_post_controls is not None:
            pulumi.set(__self__, "apply_slow_post_controls", apply_slow_post_controls)
        if config_id is not None:
            pulumi.set(__self__, "config_id", config_id)
        if security_policy_id is not None:
            pulumi.set(__self__, "security_policy_id", security_policy_id)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="applyApiConstraints")
    def apply_api_constraints(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to enable api constraints: either `true` or `false`.
        """
        return pulumi.get(self, "apply_api_constraints")

    @apply_api_constraints.setter
    def apply_api_constraints(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "apply_api_constraints", value)

    @property
    @pulumi.getter(name="applyApplicationLayerControls")
    def apply_application_layer_controls(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to enable application layer controls: either `true` or `false`.
        """
        return pulumi.get(self, "apply_application_layer_controls")

    @apply_application_layer_controls.setter
    def apply_application_layer_controls(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "apply_application_layer_controls", value)

    @property
    @pulumi.getter(name="applyBotmanControls")
    def apply_botman_controls(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to enable botman controls: either `true` or `false`.
        """
        return pulumi.get(self, "apply_botman_controls")

    @apply_botman_controls.setter
    def apply_botman_controls(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "apply_botman_controls", value)

    @property
    @pulumi.getter(name="applyNetworkLayerControls")
    def apply_network_layer_controls(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to enable network layer controls: either `true` or `false`.
        """
        return pulumi.get(self, "apply_network_layer_controls")

    @apply_network_layer_controls.setter
    def apply_network_layer_controls(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "apply_network_layer_controls", value)

    @property
    @pulumi.getter(name="applyRateControls")
    def apply_rate_controls(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to enable rate controls: either `true` or `false`.
        """
        return pulumi.get(self, "apply_rate_controls")

    @apply_rate_controls.setter
    def apply_rate_controls(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "apply_rate_controls", value)

    @property
    @pulumi.getter(name="applyReputationControls")
    def apply_reputation_controls(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to enable reputation controls: either `true` or `false`.
        """
        return pulumi.get(self, "apply_reputation_controls")

    @apply_reputation_controls.setter
    def apply_reputation_controls(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "apply_reputation_controls", value)

    @property
    @pulumi.getter(name="applySlowPostControls")
    def apply_slow_post_controls(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to enable slow post controls: either `true` or `false`.
        """
        return pulumi.get(self, "apply_slow_post_controls")

    @apply_slow_post_controls.setter
    def apply_slow_post_controls(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "apply_slow_post_controls", value)

    @property
    @pulumi.getter(name="configId")
    def config_id(self) -> Optional[pulumi.Input[int]]:
        """
        The ID of the security configuration to use.
        """
        return pulumi.get(self, "config_id")

    @config_id.setter
    def config_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "config_id", value)

    @property
    @pulumi.getter(name="securityPolicyId")
    def security_policy_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the security policy to use.
        """
        return pulumi.get(self, "security_policy_id")

    @security_policy_id.setter
    def security_policy_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "security_policy_id", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[int]]:
        """
        The version number of the security configuration to use.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "version", value)


class AppSecSecurityPolicyProtections(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 apply_api_constraints: Optional[pulumi.Input[bool]] = None,
                 apply_application_layer_controls: Optional[pulumi.Input[bool]] = None,
                 apply_botman_controls: Optional[pulumi.Input[bool]] = None,
                 apply_network_layer_controls: Optional[pulumi.Input[bool]] = None,
                 apply_rate_controls: Optional[pulumi.Input[bool]] = None,
                 apply_reputation_controls: Optional[pulumi.Input[bool]] = None,
                 apply_slow_post_controls: Optional[pulumi.Input[bool]] = None,
                 config_id: Optional[pulumi.Input[int]] = None,
                 security_policy_id: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        """
        Use the `AppSecSecurityPolicyProtections` resource to create or modify ...

        ## Example Usage

        Basic usage:

        ```python
        import pulumi
        import pulumi_akamai as akamai

        configuration = akamai.get_app_sec_configuration(name=var["security_configuration"])
        protections = akamai.AppSecSecurityPolicyProtections("protections",
            config_id=configuration.config_id,
            version=configuration.latest_version,
            security_policy_id=var["security_policy_id"],
            apply_application_layer_controls=var["apply_application_layer_controls"],
            apply_network_layer_controls=var["apply_network_layer_controls"],
            apply_rate_controls=var["apply_rate_controls"],
            apply_reputation_controls=var["apply_reputation_controls"],
            apply_botman_controls=var["apply_botman_controls"],
            apply_api_constraints=var["apply_api_constraints"],
            apply_slow_post_controls=var["apply_slow_post_controls"])
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] apply_api_constraints: Whether to enable api constraints: either `true` or `false`.
        :param pulumi.Input[bool] apply_application_layer_controls: Whether to enable application layer controls: either `true` or `false`.
        :param pulumi.Input[bool] apply_botman_controls: Whether to enable botman controls: either `true` or `false`.
        :param pulumi.Input[bool] apply_network_layer_controls: Whether to enable network layer controls: either `true` or `false`.
        :param pulumi.Input[bool] apply_rate_controls: Whether to enable rate controls: either `true` or `false`.
        :param pulumi.Input[bool] apply_reputation_controls: Whether to enable reputation controls: either `true` or `false`.
        :param pulumi.Input[bool] apply_slow_post_controls: Whether to enable slow post controls: either `true` or `false`.
        :param pulumi.Input[int] config_id: The ID of the security configuration to use.
        :param pulumi.Input[str] security_policy_id: The ID of the security policy to use.
        :param pulumi.Input[int] version: The version number of the security configuration to use.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AppSecSecurityPolicyProtectionsArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Use the `AppSecSecurityPolicyProtections` resource to create or modify ...

        ## Example Usage

        Basic usage:

        ```python
        import pulumi
        import pulumi_akamai as akamai

        configuration = akamai.get_app_sec_configuration(name=var["security_configuration"])
        protections = akamai.AppSecSecurityPolicyProtections("protections",
            config_id=configuration.config_id,
            version=configuration.latest_version,
            security_policy_id=var["security_policy_id"],
            apply_application_layer_controls=var["apply_application_layer_controls"],
            apply_network_layer_controls=var["apply_network_layer_controls"],
            apply_rate_controls=var["apply_rate_controls"],
            apply_reputation_controls=var["apply_reputation_controls"],
            apply_botman_controls=var["apply_botman_controls"],
            apply_api_constraints=var["apply_api_constraints"],
            apply_slow_post_controls=var["apply_slow_post_controls"])
        ```

        :param str resource_name: The name of the resource.
        :param AppSecSecurityPolicyProtectionsArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AppSecSecurityPolicyProtectionsArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 apply_api_constraints: Optional[pulumi.Input[bool]] = None,
                 apply_application_layer_controls: Optional[pulumi.Input[bool]] = None,
                 apply_botman_controls: Optional[pulumi.Input[bool]] = None,
                 apply_network_layer_controls: Optional[pulumi.Input[bool]] = None,
                 apply_rate_controls: Optional[pulumi.Input[bool]] = None,
                 apply_reputation_controls: Optional[pulumi.Input[bool]] = None,
                 apply_slow_post_controls: Optional[pulumi.Input[bool]] = None,
                 config_id: Optional[pulumi.Input[int]] = None,
                 security_policy_id: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AppSecSecurityPolicyProtectionsArgs.__new__(AppSecSecurityPolicyProtectionsArgs)

            __props__.__dict__["apply_api_constraints"] = apply_api_constraints
            __props__.__dict__["apply_application_layer_controls"] = apply_application_layer_controls
            __props__.__dict__["apply_botman_controls"] = apply_botman_controls
            __props__.__dict__["apply_network_layer_controls"] = apply_network_layer_controls
            __props__.__dict__["apply_rate_controls"] = apply_rate_controls
            __props__.__dict__["apply_reputation_controls"] = apply_reputation_controls
            __props__.__dict__["apply_slow_post_controls"] = apply_slow_post_controls
            if config_id is None and not opts.urn:
                raise TypeError("Missing required property 'config_id'")
            __props__.__dict__["config_id"] = config_id
            if security_policy_id is None and not opts.urn:
                raise TypeError("Missing required property 'security_policy_id'")
            __props__.__dict__["security_policy_id"] = security_policy_id
            if version is None and not opts.urn:
                raise TypeError("Missing required property 'version'")
            __props__.__dict__["version"] = version
        super(AppSecSecurityPolicyProtections, __self__).__init__(
            'akamai:index/appSecSecurityPolicyProtections:AppSecSecurityPolicyProtections',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            apply_api_constraints: Optional[pulumi.Input[bool]] = None,
            apply_application_layer_controls: Optional[pulumi.Input[bool]] = None,
            apply_botman_controls: Optional[pulumi.Input[bool]] = None,
            apply_network_layer_controls: Optional[pulumi.Input[bool]] = None,
            apply_rate_controls: Optional[pulumi.Input[bool]] = None,
            apply_reputation_controls: Optional[pulumi.Input[bool]] = None,
            apply_slow_post_controls: Optional[pulumi.Input[bool]] = None,
            config_id: Optional[pulumi.Input[int]] = None,
            security_policy_id: Optional[pulumi.Input[str]] = None,
            version: Optional[pulumi.Input[int]] = None) -> 'AppSecSecurityPolicyProtections':
        """
        Get an existing AppSecSecurityPolicyProtections resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] apply_api_constraints: Whether to enable api constraints: either `true` or `false`.
        :param pulumi.Input[bool] apply_application_layer_controls: Whether to enable application layer controls: either `true` or `false`.
        :param pulumi.Input[bool] apply_botman_controls: Whether to enable botman controls: either `true` or `false`.
        :param pulumi.Input[bool] apply_network_layer_controls: Whether to enable network layer controls: either `true` or `false`.
        :param pulumi.Input[bool] apply_rate_controls: Whether to enable rate controls: either `true` or `false`.
        :param pulumi.Input[bool] apply_reputation_controls: Whether to enable reputation controls: either `true` or `false`.
        :param pulumi.Input[bool] apply_slow_post_controls: Whether to enable slow post controls: either `true` or `false`.
        :param pulumi.Input[int] config_id: The ID of the security configuration to use.
        :param pulumi.Input[str] security_policy_id: The ID of the security policy to use.
        :param pulumi.Input[int] version: The version number of the security configuration to use.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AppSecSecurityPolicyProtectionsState.__new__(_AppSecSecurityPolicyProtectionsState)

        __props__.__dict__["apply_api_constraints"] = apply_api_constraints
        __props__.__dict__["apply_application_layer_controls"] = apply_application_layer_controls
        __props__.__dict__["apply_botman_controls"] = apply_botman_controls
        __props__.__dict__["apply_network_layer_controls"] = apply_network_layer_controls
        __props__.__dict__["apply_rate_controls"] = apply_rate_controls
        __props__.__dict__["apply_reputation_controls"] = apply_reputation_controls
        __props__.__dict__["apply_slow_post_controls"] = apply_slow_post_controls
        __props__.__dict__["config_id"] = config_id
        __props__.__dict__["security_policy_id"] = security_policy_id
        __props__.__dict__["version"] = version
        return AppSecSecurityPolicyProtections(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="applyApiConstraints")
    def apply_api_constraints(self) -> pulumi.Output[Optional[bool]]:
        """
        Whether to enable api constraints: either `true` or `false`.
        """
        return pulumi.get(self, "apply_api_constraints")

    @property
    @pulumi.getter(name="applyApplicationLayerControls")
    def apply_application_layer_controls(self) -> pulumi.Output[Optional[bool]]:
        """
        Whether to enable application layer controls: either `true` or `false`.
        """
        return pulumi.get(self, "apply_application_layer_controls")

    @property
    @pulumi.getter(name="applyBotmanControls")
    def apply_botman_controls(self) -> pulumi.Output[Optional[bool]]:
        """
        Whether to enable botman controls: either `true` or `false`.
        """
        return pulumi.get(self, "apply_botman_controls")

    @property
    @pulumi.getter(name="applyNetworkLayerControls")
    def apply_network_layer_controls(self) -> pulumi.Output[Optional[bool]]:
        """
        Whether to enable network layer controls: either `true` or `false`.
        """
        return pulumi.get(self, "apply_network_layer_controls")

    @property
    @pulumi.getter(name="applyRateControls")
    def apply_rate_controls(self) -> pulumi.Output[Optional[bool]]:
        """
        Whether to enable rate controls: either `true` or `false`.
        """
        return pulumi.get(self, "apply_rate_controls")

    @property
    @pulumi.getter(name="applyReputationControls")
    def apply_reputation_controls(self) -> pulumi.Output[Optional[bool]]:
        """
        Whether to enable reputation controls: either `true` or `false`.
        """
        return pulumi.get(self, "apply_reputation_controls")

    @property
    @pulumi.getter(name="applySlowPostControls")
    def apply_slow_post_controls(self) -> pulumi.Output[Optional[bool]]:
        """
        Whether to enable slow post controls: either `true` or `false`.
        """
        return pulumi.get(self, "apply_slow_post_controls")

    @property
    @pulumi.getter(name="configId")
    def config_id(self) -> pulumi.Output[int]:
        """
        The ID of the security configuration to use.
        """
        return pulumi.get(self, "config_id")

    @property
    @pulumi.getter(name="securityPolicyId")
    def security_policy_id(self) -> pulumi.Output[str]:
        """
        The ID of the security policy to use.
        """
        return pulumi.get(self, "security_policy_id")

    @property
    @pulumi.getter
    def version(self) -> pulumi.Output[int]:
        """
        The version number of the security configuration to use.
        """
        return pulumi.get(self, "version")

